{
  "openapi": "3.1.0",
  "info": {
    "title": "Workupcloud Solutions",
    "version": "0.0.1",
    "description": "# WorkUp Cloud CRM Overview\r\n\r\n**WorkUp Cloud** is a CRM platform specifically designed for the **construction** industry, built to streamline project management and customer relationship workflows. It offers all the essential features of a modern CRM, allowing users to efficiently manage clients, projects, and day-to-day operations. Additionally, **WorkUp Cloud** integrates seamlessly with **QuickBooks** for easy invoicing and financial management.\r\n\r\n## Key Features\r\n\r\n- üìä **Comprehensive CRM Management**: Manage clients, projects, and sales opportunities from one unified platform.\r\n- üíµ **QuickBooks Integration**: Generate invoices and synchronize financial data directly with QuickBooks for hassle-free accounting.\r\n- üìù **Proposal and Work Order Generation**: Easily create detailed proposals and generate work orders, optimizing project workflows.\r\n- üìÖ **Scheduling Calls and Meetings**: Schedule and manage calls and meetings directly within the platform, enhancing communication with clients and team members.\r\n- üí¨ **Messaging and Email Management**: Send messages and emails, ensuring seamless communication with clients and teams.\r\n- üìß **Email Template Management**: Customize and manage email templates to automate and standardize client communications.\r\n\r\nWorkUp Cloud is designed to be **flexible**, **user-friendly**, and adaptable to the specific needs of the construction industry. From managing relationships to integrating finances, it is an all-in-one solution that boosts productivity and efficiency for construction businesses.\r\n\r\n## üõ†Ô∏è API Query Customization\r\n\r\nBelow is a comprehensive guide on how to use the key functionalities of the API, adhering to the JSON:API standard. This documentation covers how to effectively apply **filters**, **sorting**, **sparse fields**, **pagination**, and **search** to interact with the API and retrieve data tailored to your needs. Each section includes examples to help you understand and implement these features easily.\r\n\r\n---\r\n\r\n### üîç Filtering\r\n\r\nUse filters to retrieve specific results based on the attributes of a resource. Filters follow the JSON:API specification and are passed through the `filter` query parameter.\r\n\r\n**Filter format**:\r\n\r\n```http\r\nGET /api/{resource}?filter[{attribute}]={value}\r\n```\r\n**Example**:\r\n\r\n```http\r\nGET /api/companies?filter[name]=Acme\r\n```\r\n> **This request** will retrieve all companies where the `name` attribute is equal to **\"Acme\"**.\r\n> The `filter` query parameter is used to specify the condition, and the attribute (`name`) is placed inside square brackets, following the **JSON:API** specification for filtering.\r\n\r\n#### Soft Delete Filters\r\n\r\nIn addition to filtering based on standard attributes, you can apply filters to retrieve or exclude **soft deleted** records, as well as filter based on the deletion date.\r\n\r\n- `only_trashed`: Retrieve only **soft deleted** records.\r\n- `include_trashed`: Include both **soft deleted** and **active** records in the response.\r\n- `deleted_at_start`: Filter for records **deleted on or after** this date.\r\n- `deleted_at_end`: Filter for records **deleted on or before** this date.\r\n\r\n---\r\n\r\n#### Soft Delete Filters Format:\r\n\r\n```http\r\nGET /api/{resource}?filter[only_trashed]=true\r\nGET /api/{resource}?filter[include_trashed]=true\r\nGET /api/{resource}?filter[deleted_at_start]={date}&filter[deleted_at_end]={date}\r\n```\r\n\r\n### üìù Soft Delete Filtering Explanation\r\n\r\nThe API provides several ways to filter **soft deleted** records or include them alongside active records. You can also filter by the date range when records were deleted.\r\n\r\n- **only_trashed**: This parameter retrieves only the records that have been **soft deleted**, excluding active records. Use this to focus solely on items that are marked as deleted.\r\n\r\n- **include_trashed**: This parameter includes both **active** and **soft deleted** records in the results. It ensures that all records are returned, regardless of their deletion state.\r\n\r\n- **deleted_at_start** and **deleted_at_end**: These parameters allow filtering records based on their **deletion date**. You can specify a start and end date to retrieve only the records that were deleted within that specific time range.\r\n\r\n### üîÄ Sorting\r\n\r\nYou can sort the results of an API request using the `sort` query parameter. Sorting follows the **JSON:API** standard and allows you to specify one or more attributes for sorting.\r\n\r\n- To sort in **ascending order**, simply provide the attribute name.\r\n- To sort in **descending order**, prefix the attribute with a `-`.\r\n\r\n**Sort format**:\r\n\r\n```http\r\nGET /api/{resource}?sort={attribute}\r\n```\r\n\r\n**Example**:\r\n\r\n```http\r\nGET /api/companies?sort=-created_at\r\n```\r\n> **This request** will retrieve all companies sorted by the `created_at` attribute in **descending** order.\r\n> The `sort` query parameter is used to determine the order of the results. Adding a minus sign (`-`) before the attribute name indicates **descending** order, while omitting the sign results in **ascending** order.\r\n\r\n### üìö Pagination\r\n\r\nThe API supports **page-based pagination**, following the **JSON:API** standard. Pagination allows you to control how many records are returned in each request and navigate through multiple pages of results.\r\n\r\nYou can use two key query parameters to control pagination:\r\n\r\n- `page[number]`: Specifies the **current page** you want to retrieve.\r\n- `page[size]`: Defines the **number of records** returned per page.\r\n\r\nBy adjusting these parameters, you can navigate through large sets of data more efficiently.\r\n\r\n**Pagination format**:\r\n\r\n```http\r\nGET /api/{resource}?page[number]={pageNumber}&page[size]={pageSize}\r\n```\r\n\r\n**Example**:\r\n\r\n```http\r\nGET /api/companies?page[number]=2&page[size]=10\r\n```\r\n\r\n> **This request** will retrieve the **second page** of companies, returning **10 companies** per page.\r\n> The `page[number]` parameter is used to specify which page to fetch, while the `page[size]` parameter controls how many records are returned per page.\r\n\r\n### üìÑ Example of Pagination Response\r\n\r\n```json\r\n{\r\n    \"links\": {\r\n        \"first\": \"https://foo.local.workupcloud.com/api/admin/crm/leads/data-table?page[size]=2&page[number]=1\",\r\n        \"last\": \"https://foo.local.workupcloud.com/api/admin/crm/leads/data-table?page[size]=2&page[number]=3\",\r\n        \"prev\": \"https://foo.local.workupcloud.com/api/admin/crm/leads/data-table?page[size]=2&page[number]=1\",\r\n        \"next\": \"https://foo.local.workupcloud.com/api/admin/crm/leads/data-table?page[size]=2&page[number]=3\"\r\n    }\r\n}\r\n```\r\n\r\n> **Explanation**:\r\n> - **links**: The object that provides navigation URLs for pagination.\r\n> - **first**: The URL to the **first page**.\r\n> - **last**: The URL to the **last page**.\r\n> - **prev**: The URL to the **previous page** (if it exists).\r\n> - **next**: The URL to the **next page**.\r\n\r\n### üìù Sparse Fields\r\n\r\n**Sparse Fields** allow you to request only specific fields in the API response, reducing the amount of data transferred and focusing on the fields that are important for your use case. This is achieved by using the `fields` query parameter, which follows the **JSON:API** specification.\r\n\r\nYou can specify which fields to include for each resource by adding the resource name in the `fields` parameter, followed by a comma-separated list of fields you want to retrieve.\r\n\r\n**Sparse Fields Format**:\r\n\r\n```http\r\nGET /api/{resource}?fields={field1},{field2}\r\n```\r\n\r\n**Example**:\r\n\r\n```http\r\nGET /api/companies?fields=name,status\r\n```\r\n> **This request** will retrieve only the `name` and `status` fields for each company, instead of returning all fields for the `companies` resource.\r\n> The `fields` parameter is used to limit the data to the specified fields, which helps optimize performance by reducing the payload size.\r\n> **Note**: The `id` of the resource will always be included in the response, whether it is explicitly selected or not.\r\n\r\n### üîé Search\r\n\r\nThe API supports **search functionality** that allows you to filter results based on specific search terms. The `search` query parameter can be used to match partial strings in both the primary fields of a resource and its related models.\r\n\r\n#### How it works:\r\n\r\n1. The `search` parameter is passed in the query string.\r\n2. The API will look for matches in the fields defined for the resource.\r\n3. Additionally, it can search through related models (relationships) and apply the search term to specified fields within those relations.\r\n\r\n#### Search format:\r\n\r\n```http\r\nGET /api/{resource}?search={searchTerm}\r\n```\r\n**Example**:\r\n\r\n```http\r\nGET /api/companies?search=Acme\r\n```\r\n> **This request** will search for the term **\"Acme\"** in the primary fields of the `companies` resource, such as `name` or `status`,\r\n> as well as in any related models, like `contacts` or `projects`, if those relationships are specified for searching.\r\n> The search term will match any field within the defined attributes of the main resource or the specified fields in related models.\r\n\r\n### üõ†Ô∏è Combining Filters, Sorting, Pagination, Sparse Fields, and Search\r\n\r\nThe API allows you to combine multiple functionalities such as **filters**, **sorting**, **pagination**, **sparse fields**, and **search** into a single request. This enables highly customized queries to retrieve only the data you need, in the order and format you prefer.\r\n\r\n#### Combined query format:\r\n\r\n```http\r\nGET /api/{resource}?filter[{attribute}]={value}&sort={attribute}&page[number]={pageNumber}&page[size]={pageSize}&fields={field1},{field2}&search={searchTerm}\r\n```\r\n\r\n**Example**:\r\n\r\n```http\r\nGET /api/companies?filter[name]=Acme&sort=-created_at&page[number]=2&page[size]=10&fields=name,status,created_at&search=Tech\r\n```\r\n> **This request** will retrieve all companies where the `name` attribute is equal to **\"Acme\"**, sorted by the `created_at` attribute in **descending** order,\r\n> with a **page size** of **10** and **page number** of **2**. It will only return the `name` and `status` fields for each company, and will search for the term **\"Tech\"** in the primary fields and `contacts` and `projects` related models.\r\n> The combined query parameters allow for a highly customized and efficient way to retrieve the data you need.\r\n\r\n"
  },
  "servers": [
    {
      "url": "https://local.workupcloud.com/api"
    }
  ],
  "security": [
    {
      "http": []
    }
  ],
  "paths": {
    "/admin/proposals/{proposal}/files": {
      "post": {
        "operationId": "admin.proposals.files.store",
        "description": "Description: Creates a new association between one or more additional files and the specified proposal. If the proposal has services, a PDF generation process is triggered.\n\nInput parameters:\r\n- `additional_file_id` (array, required): Array of additional file IDs to be linked to the proposal.\n\nSuccessful response (201):\r\n- Returns a collection of the newly created links between the files and the proposal.\r\n- Triggers the generation of a proposal PDF if services are present.\n\nPossible errors:\r\n- 422 Unprocessable Entity: If validation fails or an issue occurs during the creation process.‚ö†Ô∏èCannot generate request documentation: Call to a member function files() on null",
        "summary": "Store a new link between an additional file and a proposal",
        "tags": [
          "AdditionalFileProposal"
        ],
        "parameters": [
          {
            "name": "proposal",
            "in": "path",
            "required": true,
            "description": "The proposal ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JsonApiSaveResource"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.proposals.files.destroy",
        "description": "Description: Deletes the link between one or more additional files and the specified proposal. If the proposal has services, the proposal PDF is regenerated.\n\nInput parameters:\r\n- `additional_file_proposal_id` (array, required): Array of IDs representing the relationships between the additional files and the proposal to be removed.\n\nSuccessful response (204):\r\n- Returns no content, indicating that the relationships were successfully removed.\r\n- Triggers the generation of a new proposal PDF if the proposal has services.\n\nPossible errors:\r\n- 422 Unprocessable Entity: If there is an issue processing the request or deleting the relationships.‚ö†Ô∏èCannot generate request documentation: Attempt to read property \"id\" on null",
        "summary": "Remove the relationship between an additional file and a proposal",
        "tags": [
          "AdditionalFileProposal"
        ],
        "parameters": [
          {
            "name": "proposal",
            "in": "path",
            "required": true,
            "description": "The proposal ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/additional/addresses": {
      "post": {
        "operationId": "admin.additional.addresses.store",
        "description": "Description: Stores a new address in the system.\n\nInput parameters: Address information (street, city, postal code, etc.).\n\nSuccessful response (200): Returns the created address with its assigned ID.\n\nPossible errors: Validation failures, data duplication.",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "Address"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Address successfully created!"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/additional/addresses/{additionalAddress}/show": {
      "get": {
        "operationId": "admin.additional.addresses.show",
        "description": "Description: Displays the details of a specific address.\n\nInput parameters: ID of the address to query.\n\nSuccessful response (200): Returns the details of the requested address.\n\nPossible errors: Address not found, invalid ID.",
        "summary": "Returns a JSON object of the specified resource to display",
        "tags": [
          "Address"
        ],
        "parameters": [
          {
            "name": "additionalAddress",
            "in": "path",
            "required": true,
            "description": "The additional address ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "$ref": "#/components/schemas/AddressResource"
                        }
                      },
                      "required": [
                        "address"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/additional/addresses/{additionalAddress}/edit": {
      "get": {
        "operationId": "admin.additional.addresses.edit",
        "description": "Description: Retrieves the data of an address for editing.\n\nInput parameters: ID of the address to edit.\n\nSuccessful response (200): Returns the current data of the address.\n\nPossible errors: Address not found, invalid ID.",
        "summary": "Show the form for editing the specified resource",
        "tags": [
          "Address"
        ],
        "parameters": [
          {
            "name": "additionalAddress",
            "in": "path",
            "required": true,
            "description": "The additional address ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "$ref": "#/components/schemas/AddressResource"
                        }
                      },
                      "required": [
                        "address"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/additional/addresses/{additionalAddress}": {
      "patch": {
        "operationId": "admin.additional.addresses.update",
        "description": "Description: Updates an existing address in the system.\n\nInput parameters: ID of the address and new data to update.\n\nSuccessful response (200): Returns the updated address.\n\nPossible errors: Validation failures, address not found.",
        "summary": "Update the specified resource in storage",
        "tags": [
          "Address"
        ],
        "parameters": [
          {
            "name": "additionalAddress",
            "in": "path",
            "required": true,
            "description": "The additional address ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AddressResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.additional.addresses.destroy",
        "description": "Description: Deletes an address from the system.\n\nInput parameters: ID of the address to delete.\n\nSuccessful response (200): Confirms the deletion of the address.\n\nPossible errors: Address not found, invalid ID.",
        "summary": "Soft delete the specified resource from storage",
        "tags": [
          "Address"
        ],
        "parameters": [
          {
            "name": "additionalAddress",
            "in": "path",
            "required": true,
            "description": "The additional address ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AddressResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "example": "Address cannot be deleted because it is the billing address of this resource."
                        }
                      },
                      "required": [
                        "error"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "example": "Address cannot be deleted because it is the main address of this resource."
                        }
                      },
                      "required": [
                        "error"
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/landlord/admin/auth/two-factor/challenge": {
      "post": {
        "operationId": "landlord.admin.auth.two_factor.challenge",
        "description": "This endpoint is used when the user have to store the session with 2fa",
        "summary": "Store login",
        "tags": [
          "Auth Challenge",
          "Challenge"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "token": {
                              "type": "string"
                            },
                            "user": {
                              "$ref": "#/components/schemas/UserResource"
                            }
                          },
                          "required": [
                            "token",
                            "user"
                          ]
                        }
                      },
                      "required": [
                        "data"
                      ]
                    },
                    {
                      "type": "string"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "": {
                      "type": "string"
                    },
                    "line": {
                      "type": "string"
                    },
                    "file": {
                      "type": "string"
                    }
                  },
                  "required": [
                    null,
                    null,
                    "line",
                    "file"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/landlord/admin/auth/password/forgot": {
      "post": {
        "operationId": "landlord.admin.auth.password.forgot",
        "summary": "Send a reset link to the given user",
        "tags": [
          "Auth Forgot",
          "Forgot"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/landlord/admin/auth/login": {
      "post": {
        "operationId": "landlord.admin.auth.login",
        "description": "Description: Used to store a session with an account info.",
        "summary": "Store login",
        "tags": [
          "Auth Login",
          "Login"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "login_id": {
                          "type": "string"
                        },
                        "token": {
                          "type": "string"
                        },
                        "user": {
                          "anyOf": [
                            {
                              "$ref": "#/components/schemas/UserResource"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "two_factor": {
                          "type": "string"
                        },
                        "device_name": {
                          "type": "string"
                        },
                        "permissions": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "required": [
                        "login_id",
                        "token",
                        "user",
                        "two_factor",
                        "device_name",
                        "permissions"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/landlord/admin/auth/logout": {
      "post": {
        "operationId": "landlord.admin.auth.logout",
        "description": "Description: Used to close a session in an especific account.",
        "summary": "Destroy an authenticated session",
        "tags": [
          "Auth Logout",
          "Logout"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "prefixItems": [
                    {
                      "type": "string",
                      "example": "message"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "minItems": 2,
                  "maxItems": 2,
                  "additionalItems": false
                }
              }
            }
          }
        }
      }
    },
    "/landlord/admin/auth/social-login/{socialNetwork}": {
      "get": {
        "operationId": "landlord.admin.auth.social_login",
        "tags": [
          "Auth SocialLogin",
          "SocialLogin"
        ],
        "parameters": [
          {
            "name": "socialNetwork",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/landlord/admin/auth/social-login/{socialNetwork}/callback": {
      "get": {
        "operationId": "landlord.admin.auth.social_login.callback",
        "tags": [
          "Auth SocialLogin",
          "SocialLogin"
        ],
        "parameters": [
          {
            "name": "socialNetwork",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/landlord/admin/auth/social-login/verify-token": {
      "post": {
        "operationId": "landlord.admin.auth.social_login.verify-token",
        "tags": [
          "Auth SocialLogin",
          "SocialLogin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "El token no es v√°lido",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "example": "Invalid token"
                        }
                      },
                      "required": [
                        "error"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "login_id": {
                              "type": "string"
                            },
                            "token": {
                              "type": "string"
                            },
                            "user": {
                              "anyOf": [
                                {
                                  "$ref": "#/components/schemas/UserResource"
                                },
                                {
                                  "type": "null"
                                }
                              ]
                            },
                            "two_factor": {
                              "type": "string"
                            },
                            "device_name": {
                              "type": "string"
                            },
                            "permissions": {
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          },
                          "required": [
                            "login_id",
                            "token",
                            "user",
                            "two_factor",
                            "device_name",
                            "permissions"
                          ]
                        }
                      },
                      "required": [
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "user not found"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/broadcasting/auth": {
      "get": {
        "operationId": "broadcast.authenticate",
        "summary": "Authenticate the request for channel access",
        "tags": [
          "Broadcast"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/crm/companies": {
      "post": {
        "operationId": "admin.crm.companies.store",
        "description": "### Description\r\nThis method stores a new company in the CRM system.\n\n### Input Parameters\r\nThe method receives a `CompanyRequest` which contains the validated information of the company. The main fields are:\r\n- `name` (string): Company name.\r\n- `display_name` (string): Display name of the company.\r\n- `primary_email` (string): Primary email address of the company.\r\n- Other possible fields such as owner information (`owners`).\n\n### Method Logic\n\n1. **Validation and creation**:\r\n- The request is validated, and the company is created using the provided data.\n\n2. **Owner association** (Optional):\r\n- If the request includes owner information (`owners`), the owners are associated with the newly created company.\n\n3. **Successful response**:\r\n- Returns a JSON response with status code `201 Created`, including the ID of the newly created company in the `Location` header.\n\n4. **Exception handling**:\r\n- If an error occurs during creation, an error message is returned along with status code `422 Unprocessable Entity`.\n\n### Successful Response (201)\r\n- **HTTP Code**: 201 (Created)\r\n- **Content**:\r\n```json\r\n{\r\n\"id\": 123,\r\n\"name\": \"Company Name\",\r\n\"display_name\": \"Display Name\",\r\n\"primary_email\": \"email@company.com\",\r\n...\r\n}",
        "summary": "## Create a new company",
        "tags": [
          "CRM Company",
          "Company"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiSaveResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/crm/companies/all": {
      "get": {
        "operationId": "admin.crm.companies.all",
        "description": "### Description\r\nThis method retrieves a list of all companies from the database, applying any necessary filters, sorting, and field selection. It returns the data in a structured JSON format.\n\n### Input Parameters\r\n- **None**: The method does not require any specific input parameters from the request body, but it applies filters, sorting, and field selection internally to the query.\n\n### Method Logic\n\n1. **Query Initialization**:\r\n- A query is initiated to fetch all companies from the `Company` model using the `owner()` scope to limit results based on ownership or permissions.\n\n2. **Field Selection**:\r\n- The `applyFields()` method is called to customize the fields that should be selected from the `Company` model.\n\n3. **Filtering**:\r\n- The `applyFilters()` method is called to apply any necessary filters to the query, such as filtering companies based on attributes like name or type.\n\n4. **Sorting**:\r\n- The `applySorting()` method is used to apply sorting criteria to the query, such as sorting by company name or creation date.\n\n5. **Get Results**:\r\n- The query is executed to retrieve the list of companies from the database.\n\n6. **Return Response**:\r\n- The companies are wrapped in an `AllCompanyResource` collection and returned as a JSON response with a status code of `200 OK`.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON object containing an array of company data.\r\n```json\r\n{\r\n\"data\": [\r\n{\r\n\"id\": 123,\r\n\"name\": \"Company 1\",\r\n\"display_name\": \"Company One\",\r\n\"primary_email\": \"contact@companyone.com\"\r\n},\r\n{\r\n\"id\": 124,\r\n\"name\": \"Company 2\",\r\n\"display_name\": \"Company Two\",\r\n\"primary_email\": \"contact@companytwo.com\"\r\n}\r\n...\r\n]\r\n}",
        "summary": "## Get All Companies",
        "tags": [
          "CRM Company",
          "Company"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllCompanyResource"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/crm/companies/{company}": {
      "get": {
        "operationId": "admin.crm.companies.show",
        "description": "### Description\r\nThis method retrieves and displays the details of a specific company resource, along with its related data such as type, category, owners, addresses, and other associated resources.\n\n### Input Parameters\r\n- **company** (Company): The `Company` model instance that represents the company whose details are being retrieved.\n\n### Method Logic\n\n1. **Loading Related Data**:\r\n- The method uses the `load()` function to eagerly load a variety of relationships for the company, such as:\r\n- **Type**: The type of company (with `id`, `name`, and `model_type`).\r\n- **Category**: The category the company belongs to.\r\n- **Profile Image**: Profile image of the company.\r\n- **Owners**: The owners of the company, along with their details (e.g., name, email, profile image, roles).\r\n- **Main Address and Billing Address**: Address details such as name, address line, latitude, longitude, and associated country, state, city, and type.\n\n2. **Counting Related Records**:\r\n- The method loads counts of several related entities (e.g., `contacts`, `projects`, `files`, `emails`, etc.) to provide a summary of related resources.\n\n3. **Vendor-specific Data**:\r\n- If the company is of type `Vendor`, the method loads the count of `linkedServices` related to the company.\n\n4. **Return Response**:\r\n- A `CompanyResource` is returned as a JSON response with the status code `200 OK`, indicating successful retrieval of the company details.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON object with the full details of the company, including all loaded relationships and counts.\r\n```json\r\n{\r\n\"id\": 123,\r\n\"name\": \"Company Name\",\r\n\"display_name\": \"Display Name\",\r\n\"primary_email\": \"email@company.com\",\r\n\"type\": {\r\n\"id\": 1,\r\n\"name\": \"Vendor\",\r\n\"model_type\": \"Company\"\r\n},\r\n\"category\": {\r\n\"id\": 2,\r\n\"name\": \"Technology\"\r\n},\r\n\"owners\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"John Doe\",\r\n\"email\": \"john@example.com\",\r\n\"primary_phone\": \"123-456-7890\",\r\n\"profile_image\": \"path_to_image.jpg\",\r\n\"roles\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"Admin\"\r\n}\r\n]\r\n}\r\n],\r\n\"addresses\": {\r\n\"main_address\": {\r\n\"id\": 1,\r\n\"name\": \"Main Office\",\r\n\"address_line_1\": \"123 Main St\",\r\n\"latitude\": \"40.712776\",\r\n\"longitude\": \"-74.005974\",\r\n\"zip_code\": \"10001\",\r\n\"primary_email\": \"main@example.com\",\r\n\"primary_phone\": \"123-456-7890\",\r\n\"country\": {\r\n\"id\": 1,\r\n\"name\": \"United States\"\r\n},\r\n\"state\": {\r\n\"id\": 1,\r\n\"name\": \"New York\"\r\n},\r\n\"city\": {\r\n\"id\": 1,\r\n\"name\": \"New York City\"\r\n},\r\n\"type\": {\r\n\"id\": 1,\r\n\"name\": \"Office\"\r\n}\r\n}\r\n},\r\n\"contacts_count\": 10,\r\n\"projects_count\": 5,\r\n\"linked_services_count\": 2,\r\n...\r\n}",
        "summary": "## Show company",
        "tags": [
          "CRM Company",
          "Company"
        ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "required": true,
            "description": "The company ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "patch": {
        "operationId": "admin.crm.companies.update",
        "description": "### Description\r\nThis method updates the information of an existing company in the system. It handles the validation of incoming data and checks specific business rules, such as preventing the update of the company's type if it has linked services.\n\n### Input Parameters\n\n- **CompanyRequest**: A validated request object containing the updated information for the company.\r\n- **Company**: The `Company` model instance representing the company to be updated.\n\n### Method Logic\n\n1. **Type Change Restriction**:\r\n- Before updating the company, the method checks if the company's `type_id` is being changed.\r\n- If the company has linked services, the update to the `type_id` is forbidden, and a `409 Conflict` response is returned with an error message.\n\n2. **Transaction for Update**:\r\n- The company update is performed inside a database transaction:\r\n- **Update Company**: The company's data is updated using the validated input from the request.\r\n- **Manage Owners**: Any existing owners associated with the company are deleted, and if new owner data is provided, new owners are created and linked to the company.\n\n3. **Commit Transaction**:\r\n- If the update succeeds, the transaction is committed and a `200 OK` response is returned with the updated company details.\n\n4. **Error Handling**:\r\n- If any error occurs during the update, the transaction is rolled back, and a `422 Unprocessable Entity` error is returned with the exception message.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON object representing the updated company details.\r\n```json\r\n{\r\n\"id\": 123,\r\n\"name\": \"Updated Company Name\",\r\n\"display_name\": \"Updated Display Name\",\r\n\"primary_email\": \"updated_email@company.com\",\r\n\"type\": {\r\n\"id\": 1,\r\n\"name\": \"Vendor\"\r\n},\r\n\"category\": {\r\n\"id\": 2,\r\n\"name\": \"Technology\"\r\n}\r\n}",
        "summary": "## Update company",
        "tags": [
          "CRM Company",
          "Company"
        ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "required": true,
            "description": "The company ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "prefixItems": [
                        {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            },
                            "title": {
                              "type": "string",
                              "example": "Conflict"
                            },
                            "detail": {
                              "type": "string",
                              "example": "This company cannot update the type because it has linked services."
                            },
                            "source": {
                              "type": "object",
                              "properties": {
                                "pointer": {
                                  "type": "string",
                                  "example": "/type_id"
                                }
                              },
                              "required": [
                                "pointer"
                              ]
                            }
                          },
                          "required": [
                            "status",
                            "title",
                            "detail",
                            "source"
                          ]
                        }
                      ],
                      "minItems": 1,
                      "maxItems": 1,
                      "additionalItems": false
                    }
                  },
                  "required": [
                    "errors"
                  ]
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.crm.companies.destroy",
        "description": "### Description\r\nThis method performs a soft delete (temporary removal) of a specified company resource from storage. The company is not permanently deleted, allowing for potential recovery.\n\n### Input Parameters\r\n- **company** (Company): The `Company` model instance representing the company to be deleted.\n\n### Method Logic\n\n1. **Transaction for Soft Delete**:\r\n- The deletion process is wrapped in a database transaction to ensure data integrity:\r\n- **Soft Delete**: The company is marked as deleted without permanently removing it from the database.\n\n2. **Commit Transaction**:\r\n- If the deletion is successful, the transaction is committed, and a `204 No Content` response is returned.\n\n3. **Error Handling**:\r\n- If an error occurs during the deletion process, the transaction is rolled back and a `422 Unprocessable Entity` response is returned with the exception message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating the company was successfully deleted.\r\n```http     * /1.1 204 No Content",
        "summary": "## Destroy company",
        "tags": [
          "CRM Company",
          "Company"
        ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "required": true,
            "description": "The company ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/crm/companies/{company}/edit": {
      "get": {
        "operationId": "admin.crm.companies.edit",
        "description": "### Description\r\nThis method retrieves the necessary information to display in the company edit view. It loads a variety of related data for the company, such as type, category, owners, addresses, and more.\n\n### Input Parameters\r\n- **company** (Company): The `Company` model instance representing the company to be edited.\n\n### Method Logic\n\n1. **Loading Related Data**:\r\n- The method uses the `load()` function to eagerly load the following relationships for the company:\r\n- **Type**: Company type with `id` and `name`.\r\n- **Category**: The category to which the company belongs.\r\n- **Profile Image**: The company's profile image.\r\n- **Owners**: Information about the company's owners, including:\r\n- Owner details (e.g., name, email, phone).\r\n- Owner profile images.\r\n- Owner roles (e.g., Admin, Manager).\r\n- **Main Address**: Information such as address line, latitude, longitude, country, state, city, and type.\r\n- **Billing Address**: Similar to the main address, but specifically for billing purposes.\n\n2. **Return Response**:\r\n- A `CompanyResource` object is returned as a JSON response with a `200 OK` status, ready to be used in the company's edit view.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON object containing the company's details and the loaded relationships.\r\n```json\r\n{\r\n\"id\": 123,\r\n\"name\": \"Company Name\",\r\n\"type\": {\r\n\"id\": 1,\r\n\"name\": \"Vendor\"\r\n},\r\n\"category\": {\r\n\"id\": 2,\r\n\"name\": \"Technology\"\r\n},\r\n\"profile_image\": \"path_to_image.jpg\",\r\n\"owners\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"John Doe\",\r\n\"email\": \"john@example.com\",\r\n\"primary_phone\": \"123-456-7890\",\r\n\"profile_image\": \"path_to_image.jpg\",\r\n\"roles\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"Admin\"\r\n}\r\n]\r\n}\r\n],\r\n\"main_address\": {\r\n\"id\": 1,\r\n\"name\": \"Main Office\",\r\n\"address_line_1\": \"123 Main St\",\r\n\"latitude\": \"40.712776\",\r\n\"longitude\": \"-74.005974\",\r\n\"zip_code\": \"10001\",\r\n\"primary_email\": \"main@example.com\",\r\n\"primary_phone\": \"123-456-7890\",\r\n\"country\": {\r\n\"id\": 1,\r\n\"name\": \"United States\"\r\n},\r\n\"state\": {\r\n\"id\": 1,\r\n\"name\": \"New York\"\r\n},\r\n\"city\": {\r\n\"id\": 1,\r\n\"name\": \"New York City\"\r\n},\r\n\"type\": {\r\n\"id\": 1,\r\n\"name\": \"Office\"\r\n}\r\n},\r\n\"billing_address\": {\r\n\"id\": 2,\r\n\"name\": \"Billing Office\",\r\n\"address_line_1\": \"456 Billing St\",\r\n\"latitude\": \"40.712776\",\r\n\"longitude\": \"-74.005974\",\r\n\"zip_code\": \"10002\",\r\n\"primary_email\": \"billing@example.com\",\r\n\"primary_phone\": \"123-456-7899\",\r\n\"country\": {\r\n\"id\": 1,\r\n\"name\": \"United States\"\r\n},\r\n\"state\": {\r\n\"id\": 1,\r\n\"name\": \"New York\"\r\n},\r\n\"city\": {\r\n\"id\": 1,\r\n\"name\": \"New York City\"\r\n},\r\n\"type\": {\r\n\"id\": 1,\r\n\"name\": \"Billing\"\r\n}\r\n}\r\n}",
        "summary": "## Edit company",
        "tags": [
          "CRM Company",
          "Company"
        ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "required": true,
            "description": "The company ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/crm/companies/{modelId}/restore": {
      "patch": {
        "operationId": "admin.crm.companies.restore",
        "description": "### Description\r\nThis method restores a previously soft-deleted resource from the database. The resource is retrieved from the \"trashed\" or soft-deleted records and restored to its active state.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource that was soft-deleted and is to be restored.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Restore Resource**:\r\n- If the resource is found, the `restore()` method is called to undo the soft-delete and reactivate the resource.\n\n3. **Return Response**:\r\n- Upon successful restoration, the method returns a `204 No Content` response, indicating that the resource was restored successfully.\n\n4. **Error Handling**:\r\n- If an error occurs (such as the resource not being found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating that the resource was successfully restored.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: restore",
        "tags": [
          "CRM Company",
          "Company"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/crm/companies/{modelId}/force-delete": {
      "delete": {
        "operationId": "admin.crm.companies.force_delete",
        "description": "### Description\r\nThis method permanently deletes a soft-deleted resource from the database. Once a resource is force-deleted, it cannot be recovered.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource to be permanently deleted from storage.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Force Delete Resource**:\r\n- If the resource is found, the `forceDelete()` method is called to permanently remove it from the database.\n\n3. **Return Response**:\r\n- If the deletion is successful, the method returns a `204 No Content` response, indicating that the resource has been permanently deleted.\n\n4. **Error Handling**:\r\n- If an error occurs during the deletion process (e.g., the resource is not found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating the resource was successfully and permanently deleted.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: forceDelete",
        "tags": [
          "CRM Company",
          "Company"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/crm/companies/data-table": {
      "get": {
        "operationId": "admin.crm.companies.data_table",
        "tags": [
          "CRM Company DataTable",
          "DataTable"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/crm/contacts/by-company/{companyId}": {
      "get": {
        "operationId": "admin.crm.contacts.by_company",
        "description": "### Description\r\nThis method retrieves a list of contacts that belong to a specific company, based on the provided `companyId`. It applies optional filters, sorting, and field selection to customize the results.\n\n### Input Parameters\r\n- **companyId** (integer): The unique identifier of the company whose contacts are being queried.\n\n### Method Logic\n\n1. **Query Initialization**:\r\n- The method initializes a query to fetch contacts from the `Contact` model where the `company_id` matches the provided `companyId`.\n\n2. **Field Selection**:\r\n- The `applyFields()` method is used to select specific fields from the `Contact` model to be included in the results.\n\n3. **Filtering**:\r\n- The `applyFilters()` method is called to apply additional filters to the query, such as filtering contacts by specific attributes (e.g., status, role, etc.).\n\n4. **Sorting**:\r\n- The `applySorting()` method is used to apply sorting criteria to the query, such as ordering by contact name, creation date, or other fields.\n\n5. **Get Results**:\r\n- The query is executed to retrieve the list of contacts associated with the specified company.\n\n6. **Return Response**:\r\n- The contacts are wrapped in a `ContactByCompanyResource` collection and returned as a JSON response with a status code of `200 OK`.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON array containing the contacts that belong to the specified company.\r\n```json\r\n{\r\n\"data\": [\r\n{\r\n\"id\": 123,\r\n\"name\": \"John Doe\",\r\n\"email\": \"john.doe@company.com\",\r\n\"phone\": \"123-456-7890\",\r\n\"company_id\": 1\r\n},\r\n{\r\n\"id\": 124,\r\n\"name\": \"Jane Smith\",\r\n\"email\": \"jane.smith@company.com\",\r\n\"phone\": \"987-654-3210\",\r\n\"company_id\": 1\r\n}\r\n]\r\n}",
        "summary": "## Get Contact By Company",
        "tags": [
          "CRM Contact",
          "Contact"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactByCompanyResource"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/crm/contacts": {
      "post": {
        "operationId": "admin.crm.contacts.store",
        "description": "### Description\r\nThis method stores a new contact in the CRM system. It validates the provided contact information and, if successful, saves it in the database.\n\n### Input Parameters\r\nThe method expects a request containing the following contact information:\r\n- **name** (string): The contact's full name.\r\n- **email** (string): The contact's email address.\r\n- **phone** (string): The contact's phone number.\r\n- **address** (string, optional): The contact's physical address.\r\n- **other fields**: Any additional fields as required by the business logic or model.\n\n### Method Logic\n\n1. **Transaction for Contact Creation**:\r\n- The contact creation process is wrapped inside a database transaction to ensure data integrity.\n\n2. **Validate and Create**:\r\n- The contact data is validated using the `ContactRequest`. If validation passes, the contact is created and saved to the database.\n\n3. **Commit Transaction**:\r\n- If the contact is created successfully, the transaction is committed, and the method returns a JSON response with the status code `201 Created`.\n\n4. **Error Handling**:\r\n- If an error occurs during the process (such as a validation failure or database error), the transaction is rolled back, and an error response is returned with the status code `422 Unprocessable Entity`.\n\n### Successful Response (201)\r\n- **HTTP Code**: 201 (Created)\r\n- **Content**: A JSON object containing the details of the newly created contact, including its unique identifier.\r\n```json\r\n{\r\n\"id\": 123,\r\n\"name\": \"John Doe\",\r\n\"email\": \"john.doe@example.com\",\r\n\"phone\": \"123-456-7890\",\r\n\"address\": \"123 Main St, Anytown, USA\"\r\n}",
        "summary": "## Create new contact",
        "tags": [
          "CRM Contact",
          "Contact"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiSaveResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/crm/contacts/{contact}": {
      "get": {
        "operationId": "admin.crm.contacts.show",
        "description": "### Description\r\nThis method retrieves and displays the full details of a specific contact, including related data such as the contact's type, associated company, and any linked resources (e.g., projects, addresses, files, etc.).\n\n### Input Parameters\r\n- **contact** (Contact): The `Contact` model instance representing the contact whose details are being requested.\n\n### Method Logic\n\n1. **Loading Related Data**:\r\n- The method uses `load()` to eagerly load related data for the contact, including:\r\n- **Type**: The type of contact (with `id`, `name`, and `model_type`).\r\n- **Company**: The company associated with the contact (with `id` and `name`).\r\n- **Profile Image**: The profile image of the contact.\r\n- **Company Owners**: The owners of the company, including their contact details (name, email, phone) and roles.\r\n- **Owner Profile Images**: Profile images of the company owners.\n\n2. **Count Related Records**:\r\n- The method also uses `loadCount()` to count related resources such as:\r\n- **Linked Projects**: Projects related to the contact.\r\n- **Linked Addresses**: Addresses associated with the contact.\r\n- **Files**: Files related to the contact.\r\n- **Emails**: Emails sent or received by the contact.\r\n- **Phone Numbers**: The contact's phone numbers.\r\n- **Notes**: Notes related to the contact.\r\n- **Sent Emails**: Emails sent from the contact.\n\n3. **Return Response**:\r\n- A `ContactResource` object is returned as a JSON response with the status code `200 OK`, indicating successful retrieval of the contact details.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON object containing the complete details of the contact, including related data such as company information, projects, addresses, and files.\r\n```json\r\n{\r\n\"id\": 123,\r\n\"name\": \"John Doe\",\r\n\"email\": \"john.doe@example.com\",\r\n\"phone\": \"123-456-7890\",\r\n\"type\": {\r\n\"id\": 1,\r\n\"name\": \"Customer\",\r\n\"model_type\": \"Contact\"\r\n},\r\n\"company\": {\r\n\"id\": 10,\r\n\"name\": \"Tech Solutions\",\r\n\"owners\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"Jane Smith\",\r\n\"email\": \"jane.smith@techsolutions.com\",\r\n\"primary_phone\": \"987-654-3210\",\r\n\"roles\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"Admin\"\r\n}\r\n],\r\n\"profile_image\": \"path/to/jane_smith.jpg\"\r\n}\r\n]\r\n},\r\n\"profile_image\": \"path/to/john_doe.jpg\",\r\n\"linked_projects_count\": 5,\r\n\"linked_addresses_count\": 2,\r\n\"files_count\": 3,\r\n\"emails_count\": 10,\r\n\"phone_numbers_count\": 1,\r\n\"notes_count\": 4,\r\n\"sent_emails_count\": 7\r\n}",
        "summary": "## Show contact",
        "tags": [
          "CRM Contact",
          "Contact"
        ],
        "parameters": [
          {
            "name": "contact",
            "in": "path",
            "required": true,
            "description": "The contact ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "patch": {
        "operationId": "admin.crm.contacts.update",
        "description": "### Description\r\nThis method updates the information of an existing contact in the system. It validates the incoming request data, updates the contact, and returns the updated resource upon success.\n\n### Input Parameters\r\n- **ContactRequest**: A validated request object containing the updated data for the contact. This includes fields such as:\r\n- **name** (string): The contact's updated full name.\r\n- **email** (string): The contact's updated email address.\r\n- **phone** (string): The contact's updated phone number.\r\n- **other fields**: Additional fields depending on the application's business logic.\n\n- **contact** (Contact): The `Contact` model instance representing the contact to be updated.\n\n### Method Logic\n\n1. **Begin Transaction**:\r\n- The contact update process is wrapped inside a database transaction to ensure data integrity.\n\n2. **Update Contact**:\r\n- The contact's information is updated using the validated data from the `ContactRequest`.\n\n3. **Commit Transaction**:\r\n- If the update is successful, the transaction is committed and the method returns a `200 OK` response along with the updated contact data.\n\n4. **Error Handling**:\r\n- If any error occurs during the update process, the transaction is rolled back and a `422 Unprocessable Entity` error is returned with the exception message.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON object containing the details of the updated contact.\r\n```json\r\n{\r\n\"id\": 123,\r\n\"name\": \"Updated Contact Name\",\r\n\"email\": \"updated.email@example.com\",\r\n\"phone\": \"987-654-3210\"\r\n}",
        "summary": "## Update contact",
        "tags": [
          "CRM Contact",
          "Contact"
        ],
        "parameters": [
          {
            "name": "contact",
            "in": "path",
            "required": true,
            "description": "The contact ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.crm.contacts.destroy",
        "description": "### Description\r\nThis method performs a soft delete (temporary removal) of a specified contact resource from storage. The contact is not permanently deleted but is instead flagged as \"deleted\" and can be restored later if needed.\n\n### Input Parameters\r\n- **contact** (Contact): The `Contact` model instance representing the contact to be soft-deleted.\n\n### Method Logic\n\n1. **Transaction for Soft Delete**:\r\n- The contact deletion process is wrapped inside a database transaction to ensure data integrity.\n\n2. **Soft Delete**:\r\n- The `delete()` method is called on the `Contact` model, which performs a soft delete, marking the contact as deleted without permanently removing it from the database.\n\n3. **Commit Transaction**:\r\n- If the deletion is successful, the transaction is committed, and the method returns a `204 No Content` response, indicating that the contact has been successfully and temporarily removed.\n\n4. **Error Handling**:\r\n- If any error occurs during the deletion process, the transaction is rolled back and a `422 Unprocessable Entity` error is returned with a message explaining the failure.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating that the contact was successfully deleted.\r\n```http     * /1.1 204 No Content",
        "summary": "## Destroy contact",
        "tags": [
          "CRM Contact",
          "Contact"
        ],
        "parameters": [
          {
            "name": "contact",
            "in": "path",
            "required": true,
            "description": "The contact ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/crm/contacts/{contact}/edit": {
      "get": {
        "operationId": "admin.crm.contacts.edit",
        "description": "### Description\r\nThis method retrieves the necessary information to display in the edit view for a specific contact. It loads the contact's associated data, such as the company details, profile image, and company owners.\n\n### Input Parameters\r\n- **contact** (Contact): The `Contact` model instance representing the contact to be edited.\n\n### Method Logic\n\n1. **Loading Related Data**:\r\n- The method uses `load()` to eagerly load the following relationships for the contact:\r\n- **Company**: The company associated with the contact (with `id` and `name`).\r\n- **Profile Image**: The profile image of the contact.\r\n- **Company Owners**: The owners of the associated company, including:\r\n- Owner details (name, email, phone).\r\n- Owner roles (e.g., Admin, Manager).\r\n- Owner profile images.\n\n2. **Return Response**:\r\n- The method returns a `ContactResource` object as a JSON response, ready for the edit view, with the status code `200 OK` indicating successful data retrieval.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON object containing the details of the contact, including the associated company, owners, and profile image, ready for editing.\r\n```json\r\n{\r\n\"id\": 123,\r\n\"name\": \"John Doe\",\r\n\"email\": \"john.doe@example.com\",\r\n\"phone\": \"123-456-7890\",\r\n\"company\": {\r\n\"id\": 10,\r\n\"name\": \"Tech Solutions\",\r\n\"owners\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"Jane Smith\",\r\n\"email\": \"jane.smith@techsolutions.com\",\r\n\"primary_phone\": \"987-654-3210\",\r\n\"roles\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"Admin\"\r\n}\r\n],\r\n\"profile_image\": \"path/to/jane_smith.jpg\"\r\n}\r\n]\r\n},\r\n\"profile_image\": \"path/to/john_doe.jpg\"\r\n}",
        "summary": "## Edit contact",
        "tags": [
          "CRM Contact",
          "Contact"
        ],
        "parameters": [
          {
            "name": "contact",
            "in": "path",
            "required": true,
            "description": "The contact ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/crm/contacts/{modelId}/restore": {
      "patch": {
        "operationId": "admin.crm.contacts.restore",
        "description": "### Description\r\nThis method restores a previously soft-deleted resource from the database. The resource is retrieved from the \"trashed\" or soft-deleted records and restored to its active state.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource that was soft-deleted and is to be restored.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Restore Resource**:\r\n- If the resource is found, the `restore()` method is called to undo the soft-delete and reactivate the resource.\n\n3. **Return Response**:\r\n- Upon successful restoration, the method returns a `204 No Content` response, indicating that the resource was restored successfully.\n\n4. **Error Handling**:\r\n- If an error occurs (such as the resource not being found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating that the resource was successfully restored.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: restore",
        "tags": [
          "CRM Contact",
          "Contact"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/crm/contacts/{modelId}/force-delete": {
      "delete": {
        "operationId": "admin.crm.contacts.force_delete",
        "description": "### Description\r\nThis method permanently deletes a soft-deleted resource from the database. Once a resource is force-deleted, it cannot be recovered.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource to be permanently deleted from storage.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Force Delete Resource**:\r\n- If the resource is found, the `forceDelete()` method is called to permanently remove it from the database.\n\n3. **Return Response**:\r\n- If the deletion is successful, the method returns a `204 No Content` response, indicating that the resource has been permanently deleted.\n\n4. **Error Handling**:\r\n- If an error occurs during the deletion process (e.g., the resource is not found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating the resource was successfully and permanently deleted.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: forceDelete",
        "tags": [
          "CRM Contact",
          "Contact"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/crm/contacts/data-table": {
      "get": {
        "operationId": "admin.crm.contacts.data_table",
        "tags": [
          "CRM Contact DataTable",
          "DataTable"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/workflows/{workflow}/actions/data-table": {
      "get": {
        "operationId": "admin.workflows.actions.data_table",
        "tags": [
          "CRM Contact DataTable",
          "DataTable"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/workflows/{workflow}/conditions/data-table": {
      "get": {
        "operationId": "admin.workflows.conditions.data_table",
        "tags": [
          "CRM Contact DataTable",
          "DataTable"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/workflows/allowed-operators/data-table": {
      "get": {
        "operationId": "admin.workflows.allowed_operators.data_table",
        "tags": [
          "CRM Contact DataTable",
          "DataTable"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/crm/contacts-link-additional-addresses/unlinked-additional-address/{contactId}/{companyId}": {
      "get": {
        "operationId": "admin.crm.contacts-link-additional-addresses.unlinked_additional_address",
        "description": "### Description\r\nThis static method retrieves the additional addresses that are unlinked to a specific contact but are associated with a given company. The method returns a JSON response containing the unlinked additional addresses.\n\n### Input Parameters\n\n- **contactId** (integer): The unique identifier of the contact whose unlinked additional addresses are being queried.\r\n- **companyId** (integer): The unique identifier of the company to which the additional addresses belong.\n\n### Method Logic\n\n1. **Retrieve Contact**:\r\n- The method first retrieves the contact using the `contactId` provided. If the contact is not found, the method returns a validation error.\n\n2. **Retrieve Unlinked Additional Addresses**:\r\n- The method then queries the `AdditionalAddress` model to fetch additional addresses that are associated with the given company (`companyId`) but are not yet linked to the specified contact (`contactId`).\r\n- The query ensures that addresses of type `Company` are selected and that addresses already linked to the contact are excluded using the `whereDoesntHave()` clause.\r\n- The result is ordered alphabetically by the address `name`.\n\n3. **Return Response**:\r\n- The unlinked addresses are returned in the form of a `AddressResource` collection and sent as a JSON response with status code `200 OK`.\n\n4. **Error Handling**:\r\n- If any error occurs during the process, a `422 Unprocessable Entity` error is returned along with the exception message.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON array of unlinked additional addresses associated with the given company but not linked to the specified contact.\r\n```json\r\n{\r\n\"data\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"Address 1\",\r\n\"address_line_1\": \"123 Street Name\"\r\n},\r\n{\r\n\"id\": 2,\r\n\"name\": \"Address 2\",\r\n\"address_line_1\": \"456 Another St\"\r\n}\r\n]\r\n}",
        "summary": "## Get Unlinked Additional Addresses",
        "tags": [
          "CRM Contact Pivot Additional Address",
          "ContactPivotAdditionalAddress"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddressResource"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "prefixItems": [
                        {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            },
                            "title": {
                              "type": "string",
                              "example": "Not Found"
                            },
                            "detail": {
                              "type": "string",
                              "example": "The requested contact was not found."
                            },
                            "source": {
                              "type": "object",
                              "properties": {
                                "pointer": {
                                  "type": "string",
                                  "example": "/contactId"
                                }
                              },
                              "required": [
                                "pointer"
                              ]
                            }
                          },
                          "required": [
                            "status",
                            "title",
                            "detail",
                            "source"
                          ]
                        }
                      ],
                      "minItems": 1,
                      "maxItems": 1,
                      "additionalItems": false
                    }
                  },
                  "required": [
                    "errors"
                  ]
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/crm/contacts-link-additional-addresses": {
      "post": {
        "operationId": "admin.crm.contacts-link-additional-addresses.store",
        "description": "### Description\r\nThis method creates a new link between a contact and an additional address associated with a given company. The method stores the relationship using the data provided in the request and returns the created link with the associated contact and address details.\n\n### Input Parameters\n\n- **ContactPivotAdditionalAddressRequest**: A validated request object containing the necessary data to create the link between the contact and the additional address. The fields include:\r\n- **contact_id** (integer): The ID of the contact.\r\n- **additional_address_id** (integer): The ID of the additional address linked to the company.\n\n### Method Logic\n\n1. **Create Contact-Address Link**:\r\n- The method creates a new `ContactPivotAdditionalAddress` record using the validated data from the request.\n\n2. **Load Related Data**:\r\n- After creating the link, the method eagerly loads the related `contact` and `additionalAddress` relationships to return detailed information about the link.\n\n3. **Return Response**:\r\n- The newly created link is wrapped in a `JsonApiWithRelationshipResource` object and returned as a JSON response with status code `201 Created`.\n\n4. **Error Handling**:\r\n- If an error occurs during the process, the method returns a `422 Unprocessable Entity` response along with the error message.\n\n### Successful Response (201)\r\n- **HTTP Code**: 201 (Created)\r\n- **Content**: A JSON object containing the details of the created link, including the associated contact and additional address.\r\n```json\r\n{\r\n\"data\": {\r\n\"id\": 1,\r\n\"contact\": {\r\n\"id\": 123,\r\n\"name\": \"John Doe\",\r\n\"email\": \"john.doe@example.com\"\r\n},\r\n\"additional_address\": {\r\n\"id\": 456,\r\n\"name\": \"Office Location\",\r\n\"address_line_1\": \"123 Main St\"\r\n}\r\n}\r\n}",
        "summary": "## Method: `store()`",
        "tags": [
          "CRM Contact Pivot Additional Address",
          "ContactPivotAdditionalAddress"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactPivotAdditionalAddressRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWithRelationshipResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/crm/contacts-link-additional-addresses/{contactId}/{additionalAddressId}": {
      "delete": {
        "operationId": "admin.crm.contacts-link-additional-addresses.destroy",
        "description": "### Description\r\nThis method removes the relationship between a contact and an additional address. It deletes the specific link between the contact and the address based on their respective IDs.\n\n### Input Parameters\n\n- **contactId** (integer): The unique identifier of the contact.\r\n- **additionalAddressId** (integer): The unique identifier of the additional address.\n\n### Method Logic\n\n1. **Find Relationship**:\r\n- The method queries the `ContactPivotAdditionalAddress` model to find the relationship between the given `contactId` and `additionalAddressId`.\r\n- If no relationship is found, the method throws a `404 Not Found` error.\n\n2. **Delete Relationship**:\r\n- Once the relationship is found, it is deleted from the database, effectively removing the link between the contact and the additional address.\n\n3. **Return Response**:\r\n- If the deletion is successful, the method returns a `204 No Content` response, indicating that the relationship was successfully removed.\n\n4. **Error Handling**:\r\n- If an error occurs during the process, such as a failure to find the relationship or a database error, a `422 Unprocessable Entity` response is returned along with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned, indicating that the relationship was successfully removed.\r\n```http\r\nHTTP/1.1 204 No Content",
        "summary": "## Method: `destroy()`",
        "tags": [
          "CRM Contact Pivot Additional Address",
          "ContactPivotAdditionalAddress"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "additionalAddressId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/crm/contacts-link-projects/unlinked-contacts/{projectId}/{companyId}": {
      "get": {
        "operationId": "admin.crm.contacts-link-projects.unlinked_contacts",
        "description": "### Description\r\nThis method searches for contacts within a specified company that are not linked to a particular project. It returns a JSON response containing the list of unlinked contacts.\n\n### Input Parameters\n\n- **projectId** (integer): The unique identifier of the project.\r\n- **companyId** (integer): The unique identifier of the company to which the contacts belong.\n\n### Method Logic\n\n1. **Retrieve Unlinked Contacts**:\r\n- The method queries the `Contact` model to fetch contacts that belong to the specified `companyId` but are not yet linked to the provided `projectId`.\r\n- The query uses the `whereDoesntHave()` method to exclude contacts that are already linked to the given project.\r\n- Contacts are ordered by `display_name` for easier readability.\n\n2. **Return Response**:\r\n- The list of unlinked contacts is wrapped in a `ContactResource` collection and returned as a JSON response with status code `200 OK`.\n\n3. **Error Handling**:\r\n- If an error occurs during the process, such as a database issue, a `422 Unprocessable Entity` response is returned with the error message.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON array of contacts that are not linked to the specified project.\r\n```json\r\n{\r\n\"data\": [\r\n{\r\n\"id\": 1,\r\n\"display_name\": \"John Doe\"\r\n},\r\n{\r\n\"id\": 2,\r\n\"display_name\": \"Jane Smith\"\r\n}\r\n]\r\n}",
        "summary": "## Method: `getUnlinkedContacts()`",
        "tags": [
          "CRM Contact Pivot Project",
          "ContactPivotProject"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactResource"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/crm/contacts-link-projects/unlinked-projects/{contactId}/{companyId}": {
      "get": {
        "operationId": "admin.crm.contacts-link-projects.unlinked_projects",
        "description": "### Description\r\nThis method searches for projects within a specific company that are not linked to a given contact. It returns a JSON response with a list of projects that have no relationship with the specified contact.\n\n### Input Parameters\n\n- **contactId** (integer): The unique identifier of the contact.\r\n- **companyId** (integer): The unique identifier of the company to which the projects belong.\n\n### Method Logic\n\n1. **Retrieve Unlinked Projects**:\r\n- The method queries the `Project` model to fetch projects that belong to the specified `companyId` but are not linked to the provided `contactId`.\r\n- The query uses the `whereDoesntHave()` method to exclude projects that are already linked to the contact through the `linkedContacts` relationship.\r\n- Projects are ordered by `name` for easy readability.\n\n2. **Return Response**:\r\n- The list of unlinked projects is wrapped in a `ProjectResource` collection and returned as a JSON response with status code `200 OK`.\n\n3. **Error Handling**:\r\n- If an error occurs during the process, a `422 Unprocessable Entity` response is returned with the error message.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON array of projects that are not linked to the specified contact.\r\n```json\r\n{\r\n\"data\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"Project Alpha\"\r\n},\r\n{\r\n\"id\": 2,\r\n\"name\": \"Project Beta\"\r\n}\r\n]\r\n}",
        "summary": "## Method: `getUnlinkedProjects()`",
        "tags": [
          "CRM Contact Pivot Project",
          "ContactPivotProject"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectResource"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/crm/contacts-link-projects": {
      "post": {
        "operationId": "admin.crm.contacts-link-projects.store",
        "description": "### Description\r\nThis method creates a new link between a contact and a project within a given company. It validates the request data, checks for existing links, and creates the relationship if it does not already exist.\n\n### Input Parameters\n\n- **ContactPivotProjectRequest**: A validated request object containing the necessary data to create the link between a contact and a project. The request includes:\r\n- **contact_id** (integer): The ID of the contact to be linked.\r\n- **project_id** (integer): The ID of the project to be linked to the contact.\n\n### Method Logic\n\n1. **Check Existing Link**:\r\n- The method checks if a relationship between the contact (`contact_id`) and the project (`project_id`) already exists in the `ContactPivotProject` table.\r\n- If the link already exists, the method returns a `409 Conflict` response indicating that the contact is already linked to the project.\n\n2. **Create New Link**:\r\n- If no existing link is found, the method creates a new relationship between the contact and the project using the validated data from the request.\n\n3. **Load Related Data**:\r\n- After creating the link, the method loads the related `contact` and `project` data to provide detailed information in the response.\n\n4. **Return Response**:\r\n- The newly created link is wrapped in a `JsonApiWithRelationshipResource` and returned as a JSON response with status code `201 Created`.\n\n5. **Error Handling**:\r\n- If an error occurs during the process, such as a database issue, the method returns a `422 Unprocessable Entity` response with the error message.\n\n### Successful Response (201)\r\n- **HTTP Code**: 201 (Created)\r\n- **Content**: A JSON object containing the details of the newly created link between the contact and the project.\r\n```json\r\n{\r\n\"data\": {\r\n\"id\": 1,\r\n\"contact\": {\r\n\"id\": 123,\r\n\"name\": \"John Doe\",\r\n\"email\": \"john.doe@example.com\"\r\n},\r\n\"project\": {\r\n\"id\": 456,\r\n\"name\": \"Project Alpha\"\r\n}\r\n}\r\n}",
        "summary": "## Method: `store()`",
        "tags": [
          "CRM Contact Pivot Project",
          "ContactPivotProject"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactPivotProjectRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWithRelationshipResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "prefixItems": [
                        {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            },
                            "title": {
                              "type": "string",
                              "example": "Conflict"
                            },
                            "detail": {
                              "type": "string",
                              "example": "This contact is already linked to the project."
                            },
                            "source": {
                              "type": "object",
                              "properties": {
                                "pointer": {
                                  "type": "string",
                                  "example": "/contact_id"
                                }
                              },
                              "required": [
                                "pointer"
                              ]
                            }
                          },
                          "required": [
                            "status",
                            "title",
                            "detail",
                            "source"
                          ]
                        }
                      ],
                      "minItems": 1,
                      "maxItems": 1,
                      "additionalItems": false
                    }
                  },
                  "required": [
                    "errors"
                  ]
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/crm/contacts-link-projects/{contactId}/{projectId}": {
      "delete": {
        "operationId": "admin.crm.contacts-link-projects.destroy",
        "description": "### Description\r\nThis method removes the relationship between a contact and a project. It deletes the specific link between the contact and the project based on their respective IDs.\n\n### Input Parameters\n\n- **contactId** (integer): The unique identifier of the contact whose relationship with the project is being removed.\r\n- **projectId** (integer): The unique identifier of the project whose relationship with the contact is being removed.\n\n### Method Logic\n\n1. **Find Relationship**:\r\n- The method queries the `ContactPivotProject` model to find the relationship between the given `contactId` and `projectId`.\r\n- If the relationship is not found, the method throws a `404 Not Found` error (using `firstOrFail()`).\n\n2. **Delete Relationship**:\r\n- Once the relationship is found, it is deleted from the database, effectively removing the link between the contact and the project.\n\n3. **Return Response**:\r\n- If the deletion is successful, the method returns a `204 No Content` response, indicating that the relationship was successfully removed.\n\n4. **Error Handling**:\r\n- If an error occurs during the process, such as a failure to find the relationship or a database issue, a `422 Unprocessable Entity` response is returned with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned, indicating that the relationship was successfully removed.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: `destroy()`",
        "tags": [
          "CRM Contact Pivot Project",
          "ContactPivotProject"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/crm/leads": {
      "post": {
        "operationId": "admin.crm.leads.store",
        "description": "### Description\r\nThis method stores a new lead in the CRM system. It validates the input data, creates the lead, and optionally assigns owners to the lead if provided.\n\n### Input Parameters\r\nThe method expects the following lead information from the request:\r\n- **name** (string): The lead's full name.\r\n- **email** (string): The lead's email address.\r\n- **phone** (string): The lead's phone number.\r\n- **owners** (array, optional): An array of owners (if applicable) to be assigned to the lead.\r\n- **other fields**: Any additional fields required by the `Lead` model, depending on the business logic.\n\n### Method Logic\n\n1. **Begin Transaction**:\r\n- The lead creation process is wrapped in a database transaction to ensure data integrity.\n\n2. **Create Lead**:\r\n- The method creates a new lead using the validated data from the `LeadRequest`.\n\n3. **Assign Owners (Optional)**:\r\n- If the `owners` data is provided in the request, the method associates those owners with the lead by calling `createMany()`.\n\n4. **Commit Transaction**:\r\n- Once the lead and its owners (if any) are successfully created, the transaction is committed, and a `201 Created` response is returned with the lead's details.\n\n5. **Error Handling**:\r\n- If any error occurs during the process, the transaction is rolled back, and a `422 Unprocessable Entity` response is returned with the exception message.\n\n### Successful Response (201)\r\n- **HTTP Code**: 201 (Created)\r\n- **Content**: A JSON object containing the details of the newly created lead, including its unique identifier.\r\n```json\r\n{\r\n\"id\": 456,\r\n\"name\": \"Jane Doe\",\r\n\"email\": \"jane.doe@example.com\",\r\n\"phone\": \"987-654-3210\"\r\n}",
        "summary": "## Create new Lead",
        "tags": [
          "CRM Lead",
          "Lead"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeadRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiSaveResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/crm/leads/{lead}": {
      "get": {
        "operationId": "admin.crm.leads.show",
        "description": "### Description\r\nThis method retrieves and displays the full details of a specific lead. It also loads related data such as profile image, owners, and associated resources (e.g., addresses, files, emails).\n\n### Input Parameters\r\n- **lead** (Lead): The `Lead` model instance representing the lead whose details are being requested.\n\n### Method Logic\n\n1. **Loading Related Data**:\r\n- The method uses `load()` to eagerly load the following relationships for the lead:\r\n- **Profile Image**: The lead's profile image (with `id`, `image_path`, `model_id`, `model_type`).\r\n- **Owners**: Information about the owners of the lead, including:\r\n- Owner details (name, email, primary phone).\r\n- Owner profile images.\r\n- Owner roles (e.g., Admin, Manager).\n\n2. **Count Related Records**:\r\n- The method uses `loadCount()` to count the related resources of the lead:\r\n- **Addresses**: Number of addresses associated with the lead.\r\n- **Files**: Number of files linked to the lead.\r\n- **Emails**: Number of emails related to the lead.\r\n- **Phone Numbers**: Number of phone numbers associated with the lead.\r\n- **Notes**: Number of notes linked to the lead.\n\n3. **Return Response**:\r\n- The lead's data is wrapped in a `LeadResource` and returned as a JSON response with a status code `200 OK`, indicating successful data retrieval.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON object containing the full details of the lead, including related data such as profile image, owners, addresses, and file counts.\r\n```json\r\n{\r\n\"id\": 123,\r\n\"name\": \"John Doe\",\r\n\"email\": \"john.doe@example.com\",\r\n\"phone\": \"123-456-7890\",\r\n\"profile_image\": \"path/to/profile_image.jpg\",\r\n\"owners\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"Jane Smith\",\r\n\"email\": \"jane.smith@company.com\",\r\n\"primary_phone\": \"987-654-3210\",\r\n\"profile_image\": \"path/to/jane_smith.jpg\",\r\n\"roles\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"Admin\"\r\n}\r\n]\r\n}\r\n],\r\n\"addresses_count\": 3,\r\n\"files_count\": 5,\r\n\"emails_count\": 10,\r\n\"phone_numbers_count\": 2,\r\n\"notes_count\": 4\r\n}",
        "summary": "## Show Lead",
        "tags": [
          "CRM Lead",
          "Lead"
        ],
        "parameters": [
          {
            "name": "lead",
            "in": "path",
            "required": true,
            "description": "The lead ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeadResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "patch": {
        "operationId": "admin.crm.leads.update",
        "description": "### Description\r\nThis method updates the information of an existing lead in the system. It validates the incoming request data, updates the lead, and manages the associated owners.\n\n### Input Parameters\r\n- **LeadRequest**: A validated request object containing the updated data for the lead, which may include:\r\n- **name** (string): The updated name of the lead.\r\n- **email** (string): The updated email address of the lead.\r\n- **phone** (string): The updated phone number of the lead.\r\n- **owners** (array, optional): An array of owners (if applicable) to be associated with the lead.\r\n- **other fields**: Additional fields as per business logic.\r\n- **lead** (Lead): The `Lead` model instance representing the lead to be updated.\n\n### Method Logic\n\n1. **Begin Transaction**:\r\n- The lead update process is wrapped in a database transaction to ensure data integrity.\n\n2. **Update Lead**:\r\n- The lead's information is updated using the validated data from the `LeadRequest`. The `updated_at` field is explicitly updated with the current timestamp.\n\n3. **Manage Owners**:\r\n- The method deletes any existing owners associated with the lead. If new owner data is provided in the request, the method creates new associations between the lead and its owners using the `createMany()` method.\n\n4. **Commit Transaction**:\r\n- After updating the lead and managing the owners, the transaction is committed. A `200 OK` response is returned with the updated lead's details.\n\n5. **Error Handling**:\r\n- If an error occurs during the update process, the transaction is rolled back, and a `422 Unprocessable Entity` error is returned with an appropriate error message.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON object containing the details of the updated lead.\r\n```json\r\n{\r\n\"id\": 123,\r\n\"name\": \"Updated Lead Name\",\r\n\"email\": \"updated\"",
        "summary": "## Update Lead",
        "tags": [
          "CRM Lead",
          "Lead"
        ],
        "parameters": [
          {
            "name": "lead",
            "in": "path",
            "required": true,
            "description": "The lead ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeadResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.crm.leads.destroy",
        "description": "### Description\r\nThis method performs a soft delete (temporary removal) of a specified lead resource from storage. The lead is marked as deleted but not permanently removed, allowing for future recovery if needed.\n\n### Input Parameters\r\n- **lead** (Lead): The `Lead` model instance representing the lead to be soft deleted.\n\n### Method Logic\n\n1. **Begin Transaction**:\r\n- The soft deletion process is wrapped inside a database transaction to ensure data integrity.\n\n2. **Soft Delete**:\r\n- The `delete()` method is called on the `Lead` model, which performs a soft delete, marking the lead as deleted without permanently removing it from the database.\n\n3. **Commit Transaction**:\r\n- If the soft delete is successful, the transaction is committed, and a `204 No Content` response is returned.\n\n4. **Error Handling**:\r\n- If an error occurs during the process, the transaction is rolled back, and a `422 Unprocessable Entity` response is returned with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating that the lead has been successfully and temporarily removed.\r\n```http     * /1.1 204 No Content",
        "summary": "## Destroy Lead",
        "tags": [
          "CRM Lead",
          "Lead"
        ],
        "parameters": [
          {
            "name": "lead",
            "in": "path",
            "required": true,
            "description": "The lead ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/crm/leads/{lead}/edit": {
      "get": {
        "operationId": "admin.crm.leads.edit",
        "description": "### Description\r\nThis method retrieves the necessary data to display in the edit view for a specific lead. It loads related data, including profile image, owners, addresses, and other relevant information, allowing for a complete view of the lead's details.\n\n### Input Parameters\r\n- **lead** (Lead): The `Lead` model instance representing the lead whose details are being fetched for editing.\n\n### Method Logic\n\n1. **Loading Related Data**:\r\n- The method uses `load()` to eagerly load the following relationships and related data for the lead:\r\n- **Profile Image**: The profile image associated with the lead (with `id`, `image_path`, `model_id`, `model_type`).\r\n- **Owners**: Information about the owners of the lead, including:\r\n- Owner details (name, email, primary phone).\r\n- Owner profile images.\r\n- Owner roles (e.g., Admin, Manager).\r\n- **Main Address**: The lead's primary address, including details like address line, latitude, longitude, and associated country, state, city, and type.\r\n- **Billing Address**: The billing address of the lead, with similar details as the main address.\n\n2. **Return Response**:\r\n- The lead's data is wrapped in a `LeadResource` object and returned as a JSON response with status code `200 OK`, indicating successful retrieval of the lead's details.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON object containing the full details of the lead, including related data such as profile image, owners, addresses, and other information.\r\n```json\r\n{\r\n\"id\": 123,\r\n\"name\": \"John Doe\",\r\n\"email\": \"john.doe@example.com\",\r\n\"phone\": \"123-456-7890\",\r\n\"profile_image\": \"path/to/profile_image.jpg\",\r\n\"owners\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"Jane Smith\",\r\n\"email\": \"jane.smith@company.com\",\r\n\"primary_phone\": \"987-654-3210\",\r\n\"profile_image\": \"path/to/jane_smith.jpg\",\r\n\"roles\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"Admin\"\r\n}\r\n]\r\n}\r\n],\r\n\"main_address\": {\r\n\"id\": 101,\r\n\"name\": \"Main Office\",\r\n\"address_line_1\": \"123 Main St\",\r\n\"latitude\": \"40.712776\",\r\n\"longitude\": \"-74.005974\",\r\n\"zip_code\": \"10001\",\r\n\"primary_email\": \"main.office@company.com\",\r\n\"primary_phone\": \"123-456-7890\",\r\n\"country\": {\r\n\"id\": 1,\r\n\"name\": \"United States\"\r\n},\r\n\"state\": {\r\n\"id\": 1,\r\n\"name\": \"New York\"\r\n},\r\n\"city\": {\r\n\"id\": 1,\r\n\"name\": \"New York City\"\r\n},\r\n\"type\": {\r\n\"id\": 1,\r\n\"name\": \"Office\"\r\n}\r\n},\r\n\"billing_address\": {\r\n\"id\": 102,\r\n\"name\": \"Billing Office\",\r\n\"address_line_1\": \"456 Billing St\",\r\n\"latitude\": \"40.712776\",\r\n\"longitude\": \"-74.005974\",\r\n\"zip_code\": \"10002\",\r\n\"primary_email\": \"billing.office@company.com\",\r\n\"primary_phone\": \"987-654-3210\",\r\n\"country\": {\r\n\"id\": 1,\r\n\"name\": \"United States\"\r\n},\r\n\"state\": {\r\n\"id\": 1,\r\n\"name\": \"New York\"\r\n},\r\n\"city\": {\r\n\"id\": 1,\r\n\"name\": \"New York City\"\r\n},\r\n\"type\": {\r\n\"id\": 1,\r\n\"name\": \"Billing\"\r\n}\r\n}\r\n}",
        "summary": "## Edit Lead",
        "tags": [
          "CRM Lead",
          "Lead"
        ],
        "parameters": [
          {
            "name": "lead",
            "in": "path",
            "required": true,
            "description": "The lead ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeadResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/crm/leads/{lead}/convert-to-company": {
      "post": {
        "operationId": "admin.crm.leads.convert_to_company",
        "summary": "Convert the specified resource to a company",
        "tags": [
          "CRM Lead",
          "Lead"
        ],
        "parameters": [
          {
            "name": "lead",
            "in": "path",
            "required": true,
            "description": "The lead model to be converted.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConvertToCompanyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiSaveResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/crm/leads/{lead}/convert-to-contact": {
      "post": {
        "operationId": "admin.crm.leads.convert_to_contact",
        "summary": "Convert the specified resource to a contact",
        "tags": [
          "CRM Lead",
          "Lead"
        ],
        "parameters": [
          {
            "name": "lead",
            "in": "path",
            "required": true,
            "description": "The lead model to be converted.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConvertToContactRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiSaveResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/crm/leads/{modelId}/restore": {
      "patch": {
        "operationId": "admin.crm.leads.restore",
        "description": "### Description\r\nThis method restores a previously soft-deleted resource from the database. The resource is retrieved from the \"trashed\" or soft-deleted records and restored to its active state.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource that was soft-deleted and is to be restored.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Restore Resource**:\r\n- If the resource is found, the `restore()` method is called to undo the soft-delete and reactivate the resource.\n\n3. **Return Response**:\r\n- Upon successful restoration, the method returns a `204 No Content` response, indicating that the resource was restored successfully.\n\n4. **Error Handling**:\r\n- If an error occurs (such as the resource not being found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating that the resource was successfully restored.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: restore",
        "tags": [
          "CRM Lead",
          "Lead"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/crm/leads/{modelId}/force-delete": {
      "delete": {
        "operationId": "admin.crm.leads.force_delete",
        "description": "### Description\r\nThis method permanently deletes a soft-deleted resource from the database. Once a resource is force-deleted, it cannot be recovered.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource to be permanently deleted from storage.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Force Delete Resource**:\r\n- If the resource is found, the `forceDelete()` method is called to permanently remove it from the database.\n\n3. **Return Response**:\r\n- If the deletion is successful, the method returns a `204 No Content` response, indicating that the resource has been permanently deleted.\n\n4. **Error Handling**:\r\n- If an error occurs during the deletion process (e.g., the resource is not found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating the resource was successfully and permanently deleted.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: forceDelete",
        "tags": [
          "CRM Lead",
          "Lead"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/crm/leads/data-table": {
      "get": {
        "operationId": "admin.crm.leads.data_table",
        "tags": [
          "CRM Lead DataTable",
          "DataTable"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/crm/projects/all": {
      "get": {
        "operationId": "admin.crm.projects.all",
        "description": "### Description\r\nThis method retrieves a list of all projects available in the system. It supports optional field selection, filtering, and sorting.\n\n### Input Parameters\r\n- **No mandatory parameters**: The method retrieves all projects. However, the method supports optional filters, field selection, and sorting if implemented:\r\n- **Fields** (optional): Select specific fields to return for each project.\r\n- **Filters** (optional): Apply filtering conditions to narrow down the results (e.g., filter by status, company, date).\r\n- **Sorting** (optional): Define the order in which the projects should be returned (e.g., sorted by creation date or name).\n\n### Method Logic\n\n1. **Initialize Query**:\r\n- A query is initialized to retrieve data from the `Project` model.\n\n2. **Apply Field Selection**:\r\n- The method calls `applyFields()` to allow selecting specific fields to return in the results, potentially reducing payload size.\n\n3. **Apply Filters**:\r\n- The `applyFilters()` method is invoked to apply any optional filters (e.g., by project status, date, etc.).\n\n4. **Apply Sorting**:\r\n- The method also applies sorting via `applySorting()` to return projects in the desired order.\n\n5. **Execute Query**:\r\n- After applying fields, filters, and sorting, the query is executed to fetch the list of projects from the database.\n\n6. **Return Response**:\r\n- The retrieved projects are wrapped in a collection of `AllProjectResource` objects and returned as a JSON response with status code `200 OK`.\n\n7. **Error Handling**:\r\n- If an error occurs during the retrieval process, the method returns a `422 Unprocessable Entity` response with the error message.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON array containing the list of all available projects, with their details.\r\n```json\r\n{\r\n\"data\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"Project Alpha\",\r\n\"description\": \"A detailed description of Project Alpha.\",\r\n\"start_date\": \"2024-01-01\",\r\n\"end_date\": \"2024-12-31\"\r\n},\r\n{\r\n\"id\": 2,\r\n\"name\": \"Project Beta\",\r\n\"description\": \"A detailed description of Project Beta.\",\r\n\"start_date\": \"2023-05-15\",\r\n\"end_date\": \"2023-10-30\"\r\n}\r\n]\r\n}",
        "summary": "## Get All Projects",
        "tags": [
          "CRM Project",
          "Project"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllProjectResource"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/crm/projects/by-company/{companyId}": {
      "get": {
        "operationId": "admin.crm.projects.by_company",
        "description": "### Description\r\nThis method retrieves a list of projects associated with a specific company, identified by the company ID. The method fetches all projects linked to the provided company.\n\n### Input Parameters\r\n- **companyId** (integer): The unique identifier of the company whose associated projects are being queried.\n\n### Method Logic\n\n1. **Retrieve Projects by Company**:\r\n- The method uses the `Project` model to retrieve all projects where the `company_id` matches the provided `companyId`.\n\n2. **Return Response**:\r\n- The list of projects is wrapped in a `GetByCompanyTestResource` collection and returned as a JSON response with status code `200 OK`, indicating successful retrieval of the data.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON array containing the list of projects associated with the specified company.\r\n```json\r\n{\r\n\"data\": [\r\n{\r\n\"id\": 101,\r\n\"name\": \"Project Alpha\",\r\n\"description\": \"A description of Project Alpha.\",\r\n\"start_date\": \"2024-01-01\",\r\n\"end_date\": \"2024-12-31\",\r\n\"company_id\": 10\r\n},\r\n{\r\n\"id\": 102,\r\n\"name\": \"Project Beta\",\r\n\"description\": \"A description of Project Beta.\",\r\n\"start_date\": \"2023-06-15\",\r\n\"end_date\": \"2023-11-30\",\r\n\"company_id\": 10\r\n}\r\n]\r\n}",
        "summary": "## Get By Company",
        "tags": [
          "CRM Project",
          "Project"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetByCompanyTestResource"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/crm/projects": {
      "post": {
        "operationId": "admin.crm.projects.store",
        "description": "### Description\r\nThis method stores a new project in the system. It validates the incoming request data, creates a new project, and returns the created project's details, including its ID.\n\n### Input Parameters\r\nThe method expects the following project information from the request:\r\n- **name** (string): The name of the project.\r\n- **description** (string, optional): A detailed description of the project.\r\n- **start_date** (date): The date when the project starts.\r\n- **end_date** (date, optional): The date when the project ends.\r\n- **other fields**: Any other additional fields as required by the business logic or model.\n\n### Method Logic\n\n1. **Begin Transaction**:\r\n- The project creation process is wrapped inside a database transaction to ensure that if any part of the process fails, the changes are rolled back, and the data remains consistent.\n\n2. **Create Project**:\r\n- The method validates the request data using the `ProjectRequest` and creates a new project using the validated data.\n\n3. **Commit Transaction**:\r\n- After successfully creating the project, the transaction is committed. A `201 Created` response is returned with the project's details, including the assigned ID.\n\n4. **Return Response**:\r\n- A JSON response containing the newly created project's details is returned, including the `Location` header, which provides the URL to access the created project.\n\n5. **Error Handling**:\r\n- If an error occurs during the creation process, the transaction is rolled back, and a `422 Unprocessable Entity` error response is returned with an error message.\n\n### Successful Response (201)\r\n- **HTTP Code**: 201 (Created)\r\n- **Content**: A JSON object containing the details of the newly created project.\r\n```json\r\n{\r\n\"id\": 789,\r\n\"name\": \"New Project\",\r\n\"description\": \"This is a new project.\",\r\n\"start_date\": \"2024-09-26\",\r\n\"end_date\": \"2024-12-31\"\r\n}",
        "summary": "## Create new project",
        "tags": [
          "CRM Project",
          "Project"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiSaveResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/crm/projects/{project}": {
      "get": {
        "operationId": "admin.crm.projects.show",
        "description": "### Description\r\nThis method retrieves and displays the full details of a specific project, including its type, company, status, owners, and related resources such as contacts, proposals, files, and more.\n\n### Input Parameters\r\n- **project** (Project): The `Project` model instance representing the project whose details are being requested.\n\n### Method Logic\n\n1. **Loading Related Data**:\r\n- The method uses `load()` to eagerly load the following relationships for the project:\r\n- **Type**: The project type (with `id`, `name`, and `model_type`).\r\n- **Company**: The company associated with the project (with `id` and `name`).\r\n- **Status**: The current status of the project (with `id`, `display_name`, and `background_color`).\r\n- **Profile Image**: The profile image of the project (if applicable).\r\n- **Company Owners**: Information about the owners of the company, including:\r\n- Owner details (name, email, primary phone).\r\n- Owner profile images.\r\n- Owner roles (e.g., Admin, Manager).\n\n2. **Count Related Records**:\r\n- The method uses `loadCount()` to count the related resources of the project:\r\n- **Linked Contacts**: Contacts related to the project.\r\n- **Proposals**: Proposals associated with the project.\r\n- **Files**: Files attached to the project.\r\n- **Addresses**: Addresses linked to the project.\r\n- **Notes**: Notes related to the project.\n\n3. **Return Response**:\r\n- The method returns a `ProjectResource` object as a JSON response with the status code `200 OK`, indicating that the project details were successfully retrieved.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON object containing the complete details of the project, including related data such as the company, owners, status, and counts of related resources.\r\n```json\r\n{\r\n\"id\": 123,\r\n\"name\": \"Project ABC\",\r\n\"description\": \"This is a project description.\",\r\n\"start_date\": \"2024-09-01\",\r\n\"end_date\": \"2024-12-31\",\r\n\"type\": {\r\n\"id\": 1,\r\n\"name\": \"Consulting\",\r\n\"model_type\": \"Project\"\r\n},\r\n\"company\": {\r\n\"id\": 10,\r\n\"name\": \"Tech Solutions\",\r\n\"owners\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"Jane Smith\",\r\n\"email\": \"jane.smith@techsolutions.com\",\r\n\"primary_phone\": \"987-654-3210\",\r\n\"profile_image\": \"path/to/jane_smith.jpg\",\r\n\"roles\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"Admin\"\r\n}\r\n]\r\n}\r\n]\r\n},\r\n\"status\": {\r\n\"id\": 2,\r\n\"display_name\": \"In Progress\",\r\n\"background_color\": \"#FFD700\"\r\n},\r\n\"profile_image\": \"path/to/project_profile_image.jpg\",\r\n\"linked_contacts_count\": 5,\r\n\"proposals_count\": 3,\r\n\"files_count\": 10,\r\n\"addresses_count\": 2,\r\n\"notes_count\": 4\r\n}",
        "summary": "## Show project",
        "tags": [
          "CRM Project",
          "Project"
        ],
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "description": "The project ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "patch": {
        "operationId": "admin.crm.projects.update",
        "description": "### Description\r\nThis method updates the information of an existing project in the system. It validates the incoming request data, updates the project with the provided information, and returns the updated project details upon success.\n\n### Input Parameters\r\n- **ProjectRequest**: A validated request object containing the updated data for the project. The fields can include:\r\n- **name** (string): The updated name of the project.\r\n- **description** (string, optional): The updated description of the project.\r\n- **start_date** (date): The updated start date of the project.\r\n- **end_date** (date, optional): The updated end date of the project.\r\n- **other fields**: Additional fields required by the project model based on the business logic.\n\n- **project** (Project): The `Project` model instance representing the project to be updated.\n\n### Method Logic\n\n1. **Begin Transaction**:\r\n- The project update process is wrapped in a database transaction to ensure data integrity in case of failure.\n\n2. **Update Project**:\r\n- The method updates the project with the validated data from the `ProjectRequest`. The `updated_at` field is also explicitly updated with the current timestamp.\n\n3. **Commit Transaction**:\r\n- Once the project is updated successfully, the transaction is committed and a `200 OK` response is returned with the updated project details.\n\n4. **Error Handling**:\r\n- If any error occurs during the update process, the transaction is rolled back and a `422 Unprocessable Entity` response is returned with the error message.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON object containing the updated details of the project.\r\n```json\r\n{\r\n\"id\": 123,\r\n\"name\": \"Updated Project Name\",\r\n\"description\": \"This is the updated project description.\",\r\n\"start_date\": \"2024-10-01\",\r\n\"end_date\": \"2025-01-01\",\r\n\"updated_at\": \"2024-09-26T12:30:00Z\"\r\n}",
        "summary": "## Update project",
        "tags": [
          "CRM Project",
          "Project"
        ],
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "description": "The project ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.crm.projects.destroy",
        "description": "### Description\r\nThis method performs a soft delete (temporary removal) of a specified project. The project is marked as deleted but not permanently removed, allowing for future recovery if needed.\n\n### Input Parameters\r\n- **project** (Project): The `Project` model instance representing the project to be soft-deleted.\n\n### Method Logic\n\n1. **Begin Transaction**:\r\n- The deletion process is wrapped inside a database transaction to ensure data consistency. If anything fails, changes are rolled back.\n\n2. **Soft Delete**:\r\n- The method calls the `delete()` function on the `Project` model, performing a soft delete. This marks the project as deleted in the database, but it is not permanently removed.\n\n3. **Commit Transaction**:\r\n- If the soft delete is successful, the transaction is committed and a `204 No Content` response is returned, indicating the project has been temporarily removed.\n\n4. **Error Handling**:\r\n- If an error occurs during the deletion process, the transaction is rolled back, and a `422 Unprocessable Entity` response is returned with an appropriate error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating that the project was successfully deleted (soft delete).\r\n```http     * /1.1 204 No Content",
        "summary": "## Destroy project",
        "tags": [
          "CRM Project",
          "Project"
        ],
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "description": "The project ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/crm/projects/{project}/edit": {
      "get": {
        "operationId": "admin.crm.projects.edit",
        "description": "### Description\r\nThis method retrieves the necessary data to display in the edit view for a specific project. It loads related data such as the project type, company, status, profile image, company owners, and addresses, allowing for a comprehensive view of the project's details.\n\n### Input Parameters\r\n- **project** (Project): The `Project` model instance representing the project whose details are being fetched for editing.\n\n### Method Logic\n\n1. **Loading Related Data**:\r\n- The method uses `load()` to eagerly load the following relationships for the project:\r\n- **Type**: The project type (with `id` and `name`).\r\n- **Company**: The company associated with the project (with `id` and `name`).\r\n- **Status**: The current status of the project (with `id`, `display_name`, and `background_color`).\r\n- **Profile Image**: The profile image associated with the project.\r\n- **Company Owners**: Information about the company owners, including:\r\n- Owner details (name, email, primary phone).\r\n- Owner profile images.\r\n- Owner roles (e.g., Admin, Manager).\r\n- **Main Address**: The main address of the project (with `id`, `name`, `address_line_1`, `latitude`, `longitude`, `zip_code`, etc.).\r\n- **Billing Address**: The billing address of the project (with similar details as the main address).\n\n2. **Return Response**:\r\n- The project data is wrapped in a `ProjectResource` and returned as a JSON response with status code `200 OK`, indicating successful retrieval of the project's details for editing.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**: A JSON object containing the full details of the project, including related data such as company, owners, addresses, and status.\r\n```json\r\n{\r\n\"id\": 123,\r\n\"name\": \"Project ABC\",\r\n\"description\": \"This is a project description.\",\r\n\"start_date\": \"2024-09-01\",\r\n\"end_date\": \"2024-12-31\",\r\n\"type\": {\r\n\"id\": 1,\r\n\"name\": \"Consulting\"\r\n},\r\n\"company\": {\r\n\"id\": 10,\r\n\"name\": \"Tech Solutions\",\r\n\"owners\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"Jane Smith\",\r\n\"email\": \"jane.smith@techsolutions.com\",\r\n\"primary_phone\": \"987-654-3210\",\r\n\"profile_image\": \"path/to/jane_smith.jpg\",\r\n\"roles\": [\r\n{\r\n\"id\": 1,\r\n\"name\": \"Admin\"\r\n}\r\n]\r\n}\r\n]\r\n},\r\n\"status\": {\r\n\"id\": 2,\r\n\"display_name\": \"In Progress\",\r\n\"background_color\": \"#FFD700\"\r\n},\r\n\"profile_image\": \"path/to/project_profile_image.jpg\",\r\n\"main_address\": {\r\n\"id\": 101,\r\n\"name\": \"Main Office\",\r\n\"address_line_1\": \"123 Main St\",\r\n\"latitude\": \"40.712776\",\r\n\"longitude\": \"-74.005974\",\r\n\"zip_code\": \"10001\",\r\n\"primary_email\": \"main.office@company.com\",\r\n\"primary_phone\": \"123-456-7890\"\r\n},\r\n\"billing_address\": {\r\n\"id\": 102,\r\n\"name\": \"Billing Office\",\r\n\"address_line_1\": \"456 Billing St\",\r\n\"latitude\": \"40.712776\",\r\n\"longitude\": \"-74.005974\",\r\n\"zip_code\": \"10002\",\r\n\"primary_email\": \"billing.office@company.com\",\r\n\"primary_phone\": \"987-654-3210\"\r\n}\r\n}",
        "summary": "## Edit project",
        "tags": [
          "CRM Project",
          "Project"
        ],
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "description": "The project ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/crm/projects/{modelId}/restore": {
      "patch": {
        "operationId": "admin.crm.projects.restore",
        "description": "### Description\r\nThis method restores a previously soft-deleted resource from the database. The resource is retrieved from the \"trashed\" or soft-deleted records and restored to its active state.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource that was soft-deleted and is to be restored.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Restore Resource**:\r\n- If the resource is found, the `restore()` method is called to undo the soft-delete and reactivate the resource.\n\n3. **Return Response**:\r\n- Upon successful restoration, the method returns a `204 No Content` response, indicating that the resource was restored successfully.\n\n4. **Error Handling**:\r\n- If an error occurs (such as the resource not being found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating that the resource was successfully restored.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: restore",
        "tags": [
          "CRM Project",
          "Project"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/crm/projects/{modelId}/force-delete": {
      "delete": {
        "operationId": "admin.crm.projects.force_delete",
        "description": "### Description\r\nThis method permanently deletes a soft-deleted resource from the database. Once a resource is force-deleted, it cannot be recovered.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource to be permanently deleted from storage.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Force Delete Resource**:\r\n- If the resource is found, the `forceDelete()` method is called to permanently remove it from the database.\n\n3. **Return Response**:\r\n- If the deletion is successful, the method returns a `204 No Content` response, indicating that the resource has been permanently deleted.\n\n4. **Error Handling**:\r\n- If an error occurs during the deletion process (e.g., the resource is not found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating the resource was successfully and permanently deleted.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: forceDelete",
        "tags": [
          "CRM Project",
          "Project"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/crm/projects/data-table": {
      "get": {
        "operationId": "admin.crm.projects.data_table",
        "tags": [
          "CRM Project DataTable",
          "DataTable"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/chats": {
      "post": {
        "operationId": "admin.chats.store",
        "description": "Description: Stores a new chat in the database.\n\nInput parameters: Chat data (participants, initial message, etc.).\n\nSuccessful response (201): Chat successfully created with chat details.\n\nPossible errors: Invalid input data, error saving to the database.‚ö†Ô∏èCannot generate request documentation: Attempt to read property \"id\" on null",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "Chat"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "chat": {
                      "type": "string"
                    },
                    "authUser": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "chat",
                    "authUser"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/chats/individual-chats": {
      "get": {
        "operationId": "admin.chats.get_individual_chats",
        "description": "Description: Retrieves a list of individual chats.\n\nInput parameters: Optional filters (pagination, search by name, etc.).\n\nSuccessful response (200): List of individual chats.\n\nPossible errors: Incorrect filters, lack of permissions.",
        "summary": "Get individual chats",
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "chats": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ChatResource"
                          }
                        }
                      },
                      "required": [
                        "chats"
                      ]
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "nextPageUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "nextPageUrl"
                      ]
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "authUserId": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "authUserId"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "links",
                    "meta"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/chats/group-chats": {
      "get": {
        "operationId": "admin.chats.get_group_chats",
        "description": "Description: Retrieves a list of group chats.\n\nInput parameters: Optional filters (pagination, search by name, etc.).\n\nSuccessful response (200): List of group chats.\n\nPossible errors: Incorrect filters, lack of permissions.",
        "summary": "Get group chats",
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "chats": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ChatResource"
                          }
                        }
                      },
                      "required": [
                        "chats"
                      ]
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "nextPageUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "nextPageUrl"
                      ]
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "authUserId": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "authUserId"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "links",
                    "meta"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/chats/work-order-chats": {
      "get": {
        "operationId": "admin.chats.get_work_order_chats",
        "description": "Description: Retrieves a list of chats related to work orders.\n\nInput parameters: Work order ID, optional filters.\n\nSuccessful response (200): List of chats linked to work orders.\n\nPossible errors: Work order not found, incorrect filters.",
        "summary": "Get work order chats",
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "chats": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ChatResource"
                          }
                        }
                      },
                      "required": [
                        "chats"
                      ]
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "nextPageUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "nextPageUrl"
                      ]
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "authUserId": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "authUserId"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "links",
                    "meta"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/chats/users-without-chat": {
      "get": {
        "operationId": "admin.chats.users_without_chat",
        "description": "Description: Retrieves a list of users that meet a specific criterion, such as users without a particular assignment or relationship.\n\nInput parameters: Filtering criteria (e.g., users without assigned roles).\n\nSuccessful response (200): List of users that meet the criterion.\n\nPossible errors: No results, invalid criteria.",
        "summary": "Get users without chat with auth user",
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/App.Http.Resources.Api.Tenant.Admin.User.UserResource"
                          }
                        }
                      },
                      "required": [
                        "users"
                      ]
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "nextPageUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "nextPageUrl"
                      ]
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "authUserId": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "authUserId"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "links",
                    "meta"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/chats/{chat}": {
      "delete": {
        "operationId": "admin.chats.destroy",
        "summary": "Delete the specified chat",
        "tags": [
          "Chat"
        ],
        "parameters": [
          {
            "name": "chat",
            "in": "path",
            "required": true,
            "description": "The chat ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Chat successfully deleted"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/chats/{chat}/messages": {
      "get": {
        "operationId": "admin.chats.messages.get",
        "description": "Used to get messages information of a especified chat",
        "summary": "Get messages from a chat",
        "tags": [
          "ChatMessage"
        ],
        "parameters": [
          {
            "name": "chat",
            "in": "path",
            "required": true,
            "description": "The chat ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MessageResource"
                          }
                        },
                        "chat": {
                          "$ref": "#/components/schemas/ChatResource"
                        }
                      },
                      "required": [
                        "messages",
                        "chat"
                      ]
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "nextPageUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "nextPageUrl"
                      ]
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "otherChatUserId": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "required": [
                        "otherChatUserId"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "links",
                    "meta"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "admin.chats.messages.delete",
        "description": "Used to delete information of a especified chat",
        "summary": "Delete messages from a chat",
        "tags": [
          "ChatMessage"
        ],
        "parameters": [
          {
            "name": "chat",
            "in": "path",
            "required": true,
            "description": "The chat ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/chats/{chat}/users": {
      "get": {
        "operationId": "admin.chats.users.get",
        "summary": "Get users in a chat",
        "tags": [
          "ChatUser"
        ],
        "parameters": [
          {
            "name": "chat",
            "in": "path",
            "required": true,
            "description": "The chat ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/App.Http.Resources.Api.Tenant.Admin.User.UserResource"
                          }
                        }
                      },
                      "required": [
                        "users"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "admin.chats.users.add",
        "description": "Description: Adds users to an existing chat.\n\nInput parameters: Chat ID, list of users to add.\n\nSuccessful response (200): Users successfully added to the chat.\n\nPossible errors: Chat not found, users already added, insufficient permissions.‚ö†Ô∏èCannot generate request documentation: Attempt to read property \"id\" on null",
        "summary": "Add users to a chat",
        "tags": [
          "ChatUser"
        ],
        "parameters": [
          {
            "name": "chat",
            "in": "path",
            "required": true,
            "description": "The chat ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "chat": {
                          "$ref": "#/components/schemas/ChatResource"
                        },
                        "message": {
                          "type": "string",
                          "example": "Users added to chat successfully"
                        },
                        "info_messages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MessageResource"
                          }
                        }
                      },
                      "required": [
                        "chat",
                        "message",
                        "info_messages"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.chats.users.remove",
        "summary": "Remove users from a chat",
        "tags": [
          "ChatUser"
        ],
        "parameters": [
          {
            "name": "chat",
            "in": "path",
            "required": true,
            "description": "The chat ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "users",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Users removed from chat successfully"
                        },
                        "info_messages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MessageResource"
                          }
                        }
                      },
                      "required": [
                        "message",
                        "info_messages"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/chats/{chat}/users/phone-numbers": {
      "get": {
        "operationId": "admin.chats.users.phone_numbers",
        "description": "Description: Retrieves the phone numbers of users in a specific chat.\n\nInput parameters: Chat ID.\n\nSuccessful response (200): List of phone numbers of users associated with the chat.\n\nPossible errors: Chat not found, no results.",
        "summary": "Get phone numbers of users in a chat",
        "tags": [
          "ChatUser"
        ],
        "parameters": [
          {
            "name": "chat",
            "in": "path",
            "required": true,
            "description": "The chat ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/App.Http.Resources.Api.Tenant.Admin.User.UserResource"
                          }
                        }
                      },
                      "required": [
                        "users"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/chats/{chat}/users/without-chat": {
      "get": {
        "operationId": "admin.chats.users.without_chat",
        "summary": "Retrieves the list of users who are not participating in a specific chat identified by its ID for the authenticated user",
        "tags": [
          "ChatUser"
        ],
        "parameters": [
          {
            "name": "chat",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/App.Http.Resources.Api.Tenant.Admin.User.UserResource"
                          }
                        }
                      },
                      "required": [
                        "users"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/landlord/admin/configurations/public": {
      "get": {
        "operationId": "landlord.admin.configurations.public",
        "description": "This endpoint is used to get information of the project public key",
        "summary": "Get public key daya",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "configurations": {
                          "type": "array",
                          "prefixItems": [
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "public_key"
                                },
                                "value": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name",
                                "value"
                              ]
                            }
                          ],
                          "minItems": 1,
                          "maxItems": 1,
                          "additionalItems": false
                        }
                      },
                      "required": [
                        "configurations"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/landlord/admin/auth/two-factor/confirm": {
      "post": {
        "operationId": "landlord.admin.auth.two_factor.confirm",
        "summary": "Enable two factor authentication for the user",
        "tags": [
          "Confirm"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/proposals/data-table": {
      "get": {
        "operationId": "admin.proposals.data_table",
        "tags": [
          "DataTable"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/proposals/services/{proposalId}/data-table": {
      "get": {
        "operationId": "admin.proposals.services.data_table",
        "tags": [
          "DataTable"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/work-orders/data-table": {
      "get": {
        "operationId": "admin.work_orders.data_table",
        "tags": [
          "DataTable"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/additional/addresses/data-table/{modelType}/{modelId}": {
      "get": {
        "operationId": "admin.additional.addresses.data_table",
        "tags": [
          "DataTable"
        ],
        "parameters": [
          {
            "name": "modelType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/additional/emails/data-table/{modelType}/{modelId}": {
      "get": {
        "operationId": "admin.additional.emails.data_table",
        "tags": [
          "DataTable"
        ],
        "parameters": [
          {
            "name": "modelType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/additional/phone-numbers/data-table/{modelType}/{modelId}": {
      "get": {
        "operationId": "admin.additional.phone_numbers.data_table",
        "tags": [
          "DataTable"
        ],
        "parameters": [
          {
            "name": "modelType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/additional/files/data-table/{modelType}/{modelId}": {
      "get": {
        "operationId": "admin.additional.files.data_table",
        "tags": [
          "DataTable"
        ],
        "parameters": [
          {
            "name": "modelType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/additional/notes/data-table/{modelType}/{modelId}": {
      "get": {
        "operationId": "admin.additional.notes.data_table",
        "tags": [
          "DataTable"
        ],
        "parameters": [
          {
            "name": "modelType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/users/data-table": {
      "get": {
        "operationId": "admin.users.data_table",
        "tags": [
          "DataTable"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/workflows/data-table": {
      "get": {
        "operationId": "admin.workflows.data_table",
        "tags": [
          "Datatable",
          "DataTable"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/additional/emails": {
      "post": {
        "operationId": "admin.additional.emails.store",
        "description": "Description: Stores a new email address in the system.\n\nInput parameters: Email address and related data.\n\nSuccessful response (200): Returns the created email with its assigned ID.\n\nPossible errors: Validation failures, data duplication.",
        "summary": "Store a newly created email resource in storage",
        "tags": [
          "Email"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email successfully created!"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/additional/emails/{additionalEmail}/show": {
      "get": {
        "operationId": "admin.additional.emails.show",
        "summary": "Returns a JSON object the specified email resource to display",
        "tags": [
          "Email"
        ],
        "parameters": [
          {
            "name": "additionalEmail",
            "in": "path",
            "required": true,
            "description": "The additional email ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "$ref": "#/components/schemas/EmailResource"
                        }
                      },
                      "required": [
                        "email"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/additional/emails/{additionalEmail}/edit": {
      "get": {
        "operationId": "admin.additional.emails.edit",
        "description": "Description: Retrieves the data of an email for editing.\n\nInput parameters: Email ID to edit.\n\nSuccessful response (200): Returns the current data of the email.\n\nPossible errors: Email not found, invalid ID.",
        "summary": "Show the form for editing the specified email resource",
        "tags": [
          "Email"
        ],
        "parameters": [
          {
            "name": "additionalEmail",
            "in": "path",
            "required": true,
            "description": "The additional email ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "$ref": "#/components/schemas/EmailResource"
                        }
                      },
                      "required": [
                        "email"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/additional/emails/{additionalEmail}": {
      "patch": {
        "operationId": "admin.additional.emails.update",
        "description": "Description: Updates an existing email address in the system.\n\nInput parameters: ID of the email and new data to update.\n\nSuccessful response (200): Returns the updated email.\n\nPossible errors: Validation failures, email not found.",
        "summary": "Update the specified email resource in storage",
        "tags": [
          "Email"
        ],
        "parameters": [
          {
            "name": "additionalEmail",
            "in": "path",
            "required": true,
            "description": "The additional email ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/EmailResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.additional.emails.destroy",
        "description": "Description: Deletes an email from the system.\n\nInput parameters: ID of the email to delete.\n\nSuccessful response (200): Confirms the deletion of the email.\n\nPossible errors: Email not found, invalid ID.",
        "summary": "Soft delete the specified email resource from storage",
        "tags": [
          "Email"
        ],
        "parameters": [
          {
            "name": "additionalEmail",
            "in": "path",
            "required": true,
            "description": "The additional email ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/EmailResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "example": "Can't delete main email !"
                        }
                      },
                      "required": [
                        "error"
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/additional/emails/by-model/{modelType}/{modelId}": {
      "get": {
        "operationId": "admin.additional.emails.by_model",
        "summary": "Get emails of a model",
        "tags": [
          "Email"
        ],
        "parameters": [
          {
            "name": "modelType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "emails": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/EmailResource"
                          }
                        }
                      },
                      "required": [
                        "emails"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/landlord/admin/auth/two-factor/enable": {
      "post": {
        "operationId": "landlord.admin.auth.two_factor.enable",
        "summary": "Enable two factor authentication for the user",
        "tags": [
          "Enable"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/events/calls": {
      "post": {
        "operationId": "admin.events.calls.store",
        "description": "Description: Stores a new call in the system.\n\nInput parameters: Call information (duration, participant, etc.).\n\nSuccessful response (200): Returns the created call with its assigned ID.\n\nPossible errors: Validation failures, data duplication.",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "Event Call",
          "Call"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Call successfully created!"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/events/calls/{call}": {
      "get": {
        "operationId": "admin.events.calls.show",
        "description": "Description: Shows the complete details of a specific call.\n\nInput parameters: Call ID.\n\nSuccessful response (200): Complete details of the call.\n\nPossible errors: Call not found.",
        "summary": "Show the specified resource",
        "tags": [
          "Event Call",
          "Call"
        ],
        "parameters": [
          {
            "name": "call",
            "in": "path",
            "required": true,
            "description": "The call ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "call": {
                          "$ref": "#/components/schemas/CallResource"
                        }
                      },
                      "required": [
                        "call"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "admin.events.calls.update",
        "description": "Description: Updates the details of an existing call.\n\nInput parameters: Call ID and new details.\n\nSuccessful response (200): Confirmation that the call has been updated.\n\nPossible errors: Call not found, invalid data.",
        "summary": "Update the specified resource in storage",
        "tags": [
          "Event Call",
          "Call"
        ],
        "parameters": [
          {
            "name": "call",
            "in": "path",
            "required": true,
            "description": "The call ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CallResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.events.calls.destroy",
        "description": "Description: Deletes a call from the system.\n\nInput parameters: Call ID to delete.\n\nSuccessful response (200): Confirmation that the call has been deleted.\n\nPossible errors: Call not found.",
        "summary": "Soft delete the specified resource from storage",
        "tags": [
          "Event Call",
          "Call"
        ],
        "parameters": [
          {
            "name": "call",
            "in": "path",
            "required": true,
            "description": "The call ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CallResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/events/calls/{call}/edit": {
      "get": {
        "operationId": "admin.events.calls.edit",
        "description": "Description: Retrieves the data of a specific call for editing.\n\nInput parameters: Call ID.\n\nSuccessful response (200): Call details for editing.\n\nPossible errors: Call not found.",
        "summary": "Show the form for editing the specified resource",
        "tags": [
          "Event Call",
          "Call"
        ],
        "parameters": [
          {
            "name": "call",
            "in": "path",
            "required": true,
            "description": "The call ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "call": {
                          "$ref": "#/components/schemas/CallResource"
                        }
                      },
                      "required": [
                        "call"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/events/calls/by-related-model/{relatedModelType}/{relatedModelId}": {
      "get": {
        "operationId": "admin.events.calls.by_related_model",
        "description": "Description: Retrieves all calls related to a specific model.\n\nInput parameters: Related model ID.\n\nSuccessful response (200): List of calls associated with the model.\n\nPossible errors: Model not found, no results.",
        "summary": "Get the calls by related model",
        "tags": [
          "Event Call",
          "Call"
        ],
        "parameters": [
          {
            "name": "relatedModelType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relatedModelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "calls": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CallResource"
                          }
                        },
                        "nextPageUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "calls",
                        "nextPageUrl"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/events/calls/{modelId}/restore": {
      "patch": {
        "operationId": "admin.events.calls.restore",
        "description": "### Description\r\nThis method restores a previously soft-deleted resource from the database. The resource is retrieved from the \"trashed\" or soft-deleted records and restored to its active state.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource that was soft-deleted and is to be restored.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Restore Resource**:\r\n- If the resource is found, the `restore()` method is called to undo the soft-delete and reactivate the resource.\n\n3. **Return Response**:\r\n- Upon successful restoration, the method returns a `204 No Content` response, indicating that the resource was restored successfully.\n\n4. **Error Handling**:\r\n- If an error occurs (such as the resource not being found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating that the resource was successfully restored.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: restore",
        "tags": [
          "Event Call",
          "Call"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/events/calls/{modelId}/force-delete": {
      "delete": {
        "operationId": "admin.events.calls.force_delete",
        "description": "### Description\r\nThis method permanently deletes a soft-deleted resource from the database. Once a resource is force-deleted, it cannot be recovered.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource to be permanently deleted from storage.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Force Delete Resource**:\r\n- If the resource is found, the `forceDelete()` method is called to permanently remove it from the database.\n\n3. **Return Response**:\r\n- If the deletion is successful, the method returns a `204 No Content` response, indicating that the resource has been permanently deleted.\n\n4. **Error Handling**:\r\n- If an error occurs during the deletion process (e.g., the resource is not found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating the resource was successfully and permanently deleted.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: forceDelete",
        "tags": [
          "Event Call",
          "Call"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/events/calls/data-table": {
      "get": {
        "operationId": "admin.events.calls.data_table",
        "tags": [
          "Event Call DataTable",
          "DataTable"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/events/emails": {
      "post": {
        "operationId": "admin.events.emails.store",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "Event Email",
          "Email"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email sent successfully!"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/events/emails/by-related-model/{relatedModelType}/{relatedModelId}": {
      "get": {
        "operationId": "admin.events.emails.by_related_model",
        "summary": "Get the emails by related model",
        "tags": [
          "Event Email",
          "Email"
        ],
        "parameters": [
          {
            "name": "relatedModelType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relatedModelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "emails": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/App.Http.Resources.Api.Tenant.Admin.Event.Email.EmailResource"
                          }
                        },
                        "nextPageUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "emails",
                        "nextPageUrl"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/events/meetings": {
      "post": {
        "operationId": "admin.events.meetings.store",
        "description": "Description: Stores a new meeting in the system.\n\nInput parameters: Meeting information (date, participants, agenda, etc.).\n\nSuccessful response (200): Returns the created meeting with its assigned ID.\n\nPossible errors: Validation failures, data duplication.",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "Event Meeting",
          "Meeting"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeetingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Meeting successfully created!"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/events/meetings/{meeting}": {
      "get": {
        "operationId": "admin.events.meetings.show",
        "description": "Description: Shows the complete details of a specific meeting.\n\nInput parameters: Meeting ID.\n\nSuccessful response (200): Complete details of the meeting.\n\nPossible errors: Meeting not found.",
        "summary": "Show the specified resource",
        "tags": [
          "Event Meeting",
          "Meeting"
        ],
        "parameters": [
          {
            "name": "meeting",
            "in": "path",
            "required": true,
            "description": "The meeting ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "meeting": {
                          "$ref": "#/components/schemas/MeetingResource"
                        }
                      },
                      "required": [
                        "meeting"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "admin.events.meetings.update",
        "description": "Description: Updates the details of an existing meeting.\n\nInput parameters: Meeting ID and new details.\n\nSuccessful response (200): Confirmation that the meeting has been updated.\n\nPossible errors: Meeting not found, invalid data.",
        "summary": "Update the specified resource in storage",
        "tags": [
          "Event Meeting",
          "Meeting"
        ],
        "parameters": [
          {
            "name": "meeting",
            "in": "path",
            "required": true,
            "description": "The meeting ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeetingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MeetingResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.events.meetings.destroy",
        "description": "Description: Deletes a meeting from the system.\n\nInput parameters: Meeting ID to delete.\n\nSuccessful response (200): Confirmation that the meeting has been deleted.\n\nPossible errors: Meeting not found.",
        "summary": "Soft delete the specified resource from storage",
        "tags": [
          "Event Meeting",
          "Meeting"
        ],
        "parameters": [
          {
            "name": "meeting",
            "in": "path",
            "required": true,
            "description": "The meeting ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MeetingResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/events/meetings/{meeting}/edit": {
      "get": {
        "operationId": "admin.events.meetings.edit",
        "description": "Description: Retrieves the data of a specific meeting for editing.\n\nInput parameters: Meeting ID.\n\nSuccessful response (200): Meeting details for editing.\n\nPossible errors: Meeting not found.",
        "summary": "Show the form for editing the specified resource",
        "tags": [
          "Event Meeting",
          "Meeting"
        ],
        "parameters": [
          {
            "name": "meeting",
            "in": "path",
            "required": true,
            "description": "The meeting ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "meeting": {
                          "$ref": "#/components/schemas/MeetingResource"
                        }
                      },
                      "required": [
                        "meeting"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/events/meetings/by-related-model/{relatedModelType}/{relatedModelId}": {
      "get": {
        "operationId": "admin.events.meetings.by_related_model",
        "summary": "Get the meetings by related model",
        "tags": [
          "Event Meeting",
          "Meeting"
        ],
        "parameters": [
          {
            "name": "relatedModelType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relatedModelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "meetings": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MeetingResource"
                          }
                        },
                        "nextPageUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "meetings",
                        "nextPageUrl"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/events/meetings/{modelId}/restore": {
      "patch": {
        "operationId": "admin.events.meetings.restore",
        "description": "### Description\r\nThis method restores a previously soft-deleted resource from the database. The resource is retrieved from the \"trashed\" or soft-deleted records and restored to its active state.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource that was soft-deleted and is to be restored.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Restore Resource**:\r\n- If the resource is found, the `restore()` method is called to undo the soft-delete and reactivate the resource.\n\n3. **Return Response**:\r\n- Upon successful restoration, the method returns a `204 No Content` response, indicating that the resource was restored successfully.\n\n4. **Error Handling**:\r\n- If an error occurs (such as the resource not being found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating that the resource was successfully restored.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: restore",
        "tags": [
          "Event Meeting",
          "Meeting"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/events/meetings/{modelId}/force-delete": {
      "delete": {
        "operationId": "admin.events.meetings.force_delete",
        "description": "### Description\r\nThis method permanently deletes a soft-deleted resource from the database. Once a resource is force-deleted, it cannot be recovered.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource to be permanently deleted from storage.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Force Delete Resource**:\r\n- If the resource is found, the `forceDelete()` method is called to permanently remove it from the database.\n\n3. **Return Response**:\r\n- If the deletion is successful, the method returns a `204 No Content` response, indicating that the resource has been permanently deleted.\n\n4. **Error Handling**:\r\n- If an error occurs during the deletion process (e.g., the resource is not found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating the resource was successfully and permanently deleted.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: forceDelete",
        "tags": [
          "Event Meeting",
          "Meeting"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/events/meetings/data-table": {
      "get": {
        "operationId": "admin.events.meetings.data_table",
        "tags": [
          "Event Meeting DataTable",
          "DataTable"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/events/my-tasks/all": {
      "get": {
        "operationId": "admin.events.my_tasks.all",
        "description": "Description: Retrieves the details of a specific task assigned to the current user.\n\nInput parameters: Task ID.\n\nSuccessful response (200): Details of the assigned task.\n\nPossible errors: Task not found.",
        "summary": "Return the tasks of the authenticated user",
        "tags": [
          "Event MyTask",
          "MyTask"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "tasks": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TaskResource"
                          }
                        }
                      },
                      "required": [
                        "tasks"
                      ]
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "next_page_url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "next_page_url"
                      ]
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "all_records": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "all_records"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "links",
                    "meta"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/events/reminders": {
      "post": {
        "operationId": "admin.events.reminders.store",
        "description": "Description: Stores a new reminder in the system.\n\nInput parameters: Reminder information (date, description, etc.).\n\nSuccessful response (200): Returns the created reminder with its assigned ID.\n\nPossible errors: Validation failures, data duplication.",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "Event Reminder",
          "Reminder"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReminderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Reminder successfully created!"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/events/reminders/{reminder}/edit": {
      "get": {
        "operationId": "admin.events.reminders.edit",
        "description": "Description: Retrieves the data of a specific reminder for editing.\n\nInput parameters: Reminder ID.\n\nSuccessful response (200): Reminder details for editing.\n\nPossible errors: Reminder not found.",
        "summary": "Show the form for editing the specified resource",
        "tags": [
          "Event Reminder",
          "Reminder"
        ],
        "parameters": [
          {
            "name": "reminder",
            "in": "path",
            "required": true,
            "description": "The reminder ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "reminder": {
                          "$ref": "#/components/schemas/ReminderResource"
                        }
                      },
                      "required": [
                        "reminder"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/events/reminders/{reminder}": {
      "patch": {
        "operationId": "admin.events.reminders.update",
        "description": "Description: Updates the details of an existing reminder.\n\nInput parameters: Reminder ID and new details.\n\nSuccessful response (200): Confirmation that the reminder has been updated.\n\nPossible errors: Reminder not found, invalid data.",
        "summary": "Update the specified resource in storage",
        "tags": [
          "Event Reminder",
          "Reminder"
        ],
        "parameters": [
          {
            "name": "reminder",
            "in": "path",
            "required": true,
            "description": "The reminder ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReminderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ReminderResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "The reminder can only be updated if it has not been sent"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.events.reminders.destroy",
        "description": "Description: Deletes a reminder from the system.\n\nInput parameters: Reminder ID to delete.\n\nSuccessful response (200): Confirmation that the reminder has been deleted.\n\nPossible errors: Reminder not found.",
        "summary": "Soft delete the specified resource from storage",
        "tags": [
          "Event Reminder",
          "Reminder"
        ],
        "parameters": [
          {
            "name": "reminder",
            "in": "path",
            "required": true,
            "description": "The reminder ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ReminderResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/events/reminders/by-related-model/{relatedModelType}/{relatedModelId}": {
      "get": {
        "operationId": "admin.events.reminders.by_related_model",
        "description": "Description: Retrieves all reminders related to a specific model.\n\nInput parameters: Related model ID.\n\nSuccessful response (200): List of reminders associated with the model.\n\nPossible errors: Model not found, no results.",
        "summary": "Get the reminders by related model",
        "tags": [
          "Event Reminder",
          "Reminder"
        ],
        "parameters": [
          {
            "name": "relatedModelType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relatedModelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "reminders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ReminderResource"
                          }
                        },
                        "nextPageUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "reminders",
                        "nextPageUrl"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/events/sms": {
      "post": {
        "operationId": "admin.events.sms.store",
        "description": "Description: Stores a new SMS in the system.\n\nInput parameters: SMS information (content, recipient, etc.).\n\nSuccessful response (200): Returns the created SMS with its assigned ID.\n\nPossible errors: Validation failures, data duplication.",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "Event SMS",
          "SMS"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SMSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "SMS successfully created!"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/events/sms/by-related-model/{relatedModelType}/{relatedModelId}": {
      "get": {
        "operationId": "admin.events.sms.by_related_model",
        "description": "Description: Retrieves all SMS messages related to a specific model.\n\nInput parameters: Related model ID.\n\nSuccessful response (200): List of SMS messages associated with the model.\n\nPossible errors: Model not found, no results.",
        "summary": "Get the sms by related model",
        "tags": [
          "Event SMS",
          "SMS"
        ],
        "parameters": [
          {
            "name": "relatedModelType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relatedModelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "sms": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SMSResource"
                          }
                        },
                        "nextPageUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "sms",
                        "nextPageUrl"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/events/tasks": {
      "post": {
        "operationId": "admin.events.tasks.store",
        "description": "Description: Stores a new task in the system.\n\nInput parameters: Task information (name, description, due date, etc.).\n\nSuccessful response (200): Returns the created task with its assigned ID.\n\nPossible errors: Validation failures, data duplication.",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "Event Task",
          "Task"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Task successfully created!"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/events/tasks/{task}": {
      "get": {
        "operationId": "admin.events.tasks.show",
        "description": "Description: Shows the complete details of a specific task.\n\nInput parameters: Task ID.\n\nSuccessful response (200): Complete details of the task.\n\nPossible errors: Task not found.",
        "summary": "Show the specified resource",
        "tags": [
          "Event Task",
          "Task"
        ],
        "parameters": [
          {
            "name": "task",
            "in": "path",
            "required": true,
            "description": "The task ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "task": {
                          "$ref": "#/components/schemas/TaskResource"
                        }
                      },
                      "required": [
                        "task"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "admin.events.tasks.update",
        "description": "Description: Updates the details of an existing task.\n\nInput parameters: Task ID and new details.\n\nSuccessful response (200): Confirmation that the task has been updated.\n\nPossible errors: Task not found, invalid data.",
        "summary": "Update the specified resource in storage",
        "tags": [
          "Event Task",
          "Task"
        ],
        "parameters": [
          {
            "name": "task",
            "in": "path",
            "required": true,
            "description": "The task ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TaskResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.events.tasks.destroy",
        "description": "Description: Deletes a task from the system.\n\nInput parameters: Task ID to delete.\n\nSuccessful response (200): Confirmation that the task has been deleted.\n\nPossible errors: Task not found.",
        "summary": "Soft delete the specified resource from storage",
        "tags": [
          "Event Task",
          "Task"
        ],
        "parameters": [
          {
            "name": "task",
            "in": "path",
            "required": true,
            "description": "The task ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TaskResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/events/tasks/{task}/edit": {
      "get": {
        "operationId": "admin.events.tasks.edit",
        "description": "Description: Retrieves the data of a specific task for editing.\n\nInput parameters: Task ID.\n\nSuccessful response (200): Details of the task for editing.\n\nPossible errors: Task not found.",
        "summary": "Show the form for editing the specified resource",
        "tags": [
          "Event Task",
          "Task"
        ],
        "parameters": [
          {
            "name": "task",
            "in": "path",
            "required": true,
            "description": "The task ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "task": {
                          "$ref": "#/components/schemas/TaskResource"
                        }
                      },
                      "required": [
                        "task"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/events/tasks/by-related-model/{relatedModelType}/{relatedModelId}": {
      "get": {
        "operationId": "admin.events.tasks.by_related_model",
        "description": "Description: Retrieves all tasks related to a specific model.\n\nInput parameters: Related model ID.\n\nSuccessful response (200): List of tasks associated with the model.\n\nPossible errors: Model not found, no results.",
        "summary": "Get the tasks by related model",
        "tags": [
          "Event Task",
          "Task"
        ],
        "parameters": [
          {
            "name": "relatedModelType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relatedModelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "tasks": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TaskResource"
                          }
                        },
                        "nextPageUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "tasks",
                        "nextPageUrl"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/events/tasks/{modelId}/restore": {
      "patch": {
        "operationId": "admin.events.tasks.restore",
        "description": "### Description\r\nThis method restores a previously soft-deleted resource from the database. The resource is retrieved from the \"trashed\" or soft-deleted records and restored to its active state.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource that was soft-deleted and is to be restored.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Restore Resource**:\r\n- If the resource is found, the `restore()` method is called to undo the soft-delete and reactivate the resource.\n\n3. **Return Response**:\r\n- Upon successful restoration, the method returns a `204 No Content` response, indicating that the resource was restored successfully.\n\n4. **Error Handling**:\r\n- If an error occurs (such as the resource not being found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating that the resource was successfully restored.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: restore",
        "tags": [
          "Event Task",
          "Task"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/events/tasks/{modelId}/force-delete": {
      "delete": {
        "operationId": "admin.events.tasks.force_delete",
        "description": "### Description\r\nThis method permanently deletes a soft-deleted resource from the database. Once a resource is force-deleted, it cannot be recovered.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource to be permanently deleted from storage.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Force Delete Resource**:\r\n- If the resource is found, the `forceDelete()` method is called to permanently remove it from the database.\n\n3. **Return Response**:\r\n- If the deletion is successful, the method returns a `204 No Content` response, indicating that the resource has been permanently deleted.\n\n4. **Error Handling**:\r\n- If an error occurs during the deletion process (e.g., the resource is not found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating the resource was successfully and permanently deleted.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: forceDelete",
        "tags": [
          "Event Task",
          "Task"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/events/tasks/data-table": {
      "get": {
        "operationId": "admin.events.tasks.data_table",
        "tags": [
          "Event Task DataTable",
          "DataTable"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/additional/files/{slug}/show": {
      "get": {
        "operationId": "admin.additional.files.show",
        "description": "Description: Displays the public information of a file.\n\nInput parameters: ID of the file.\n\nSuccessful response (200): Returns the public details of the file.\n\nPossible errors: File not found, access restrictions.",
        "summary": "Show public file",
        "tags": [
          "File"
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "file": {
                          "$ref": "#/components/schemas/FileResource"
                        }
                      },
                      "required": [
                        "file"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/additional/files": {
      "post": {
        "operationId": "admin.additional.files.store",
        "description": "Description: Retrieves a list of files in a tabular data format.\n\nInput parameters: Optional filters and pagination.\n\nSuccessful response (200): Returns a list of files with their details in tabular format.\n\nPossible errors: Invalid filter parameters.",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "File"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Files successfully created!"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/additional/files/{additionalFile}/edit": {
      "get": {
        "operationId": "admin.additional.files.edit",
        "summary": "Show the form for editing the specified resource",
        "tags": [
          "File"
        ],
        "parameters": [
          {
            "name": "additionalFile",
            "in": "path",
            "required": true,
            "description": "The additional file ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "file": {
                          "$ref": "#/components/schemas/FileResource"
                        }
                      },
                      "required": [
                        "file"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/additional/files/{additionalFile}": {
      "patch": {
        "operationId": "admin.additional.files.update",
        "summary": "Update the specified resource in storage",
        "tags": [
          "File"
        ],
        "parameters": [
          {
            "name": "additionalFile",
            "in": "path",
            "required": true,
            "description": "The additional file ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/FileResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.additional.files.destroy",
        "description": "Description: Deletes a file from the system.\n\nInput parameters: ID of the file.\n\nSuccessful response (200): Confirms the deletion of the file.\n\nPossible errors: File not found, deletion error.",
        "summary": "Soft delete the specified resource from storage",
        "tags": [
          "File"
        ],
        "parameters": [
          {
            "name": "additionalFile",
            "in": "path",
            "required": true,
            "description": "The additional file ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/FileResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "string",
                      "example": "The file cannot be deleted because it is being used in the proposal."
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/additional/files/{additionalFile}/update-auth": {
      "patch": {
        "operationId": "admin.additional.files.update_auth",
        "description": "Description: Updates the authentication permissions of a file.\n\nInput parameters: ID of the file, authentication permissions to update.\n\nSuccessful response (200): Returns the updated permissions of the file.\n\nPossible errors: File not found, validation failures.",
        "summary": "Update the specified resource is_public column in storage",
        "tags": [
          "File"
        ],
        "parameters": [
          {
            "name": "additionalFile",
            "in": "path",
            "required": true,
            "description": "The additional file ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "File successfully updated!"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/impersonate/{token}": {
      "get": {
        "operationId": "admin.impersonate",
        "description": "Description: Used to generate the session of an landlord user into tenants",
        "summary": "Impersonate a user and get an HTTP redirect response",
        "tags": [
          "Impersonation"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string"
                        },
                        "user": {
                          "$ref": "#/components/schemas/App.Http.Resources.Api.Tenant.Admin.User.UserResource"
                        },
                        "tenant_url": {
                          "type": "string"
                        },
                        "permissions": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "token",
                        "user",
                        "tenant_url",
                        "permissions"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/landlord/admin/leads/notify": {
      "post": {
        "operationId": "landlord.admin.leads.notify",
        "tags": [
          "Lead"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotifyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Lead has been notified successfully"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/logs/by-model/{modelType}/{modelId}": {
      "get": {
        "operationId": "admin.logs.by_model",
        "description": "Description: Used to get the timeline of an especified Model Type\n\nModel Types ('Company','Lead','Contact','AdditionalPhoneNumber',\r\n'Equipment','Labor','Vehicle','Material','AdditionalAddress','EmailTemplate','SMSTemplate','AdditionalFile'...)",
        "summary": "Get the logs by model",
        "tags": [
          "Log"
        ],
        "parameters": [
          {
            "name": "modelType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "logs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/LogResource"
                          }
                        },
                        "nextPageUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "logs",
                        "nextPageUrl"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/messages": {
      "post": {
        "operationId": "admin.messages.store",
        "description": "Description: Store a message.",
        "summary": "Store a message",
        "tags": [
          "Message"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "$ref": "#/components/schemas/MessageResource"
                        }
                      },
                      "required": [
                        "message"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/messages/send-sms": {
      "post": {
        "operationId": "admin.messages.send_sms",
        "description": "Description: Send a message.",
        "summary": "Send a message",
        "tags": [
          "Message"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SMSMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/models-owners": {
      "get": {
        "operationId": "admin.models_owners.get",
        "description": "Description: Retrieves information about the owner of a specific model.\n\nInput parameters: Model ID.\n\nSuccessful response (200): Details of the model owner, such as name, contact, and any other relevant information.\n\nPossible errors: Model not found, no owner assigned.",
        "summary": "get owners for model",
        "tags": [
          "ModelOwner"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/App.Http.Resources.Api.Tenant.Admin.User.UserResource"
                      }
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/additional/notes": {
      "post": {
        "operationId": "admin.additional.notes.store",
        "description": "Description: Stores a new note in the system.\n\nInput parameters: Content of the note and related data.\n\nSuccessful response (200): Returns the created note with its assigned ID.\n\nPossible errors: Validation failures, data duplication.",
        "summary": "Store a newly created Note resource in storage",
        "tags": [
          "Note"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NoteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Note successfully created!"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/additional/notes/{additionalNote}/show": {
      "get": {
        "operationId": "admin.additional.notes.show",
        "description": "Description: Displays the details of a specific note.\n\nInput parameters: ID of the note to query.\n\nSuccessful response (200): Returns the details of the requested note.\n\nPossible errors: Note not found, invalid ID.",
        "summary": "Returns a JSON object of the specified Note resource to display",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "name": "additionalNote",
            "in": "path",
            "required": true,
            "description": "The additional note ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "note": {
                          "$ref": "#/components/schemas/NoteResource"
                        }
                      },
                      "required": [
                        "note"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/additional/notes/{additionalNote}/edit": {
      "get": {
        "operationId": "admin.additional.notes.edit",
        "description": "Description: Retrieves the data of a note for editing.\n\nInput parameters: ID of the note to edit.\n\nSuccessful response (200): Returns the current data of the note.\n\nPossible errors: Note not found, invalid ID.",
        "summary": "Show the form for editing the specified Note resource",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "name": "additionalNote",
            "in": "path",
            "required": true,
            "description": "The additional note ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "Note": {
                          "$ref": "#/components/schemas/NoteResource"
                        }
                      },
                      "required": [
                        "Note"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/additional/notes/{additionalNote}": {
      "patch": {
        "operationId": "admin.additional.notes.update",
        "description": "Description: Updates an existing note in the system.\n\nInput parameters: ID of the note and new data to update.\n\nSuccessful response (200): Returns the updated note.\n\nPossible errors: Validation failures, note not found.",
        "summary": "Update the specified Note resource in storage",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "name": "additionalNote",
            "in": "path",
            "required": true,
            "description": "The additional note ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NoteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NoteResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.additional.notes.destroy",
        "description": "Description: Deletes a note from the system.\n\nInput parameters: ID of the note to delete.\n\nSuccessful response (200): Confirms the deletion of the note.\n\nPossible errors: Note not found, invalid ID.",
        "summary": "Soft delete the specified Note resource from storage",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "name": "additionalNote",
            "in": "path",
            "required": true,
            "description": "The additional note ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NoteResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "example": "Can't delete main Note !"
                        }
                      },
                      "required": [
                        "error"
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/pdf/proposals/{proposal}/generate": {
      "post": {
        "operationId": "admin.pdf.proposals.generate",
        "description": "This method dispatches a job to generate the proposal PDF asynchronously.\r\nThe job is added to the 'high' priority queue.",
        "summary": "Generate Proposal PDF using the specified Proposal object",
        "tags": [
          "PDF"
        ],
        "parameters": [
          {
            "name": "proposal",
            "in": "path",
            "required": true,
            "description": "The proposal object",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "proposal"
                        },
                        "id": {
                          "type": "string"
                        },
                        "attributes": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "example": "PDF generation in progress"
                            }
                          },
                          "required": [
                            "status"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "id",
                        "attributes"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/pdf/work-orders/{workOrder}/generate": {
      "post": {
        "operationId": "admin.pdf.work_orders.generate",
        "description": "This method dispatches a job to generate the work order PDF asynchronously.\r\nThe job is added to the 'high' priority queue.",
        "summary": "Generate Work Order PDF using the specified Work Order object",
        "tags": [
          "PDF"
        ],
        "parameters": [
          {
            "name": "workOrder",
            "in": "path",
            "required": true,
            "description": "The work order object.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Work Order PDF is being generated."
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/pdf/invoices/{invoice}/generate": {
      "post": {
        "operationId": "admin.pdf.invoices.generate",
        "description": "This method dispatches a job to generate the invoice PDF asynchronously.\r\nThe job is added to the 'high' priority queue.",
        "summary": "Generates an invoice PDF using the specified Invoice object",
        "tags": [
          "PDF"
        ],
        "parameters": [
          {
            "name": "invoice",
            "in": "path",
            "required": true,
            "description": "The Invoice object used for generating the PDF.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invoice PDF is being generated."
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/additional/phone-numbers": {
      "post": {
        "operationId": "admin.additional.phone_numbers.store",
        "description": "Description: Stores a new phone number in the system.\n\nInput parameters: Phone number and related data.\n\nSuccessful response (200): Returns the created phone number with its assigned ID.\n\nPossible errors: Validation failures, data duplication.",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "PhoneNumber"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Phone number successfully created!"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/additional/phone-numbers/{additionalPhoneNumber}/show": {
      "get": {
        "operationId": "admin.additional.phone_numbers.show",
        "description": "Description: Displays the details of a specific phone number.\n\nInput parameters: ID of the phone number to query.\n\nSuccessful response (200): Returns the details of the requested phone number.\n\nPossible errors: Phone number not found, invalid ID.",
        "summary": "Returns a JSON object of the specified resource to display",
        "tags": [
          "PhoneNumber"
        ],
        "parameters": [
          {
            "name": "additionalPhoneNumber",
            "in": "path",
            "required": true,
            "description": "The additional phone number ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "phone_number": {
                          "$ref": "#/components/schemas/PhoneNumberResource"
                        }
                      },
                      "required": [
                        "phone_number"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/additional/phone-numbers/{additionalPhoneNumber}/edit": {
      "get": {
        "operationId": "admin.additional.phone_numbers.edit",
        "description": "Description: Retrieves the data of a phone number for editing.\n\nInput parameters: ID of the phone number to edit.\n\nSuccessful response (200): Returns the current data of the phone number.\n\nPossible errors: Phone number not found, invalid ID.",
        "summary": "Show the form for editing the specified resource",
        "tags": [
          "PhoneNumber"
        ],
        "parameters": [
          {
            "name": "additionalPhoneNumber",
            "in": "path",
            "required": true,
            "description": "The additional phone number ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "phone_number": {
                          "$ref": "#/components/schemas/PhoneNumberResource"
                        }
                      },
                      "required": [
                        "phone_number"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/additional/phone-numbers/{additionalPhoneNumber}": {
      "patch": {
        "operationId": "admin.additional.phone_numbers.update",
        "description": "Description: Updates an existing phone number in the system.\n\nInput parameters: ID of the phone number and new data to update.\n\nSuccessful response (200): Returns the updated phone number.\n\nPossible errors: Validation failures, phone number not found.",
        "summary": "Update the specified resource in storage",
        "tags": [
          "PhoneNumber"
        ],
        "parameters": [
          {
            "name": "additionalPhoneNumber",
            "in": "path",
            "required": true,
            "description": "The additional phone number ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PhoneNumberResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.additional.phone_numbers.destroy",
        "description": "Description: Deletes a phone number from the system.\n\nInput parameters: ID of the phone number to delete.\n\nSuccessful response (200): Confirms the deletion of the phone number.\n\nPossible errors: Phone number not found, invalid ID.",
        "summary": "Soft delete the specified resource from storage",
        "tags": [
          "PhoneNumber"
        ],
        "parameters": [
          {
            "name": "additionalPhoneNumber",
            "in": "path",
            "required": true,
            "description": "The additional phone number ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PhoneNumberResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "example": "Can't delete main phone number !"
                        }
                      },
                      "required": [
                        "error"
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/additional/phone-numbers/by-model/{modelType}/{modelId}": {
      "get": {
        "operationId": "admin.additional.phone_numbers.by_model",
        "summary": "Get phone numbers of a model",
        "tags": [
          "PhoneNumber"
        ],
        "parameters": [
          {
            "name": "modelType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "phoneNumbers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PhoneNumberResource"
                          }
                        }
                      },
                      "required": [
                        "phoneNumbers"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/proposals": {
      "post": {
        "operationId": "admin.proposals.store",
        "description": "Description: Stores a new proposal in the system.\n\nInput parameters: Proposal information (name, description, budget, dates, etc.).\n\nSuccessful response (201): Proposal created with its assigned ID.\n\nPossible errors: Validation failures, data duplication.",
        "summary": "Store a newly created proposal resource in storage",
        "tags": [
          "Proposal"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProposalRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiSaveResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/proposals/{proposal}": {
      "get": {
        "operationId": "admin.proposals.show",
        "description": "Description: Displays the complete details of a specific proposal.\n\nInput parameters: ID of the proposal.\n\nSuccessful response (200): Complete details of the proposal.\n\nPossible errors: Proposal not found, lack of permissions.",
        "summary": "Show the form for editing the specified proposal resource",
        "tags": [
          "Proposal"
        ],
        "parameters": [
          {
            "name": "proposal",
            "in": "path",
            "required": true,
            "description": "The proposal ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "patch": {
        "operationId": "admin.proposals.update",
        "description": "Description: Updates the information of an existing proposal.\n\nInput parameters: ID of the proposal and updated data.\n\nSuccessful response (200): Proposal successfully updated.\n\nPossible errors: Validation failures, proposal not found.",
        "summary": "Update the specified proposal resource in storage",
        "tags": [
          "Proposal"
        ],
        "parameters": [
          {
            "name": "proposal",
            "in": "path",
            "required": true,
            "description": "The proposal ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProposalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "409": {
            "description": "An error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error overview.",
                      "example": "The proposal cannot be modified because it has already been approved."
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.proposals.destroy",
        "description": "Description: Removes a proposal (soft delete, temporary removal).\n\nInput parameters: ID of the proposal.\n\nSuccessful response (204): Proposal temporarily removed.\n\nPossible errors: Proposal not found.",
        "summary": "Remove the specified proposal resource from storage",
        "tags": [
          "Proposal"
        ],
        "parameters": [
          {
            "name": "proposal",
            "in": "path",
            "required": true,
            "description": "The proposal ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/proposals/{proposal}/edit": {
      "get": {
        "operationId": "admin.proposals.edit",
        "description": "Description: Provides the necessary information to edit a proposal.\n\nInput parameters: ID of the proposal.\n\nSuccessful response (200): Proposal data ready for editing.\n\nPossible errors: Proposal not found, lack of permissions.",
        "summary": "Send useful data to the info edit view",
        "tags": [
          "Proposal"
        ],
        "parameters": [
          {
            "name": "proposal",
            "in": "path",
            "required": true,
            "description": "The proposal ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/proposals/{proposal}/terms-and-conditions": {
      "put": {
        "operationId": "admin.proposals.terms_and_conditions.update",
        "description": "Description: Updates the terms and conditions of the given proposal.\n\nInput parameters:\r\n- `terms_and_conditions` (string, required): The updated terms and conditions for the proposal.\n\nSuccessful response (200): Returns the updated proposal resource with the new terms and conditions.\n\nPossible errors:\r\n- 422 Unprocessable Entity: If validation fails or there is an issue updating the proposal.",
        "summary": "Update the terms and conditions of the specified proposal",
        "tags": [
          "Proposal"
        ],
        "parameters": [
          {
            "name": "proposal",
            "in": "path",
            "required": true,
            "description": "The proposal ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TermsAndConditionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/proposals/{modelId}/restore": {
      "patch": {
        "operationId": "admin.proposals.restore",
        "description": "### Description\r\nThis method restores a previously soft-deleted resource from the database. The resource is retrieved from the \"trashed\" or soft-deleted records and restored to its active state.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource that was soft-deleted and is to be restored.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Restore Resource**:\r\n- If the resource is found, the `restore()` method is called to undo the soft-delete and reactivate the resource.\n\n3. **Return Response**:\r\n- Upon successful restoration, the method returns a `204 No Content` response, indicating that the resource was restored successfully.\n\n4. **Error Handling**:\r\n- If an error occurs (such as the resource not being found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating that the resource was successfully restored.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: restore",
        "tags": [
          "Proposal"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/proposals/{modelId}/force-delete": {
      "delete": {
        "operationId": "admin.proposals.force_delete",
        "description": "### Description\r\nThis method permanently deletes a soft-deleted resource from the database. Once a resource is force-deleted, it cannot be recovered.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource to be permanently deleted from storage.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Force Delete Resource**:\r\n- If the resource is found, the `forceDelete()` method is called to permanently remove it from the database.\n\n3. **Return Response**:\r\n- If the deletion is successful, the method returns a `204 No Content` response, indicating that the resource has been permanently deleted.\n\n4. **Error Handling**:\r\n- If an error occurs during the deletion process (e.g., the resource is not found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating the resource was successfully and permanently deleted.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: forceDelete",
        "tags": [
          "Proposal"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/proposals/{proposal}/preview": {
      "get": {
        "operationId": "admin.proposals.preview",
        "description": "Description: Retrieves detailed information about the specified proposal, including project addresses, company details, services, and related resources.\n\nInput parameters:\r\n- `proposal` (Proposal, required): The proposal resource for which the preview is requested.\n\nSuccessful response (200): Returns the detailed proposal data, including associated project and company addresses, services, and more.\n\nPossible errors:\r\n- 422 Unprocessable Entity: If there is an issue processing the request.",
        "summary": "Displays the preview of the specified proposal resource",
        "tags": [
          "ProposalDetail"
        ],
        "parameters": [
          {
            "name": "proposal",
            "in": "path",
            "required": true,
            "description": "The proposal ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalPreviewResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/proposals/services": {
      "post": {
        "operationId": "admin.proposals.services.store",
        "description": "Description:\r\nThis endpoint allows adding a new service to an existing proposal by providing the proposal ID and service ID.\r\nOptionally, a company ID can be associated with the proposal service.\n\nInput Parameters:\r\n- proposal_id (int, required): The ID of the proposal to which the service will be added.\r\n- service_id (int, required): The ID of the service to be linked with the proposal.\r\n- company_id (int, optional): The ID of the company, if applicable, to be linked to the proposal service.\n\nSuccessful Response (201):\r\n- Returns a JSON API resource with the newly created proposal service and its relationships.\n\nPossible Errors:\r\n- Validation errors (e.g., missing or invalid `proposal_id`, `service_id`, or `company_id`).\r\n- Unprocessable Entity (422) if the service cannot be linked due to other constraints.",
        "summary": "Store a new service in the proposal",
        "tags": [
          "ProposalService"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProposalServiceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/proposals/services/{proposalService}": {
      "delete": {
        "operationId": "admin.proposals.services.destroy",
        "description": "Description: Deletes a specific service associated with a proposal.\n\nInput parameters:\r\n- `proposalService`: ID of the proposal service to be deleted.\n\nSuccessful response (204 No Content): The service has been successfully removed.\n\nPossible errors:\r\n- 422 Unprocessable Entity: Error during deletion.",
        "summary": "Remove a service from a proposal",
        "tags": [
          "ProposalService"
        ],
        "parameters": [
          {
            "name": "proposalService",
            "in": "path",
            "required": true,
            "description": "The proposal service ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/proposals/services/{serviceId}/edit": {
      "get": {
        "operationId": "admin.proposals.services.edit",
        "description": "Description: Retrieves details of a specific proposal service, including the related service and any associated materials.\n\nInput parameters:\r\n- `serviceId` (int, required): The ID of the proposal service to retrieve.\n\nSuccessful response (200): The proposal service data, including the associated service details and materials.\n\nPossible errors:\r\n- 404: If the proposal service with the provided ID does not exist.",
        "summary": "Get a specific proposal service for editing",
        "tags": [
          "ProposalService"
        ],
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalServiceResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/proposals/services/{proposalService}/wording/get-predefined": {
      "get": {
        "operationId": "admin.proposals.services.wording.get-predefined",
        "description": "This endpoint fetches the predefined wording associated with the given proposal service.\n\n\nSuccess Response:\r\n- HTTP 200 OK: Returns the service wording in a structured JSON format.\n\nError Response:\r\n- HTTP 422 Unprocessable Entity: Returns an error message if something goes wrong while retrieving the data.",
        "summary": "Retrieve the predefined wording for a specific service",
        "tags": [
          "ProposalService"
        ],
        "parameters": [
          {
            "name": "proposalService",
            "in": "path",
            "required": true,
            "description": "The proposal service instance for which to get the predefined wording.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/proposals/services/{proposalService}/wording": {
      "get": {
        "operationId": "admin.proposals.services.wording.get",
        "description": "This method fetches the wording associated with a given proposal service ID, allowing clients to obtain\r\nany predefined description or notes that have been set for that service.",
        "summary": "Retrieve the predefined wording for a specific proposal service",
        "tags": [
          "ProposalService"
        ],
        "parameters": [
          {
            "name": "proposalService",
            "in": "path",
            "required": true,
            "description": "The ID of the proposal service for which the wording is being requested.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalServiceResource"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/proposals/services/{proposalService}/wording/save": {
      "post": {
        "operationId": "admin.proposals.services.wording.save",
        "description": "Updates the wording of a specific proposal service using the validated request data.\r\nThe method then refreshes the proposal service data to ensure it returns the latest values.",
        "summary": "Save the updated wording for a proposal service",
        "tags": [
          "ProposalService"
        ],
        "parameters": [
          {
            "name": "proposalService",
            "in": "path",
            "required": true,
            "description": "The proposal service to be updated.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProposalWordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalServiceResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/proposals/services/{proposalService}/summary": {
      "get": {
        "operationId": "admin.proposals.services.summary.get",
        "description": "Fetches a detailed summary of a proposal service, including related materials and resource types.\r\nThe summary includes fields like subtotal, overhead profit, profit, discount, total, and relationships\r\nwith materials and resource types.",
        "summary": "Retrieve the summary of a specific proposal service",
        "tags": [
          "ProposalService"
        ],
        "parameters": [
          {
            "name": "proposalService",
            "in": "path",
            "required": true,
            "description": "The ID of the proposal service for which the summary is being requested.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalSummaryResource"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/proposals/services/{proposalService}/update-profit": {
      "patch": {
        "operationId": "admin.proposals.services.update_profit",
        "description": "Updates the profit value for a specific proposal service using the validated request data.",
        "summary": "Update the profit of a proposal service",
        "tags": [
          "ProposalService"
        ],
        "parameters": [
          {
            "name": "proposalService",
            "in": "path",
            "required": true,
            "description": "The proposal service to be updated.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfitRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalServiceResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/proposals/services/{proposalService}/update-discount": {
      "patch": {
        "operationId": "admin.proposals.services.update_discount",
        "description": "Updates the discount value for a specific proposal service using the validated request data.",
        "summary": "Update the discount of a proposal service",
        "tags": [
          "ProposalService"
        ],
        "parameters": [
          {
            "name": "proposalService",
            "in": "path",
            "required": true,
            "description": "The proposal service to be updated.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDiscountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalServiceResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/proposals/services/materials": {
      "post": {
        "operationId": "admin.proposals.services.materials.save",
        "description": "Description: This endpoint allows saving or updating a material associated with a proposal service.\r\nIf the material already exists (based on the `id` provided), it will be updated, otherwise a new one will be created.\n\nInput parameters:\r\n- `total` (numeric): The total cost of the material (required).\r\n- `resource_values` (array): Additional resource data such as `unit_cost`, `profit`, etc. (required).\r\n- `proposal_service_id` (numeric): The ID of the proposal service to which the material is associated (required).\n\nExample request payload:\r\n```json\r\n{\r\n  \"total\": 500.00,\r\n  \"resource_values\": {\r\n    \"unit_cost\": 100,\r\n    \"profit\": 50\r\n  },\r\n  \"proposal_service_id\": 15\r\n}\r\n```",
        "summary": "Save a specific proposal service material",
        "tags": [
          "ProposalServiceMaterial"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProposalServiceMaterialRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalServiceMaterialResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/proposals/services/materials/{proposalServiceMaterialId}/edit": {
      "get": {
        "operationId": "admin.proposals.services.materials.edit",
        "description": "Description: This endpoint retrieves the details of a specific service material linked to a proposal service.",
        "summary": "Retrieve a specific proposal service material",
        "tags": [
          "ProposalServiceMaterial"
        ],
        "parameters": [
          {
            "name": "proposalServiceMaterialId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalServiceMaterialResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/proposals/services/materials/{proposalServiceMaterial}": {
      "delete": {
        "operationId": "admin.proposals.services.materials.destroy",
        "tags": [
          "ProposalServiceMaterial"
        ],
        "parameters": [
          {
            "name": "proposalServiceMaterial",
            "in": "path",
            "required": true,
            "description": "The proposal service material ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/proposals/services/resource-types": {
      "post": {
        "operationId": "admin.proposals.services.resource_types.save",
        "description": "Description: This endpoint updates or creates a resource type for a specific proposal service.\n\nInput parameters:\r\n- `proposal_service_id`: The ID of the proposal service that the resource type belongs to.\r\n- `resource_id` (optional): ID of the associated resource, if applicable.\r\n- `quantity`: Quantity of the resource used.\r\n- `rate_per_hour`: Rate per hour for the resource.\r\n- `days`: Number of days for which the resource is required.\r\n- `hours`: Number of hours per day for the resource usage.\r\n- `total`: The total cost for the resource.\r\n- `other_name` (optional): Custom name for the resource if no `resource_id` is provided.\r\n- `type_id`: The ID of the resource type if not using `other_name`.\n\nSuccessful response (201): The resource type was successfully saved or updated.\n\nPossible errors:\r\n- `422 Unprocessable Entity`: Returned if validation fails or if there's an error during the process.\n\nTransaction management: This operation is wrapped in a database transaction to ensure data integrity.",
        "summary": "Save a specific proposal service material",
        "tags": [
          "ProposalServiceResourceType"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProposalServiceResourceTypeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/proposals/services/resource-types/{proposalServiceId}/edit": {
      "get": {
        "operationId": "admin.proposals.services.resource_types.edit",
        "description": "Description: Retrieves all resource types (materials, labor, etc.) associated with a given proposal service.\n\nInput parameters:\r\n- `proposalServiceId` (int): The ID of the proposal service whose resource types are being retrieved.\n\nSuccessful response (200):\r\nReturns a collection of resource types linked to the specified proposal service, each with its associated type information.\n\nPossible errors:\r\n- 404 Not Found: The specified `proposalServiceId` does not exist.",
        "summary": "Get all resource types of a specific proposal service",
        "tags": [
          "ProposalServiceResourceType"
        ],
        "parameters": [
          {
            "name": "proposalServiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalServiceResourceTypeResource"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/proposals/services/resource-types/{proposalServiceResourceType}": {
      "delete": {
        "operationId": "admin.proposals.services.resource_types.destroy",
        "description": "Deletes the given proposal service resource type from the system.\r\nThis operation is wrapped in a database transaction to ensure data consistency.",
        "summary": "Remove the specified resource from storage",
        "tags": [
          "ProposalServiceResourceType"
        ],
        "parameters": [
          {
            "name": "proposalServiceResourceType",
            "in": "path",
            "required": true,
            "description": "The resource to be deleted.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "example": 204
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/proposals/services/subservices": {
      "post": {
        "operationId": "admin.proposals.services.subservices.save",
        "description": "This endpoint allows you to either create or update a subservice linked to a proposal service.\r\nIt accepts the details of the subservice, validates the input, and either creates a new\r\nsubservice record or updates an existing one.\r\nPossible Errors:\r\n- 422 Unprocessable Entity: Occurs when there are validation errors or issues during the request processing.",
        "summary": "Save a specific proposal service subservice",
        "tags": [
          "ProposalServiceSubservice"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProposalServiceSubserviceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalServiceResourceSubservice"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/proposals/services/subservices/{proposalServiceId}/edit": {
      "get": {
        "operationId": "admin.proposals.services.subservices.edit",
        "description": "Description: This endpoint allows retrieving all subservices linked to a specific proposal service.\r\nIt returns detailed information about each subservice, including cost, quantity, and related metadata.",
        "summary": "Retrieve the subservices linked to a specific proposal service",
        "tags": [
          "ProposalServiceSubservice"
        ],
        "parameters": [
          {
            "name": "proposalServiceId",
            "in": "path",
            "required": true,
            "description": "The ID of the proposal service for which to retrieve subservices.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalServiceResourceSubservice"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/proposals/services/subservices/{proposalServiceSubservice}": {
      "delete": {
        "operationId": "admin.proposals.services.subservices.destroy",
        "description": "Deletes the subservice associated with a given proposal service.\n\n\n\nSuccess Response:\r\n- Status: 204 No Content (The resource was successfully deleted, no additional content returned).\n\nError Response:\r\n- Status: 422 Unprocessable Entity (If there is any issue during deletion, such as database errors).",
        "summary": "Remove the specified subservice from a proposal service",
        "tags": [
          "ProposalServiceSubservice"
        ],
        "parameters": [
          {
            "name": "proposalServiceSubservice",
            "in": "path",
            "required": true,
            "description": "The proposal service subservice ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/landlord/admin/auth/two-factor/qr-code": {
      "get": {
        "operationId": "landlord.admin.auth.two_factor.qr-code",
        "summary": "Get the SVG element for the user's two factor authentication QR code",
        "tags": [
          "QrCode"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "svg": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "svg",
                        "url"
                      ]
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 0,
                      "maxItems": 0,
                      "additionalItems": false
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/roles/all": {
      "get": {
        "operationId": "admin.roles.all",
        "description": "Returns all existing stored roles",
        "summary": "Returns the roles",
        "tags": [
          "Role"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "roles": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/RoleResource"
                          }
                        }
                      },
                      "required": [
                        "roles"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/services/get-by-category": {
      "get": {
        "operationId": "admin.services.get_by_category",
        "description": "Description: Get the information of all the services an his categories",
        "summary": "Get the services by category",
        "tags": [
          "Service"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/services/{serviceId}/get-constants": {
      "get": {
        "operationId": "admin.services.get_constants",
        "summary": "Get the resource service constants",
        "tags": [
          "ServiceConstants"
        ],
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "constants": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ServiceConstantsResource"
                          }
                        }
                      },
                      "required": [
                        "constants"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/sub-services/{serviceId}/{subcategoryId}/get-by-subcategory": {
      "get": {
        "operationId": "admin.sub_services.get_subservice_by_subcategory",
        "summary": "Get the services by category",
        "tags": [
          "Subservice"
        ],
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "subcategoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/system/categories/get-by-module/{module}": {
      "get": {
        "operationId": "admin.system.categories.get_by_module",
        "description": "Description: Retrieves categories filtered by module.\n\nInput parameters: Module ID.\n\nSuccessful response (200): List of categories associated with the module.\n\nPossible errors: Module not found, no results.",
        "summary": "Get categories by module",
        "tags": [
          "System Category",
          "Category"
        ],
        "parameters": [
          {
            "name": "module",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/system/localization/cities/get-by-state/{stateId}": {
      "get": {
        "operationId": "admin.system.localization.cities.get_by_state",
        "description": "Description: Retrieves cities filtered by state.\n\nInput parameters: State ID.\n\nSuccessful response (200): List of cities associated with the state.\n\nPossible errors: State not found, no results.",
        "summary": "Get all cities by states id",
        "tags": [
          "System Localization City",
          "City"
        ],
        "parameters": [
          {
            "name": "stateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/system/localization/states/get-by-country/{countryId}": {
      "get": {
        "operationId": "admin.system.localization.states.get_by_country",
        "description": "Description: Get the info of all the states related with a country id.",
        "summary": "Get all states by country id",
        "tags": [
          "System Localization State",
          "State"
        ],
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/system/statuses/get-by-module/{module}": {
      "get": {
        "operationId": "admin.system.statuses.get_by_module",
        "description": "Description: Retrieves states filtered by module.\n\nInput parameters: Module ID.\n\nSuccessful response (200): List of states associated with the module.\n\nPossible errors: Module not found, no results.",
        "summary": "get statuses by module",
        "tags": [
          "System Status",
          "Status"
        ],
        "parameters": [
          {
            "name": "module",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "statuses": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StatusResource"
                          }
                        }
                      },
                      "required": [
                        "statuses"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/system/statuses/change-model": {
      "patch": {
        "operationId": "admin.system.statuses.change_model",
        "description": "Description: Changes the status of an item.\n\nInput parameters: Item ID and the new status.\n\nSuccessful response (200): Confirmation that the status has been updated.\n\nPossible errors: Item not found, invalid status.",
        "summary": "Change the status of a model",
        "tags": [
          "System Status",
          "Status"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "$ref": "#/components/schemas/StatusResource"
                        }
                      },
                      "required": [
                        "status"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/system/subcategories/get-by-service/{service}": {
      "get": {
        "operationId": "admin.system.subcategories.get_by_service",
        "description": "Description: Retrieves subcategories filtered by service.\n\nInput parameters: Service ID.\n\nSuccessful response (200): List of subcategories associated with the service.\n\nPossible errors: Service not found, no results.",
        "summary": "Get the subcategories by service id",
        "tags": [
          "System Subcategory",
          "Subcategory"
        ],
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "The service ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "subcategories": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SubcategoryResource"
                          }
                        }
                      },
                      "required": [
                        "subcategories"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/system/tags/get-by-module/{module}": {
      "get": {
        "operationId": "admin.system.tags.get_by_module",
        "description": "Description: Retrieves tags filtered by module.\n\nInput parameters: Module ID.\n\nSuccessful response (200): List of tags associated with the module.\n\nPossible errors: Module not found, no results.",
        "summary": "Get tags by module",
        "tags": [
          "System Tag",
          "Tag"
        ],
        "parameters": [
          {
            "name": "module",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "tags": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "tags"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/system/types/get-by-module/{module}": {
      "get": {
        "operationId": "admin.system.types.get_by_module",
        "description": "Description: Retrieves all pivot service types filtered by module.\n\nInput parameters: Module ID.\n\nSuccessful response (200): List of pivot service types associated with the module.\n\nPossible errors: Module not found, no results.",
        "summary": "get types by module",
        "tags": [
          "System Type",
          "Type"
        ],
        "parameters": [
          {
            "name": "module",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/system/types/get-resources/{type}": {
      "get": {
        "operationId": "admin.system.types.get_resources",
        "description": "Description: Retrieves all pivot service resource filtered by type.",
        "summary": "get resources for type",
        "tags": [
          "System Type",
          "Type"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "description": "The type ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/system/types/get-resources-by-module/{module}/{serviceId}": {
      "get": {
        "operationId": "admin.system.types.get_resources_by_module",
        "description": "Description: Retrieves all pivot service resource filtered by module.",
        "summary": "get resource by module",
        "tags": [
          "System Type",
          "Type"
        ],
        "parameters": [
          {
            "name": "module",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/emails/templates/{emailTemplate}/process-by-module/{modelId}": {
      "get": {
        "operationId": "admin.emails.templates.process_by_module",
        "summary": "Process email template by module",
        "tags": [
          "Template"
        ],
        "parameters": [
          {
            "name": "emailTemplate",
            "in": "path",
            "required": true,
            "description": "The email template ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/emails/templates/by-model-type/{modelType}": {
      "get": {
        "operationId": "admin.emails.templates.by_model_type",
        "summary": "Get email templates by model type",
        "tags": [
          "Template"
        ],
        "parameters": [
          {
            "name": "modelType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "email_templates": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TemplateResource"
                          }
                        }
                      },
                      "required": [
                        "email_templates"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/landlord/admin/tenants/list": {
      "get": {
        "operationId": "landlord.admin.tenants.list",
        "summary": "List all companies for the current user",
        "tags": [
          "Tenant"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TenantResource"
                      }
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/landlord/admin/tenants/{tenant}/redirect": {
      "post": {
        "operationId": "landlord.admin.tenants.redirect",
        "summary": "Redirect to tenant",
        "tags": [
          "Tenant"
        ],
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "description": "The tenant ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "tenant_login_url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "tenant_login_url"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/types-link-cf": {
      "post": {
        "operationId": "admin.types_link_cf.store",
        "description": "Description: Stores a new pivot service type in the system.\n\nInput parameters: Pivot service information (name, description, etc.).\n\nSuccessful response (200): Returns the created pivot service type with its assigned ID.\n\nPossible errors: Validation failures, data duplication.",
        "summary": "Store a new link between a equipment and a service",
        "tags": [
          "TypePivotService"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TypePivotServiceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "linked succesfully"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/types-link-cf/{typeId}/{serviceId}": {
      "delete": {
        "operationId": "admin.types_link_cf.destroy",
        "description": "Description: Deletes a pivot service type.\n\nInput parameters: Pivot service type ID to delete.\n\nSuccessful response (200): Confirmation that the pivot service type has been deleted.\n\nPossible errors: Service type not found, cross-reference error.",
        "summary": "Remove the relationship between a type and a service",
        "tags": [
          "TypePivotService"
        ],
        "parameters": [
          {
            "name": "typeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully unlinked"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/types-link-cf/{serviceId}/unlinked-types": {
      "get": {
        "operationId": "admin.types_link_cf.unlinked-types",
        "description": "Description: Retrieves all pivot service types that are not linked.\n\nInput parameters: None.\n\nSuccessful response (200): List of unlinked pivot service types.\n\nPossible errors: None.",
        "summary": "Search for types to which the service does not have a link",
        "tags": [
          "TypePivotService"
        ],
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/types-link-cf/{typeId}/unlinked-services": {
      "get": {
        "operationId": "admin.types_link_cf.unlinked-services",
        "description": "Description: Retrieves all services that are not linked.\n\nInput parameters: None.\n\nSuccessful response (200): List of unlinked services.\n\nPossible errors: None.",
        "summary": "Search for services to which the equipment does not have a link",
        "tags": [
          "TypePivotService"
        ],
        "parameters": [
          {
            "name": "typeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/users": {
      "post": {
        "operationId": "admin.users.store",
        "description": "Description: Creates a new user in the system.\n\nInput parameters: User data (name, email, role, etc.).\n\nSuccessful response (201): User created successfully.\n\nPossible errors: Invalid input data, email already in use.",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "User"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User successfully saved"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "prefixItems": [
                    {
                      "type": "string",
                      "example": "error"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "minItems": 2,
                  "maxItems": 2,
                  "additionalItems": false
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/users/{user}": {
      "get": {
        "operationId": "admin.users.show",
        "description": "Description: Displays details of a specific user.\n\nInput parameters: ID of the user.\n\nSuccessful response (200): User details.\n\nPossible errors: User not found, lack of permissions.",
        "summary": "Show the form for editing the specified resource",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "description": "The user ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/App.Http.Resources.Api.Tenant.Admin.User.UserResource"
                        }
                      },
                      "required": [
                        "user"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "description": "An error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error overview.",
                      "example": ""
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "patch": {
        "operationId": "admin.users.update",
        "description": "Description: Updates the information of an existing user.\n\nInput parameters: ID of the user, data to update.\n\nSuccessful response (200): User information updated successfully.\n\nPossible errors: User not found, invalid input data.",
        "summary": "Update the specified resource in storage",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "description": "The user ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/App.Http.Resources.Api.Tenant.Admin.User.UserResource"
                        }
                      },
                      "required": [
                        "data"
                      ]
                    },
                    {
                      "type": "array",
                      "prefixItems": [
                        {
                          "type": "string",
                          "example": "error"
                        },
                        {
                          "type": "string",
                          "example": "You cannot update this user!"
                        },
                        {
                          "type": "integer",
                          "example": 401
                        }
                      ],
                      "minItems": 3,
                      "maxItems": 3,
                      "additionalItems": false
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "prefixItems": [
                    {
                      "type": "string",
                      "example": "error"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "minItems": 2,
                  "maxItems": 2,
                  "additionalItems": false
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.users.destroy",
        "description": "Description: Deletes a user from the system.\n\nInput parameters: ID of the user.\n\nSuccessful response (200): User successfully deleted.\n\nPossible errors: User not found, lack of permissions.",
        "summary": "Remove the specified resource from storage",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "description": "The user ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/App.Http.Resources.Api.Tenant.Admin.User.UserResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/users/get": {
      "get": {
        "operationId": "admin.users.get",
        "summary": "Returns the users for event",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/App.Http.Resources.Api.Tenant.Admin.User.UserResource"
                          }
                        }
                      },
                      "required": [
                        "users"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/users/{user}/change-password": {
      "post": {
        "operationId": "admin.users.change-password",
        "description": "Description: Allows the user to change their password through a password change form.\n\nInput Parameters: Current password, new password.\n\nSuccessful Response (200): Password changed successfully.\n\nPossible Errors: Incorrect current password, new password does not meet security requirements.",
        "summary": "Stores the new user password",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "description": "The user ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password successfully updated"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/users/{modelId}/restore": {
      "patch": {
        "operationId": "admin.users.restore",
        "description": "### Description\r\nThis method restores a previously soft-deleted resource from the database. The resource is retrieved from the \"trashed\" or soft-deleted records and restored to its active state.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource that was soft-deleted and is to be restored.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Restore Resource**:\r\n- If the resource is found, the `restore()` method is called to undo the soft-delete and reactivate the resource.\n\n3. **Return Response**:\r\n- Upon successful restoration, the method returns a `204 No Content` response, indicating that the resource was restored successfully.\n\n4. **Error Handling**:\r\n- If an error occurs (such as the resource not being found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating that the resource was successfully restored.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: restore",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/users/{user}/permissions": {
      "get": {
        "operationId": "admin.users.get-permissions",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "description": "The user ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "prefixItems": [
                    {
                      "type": "string"
                    }
                  ],
                  "minItems": 1,
                  "maxItems": 1,
                  "additionalItems": false
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "description": "An error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error overview.",
                      "example": ""
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/users/{user}/security/change-email": {
      "put": {
        "operationId": "admin.users.security.change-email",
        "description": "Description: Allows a user to change their email address.\n\nInput parameters: New email address.\n\nSuccessful response (200): Confirmation that the email address has been updated.\n\nPossible errors: Email address already registered, validation failed.",
        "summary": "Store the new user email",
        "tags": [
          "UserSecurity"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "description": "The user ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email successfully updated"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/users/{user}/security/change-phone-number": {
      "put": {
        "operationId": "admin.users.security.change-phone-number",
        "description": "Description: Allows a user to change their phone number.\n\nInput parameters: New phone number.\n\nSuccessful response (200): Confirmation that the phone number has been updated.\n\nPossible errors: Phone number already registered, validation failed.",
        "summary": "Store the new user phone number",
        "tags": [
          "UserSecurity"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "description": "The user ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePhoneNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Phone number successfully updated"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/users/{user}/security/change-password": {
      "put": {
        "operationId": "admin.users.security.change-password",
        "description": "Description: Allows a user to change their password.\n\nInput parameters: Current password, new password.\n\nSuccessful response (200): Confirmation that the password has been successfully changed.\n\nPossible errors: Incorrect current password, new password validation failed.",
        "summary": "Store the new user password",
        "tags": [
          "UserSecurity"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "description": "The user ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password successfully updated"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/users/{user}/security/recovery-codes": {
      "get": {
        "operationId": "admin.users.security.recovery_codes",
        "description": "Description: Retrieves the user's recovery codes.\n\nInput parameters: User ID (optional).\n\nSuccessful response (200): List of available recovery codes.\n\nPossible errors: User not found, no codes available.",
        "summary": "Get the user recovery codes",
        "tags": [
          "UserSecurity"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "description": "The user ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "recovery_codes": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "minItems": 0,
                              "maxItems": 0,
                              "additionalItems": false
                            }
                          ]
                        }
                      },
                      "required": [
                        "recovery_codes"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/work-orders": {
      "post": {
        "operationId": "admin.work_orders.store",
        "description": "‚ö†Ô∏èCannot generate request documentation: SQLSTATE[42S02]: Base table or view not found: 1146 Table 'workupcloud.system_statuses' doesn't exist (Connection: mysql, SQL: select `id` from `system_statuses` where `name` = Approved and `model_type` = App\\Models\\Tenant\\Admin\\Proposal\\Proposal and `system_statuses`.`deleted_at` is null limit 1)",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "WorkOrder"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Work order successfully created!"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/work-orders/{workOrder}": {
      "delete": {
        "operationId": "admin.work_orders.destroy",
        "summary": "Remove the specified resource from storage",
        "tags": [
          "WorkOrder"
        ],
        "parameters": [
          {
            "name": "workOrder",
            "in": "path",
            "required": true,
            "description": "The work order ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Work order successfully deleted!"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/work-orders/{workOrderId}/journal": {
      "get": {
        "operationId": "admin.work_orders.journal",
        "summary": "Get the work order journal",
        "tags": [
          "WorkOrder"
        ],
        "parameters": [
          {
            "name": "workOrderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resources with tasks obtained successfully"
                    }
                  },
                  "required": [
                    "data",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/work-orders/{workOrderId}/services": {
      "get": {
        "operationId": "admin.work_orders.getServices",
        "summary": "Get the work order services",
        "tags": [
          "WorkOrder"
        ],
        "parameters": [
          {
            "name": "workOrderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resources with tasks obtained successfully"
                    }
                  },
                  "required": [
                    "data",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/work-orders/{workOrder}/send-emails": {
      "post": {
        "operationId": "admin.work_orders.send_emails",
        "summary": "Send the work order emails",
        "tags": [
          "WorkOrder"
        ],
        "parameters": [
          {
            "name": "workOrder",
            "in": "path",
            "required": true,
            "description": "The work order ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkOrderEmailDispatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Work order emails sent successfully"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/work-orders/{workOrder}/name-update": {
      "patch": {
        "operationId": "admin.work_orders.name.update",
        "summary": "Update the name of the work order",
        "tags": [
          "WorkOrder"
        ],
        "parameters": [
          {
            "name": "workOrder",
            "in": "path",
            "required": true,
            "description": "The work order ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkOrderNameUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Work order name updated successfully"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/work-orders/{modelId}/restore": {
      "patch": {
        "operationId": "admin.work_orders.restore",
        "description": "### Description\r\nThis method restores a previously soft-deleted resource from the database. The resource is retrieved from the \"trashed\" or soft-deleted records and restored to its active state.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource that was soft-deleted and is to be restored.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Restore Resource**:\r\n- If the resource is found, the `restore()` method is called to undo the soft-delete and reactivate the resource.\n\n3. **Return Response**:\r\n- Upon successful restoration, the method returns a `204 No Content` response, indicating that the resource was restored successfully.\n\n4. **Error Handling**:\r\n- If an error occurs (such as the resource not being found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating that the resource was successfully restored.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: restore",
        "tags": [
          "WorkOrder"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/work-orders/{modelId}/force-delete": {
      "delete": {
        "operationId": "admin.work_orders.force_delete",
        "description": "### Description\r\nThis method permanently deletes a soft-deleted resource from the database. Once a resource is force-deleted, it cannot be recovered.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource to be permanently deleted from storage.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Force Delete Resource**:\r\n- If the resource is found, the `forceDelete()` method is called to permanently remove it from the database.\n\n3. **Return Response**:\r\n- If the deletion is successful, the method returns a `204 No Content` response, indicating that the resource has been permanently deleted.\n\n4. **Error Handling**:\r\n- If an error occurs during the deletion process (e.g., the resource is not found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating the resource was successfully and permanently deleted.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: forceDelete",
        "tags": [
          "WorkOrder"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          }
        }
      }
    },
    "/admin/work-orders/guests/{workOrderId}": {
      "get": {
        "operationId": "admin.work_orders.guests.get",
        "description": "Description: Retrieves the details of a guest on a work order.\n\nInput parameters: Guest ID.\n\nSuccessful response (200): Returns the guest's information.\n\nPossible errors: Guest not found, access restricted.",
        "summary": "Returns the guests of a work order",
        "tags": [
          "WorkOrderGuest"
        ],
        "parameters": [
          {
            "name": "workOrderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "work_order_guests": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorkOrderGuestResource"
                          }
                        }
                      },
                      "required": [
                        "work_order_guests"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/work-orders/guests": {
      "post": {
        "operationId": "admin.work_orders.guests.store",
        "description": "Description: Stores a new guest on a work order.\n\nInput parameters: Guest information (name, contact, role, etc.).\n\nSuccessful response (200): Returns the created guest with its assigned ID.\n\nPossible errors: Validation failures, data duplication.",
        "summary": "Stores a new guest for a work order",
        "tags": [
          "WorkOrderGuest"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkOrderGuestRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "work_order_guest": {
                          "$ref": "#/components/schemas/WorkOrderGuestResource"
                        }
                      },
                      "required": [
                        "work_order_guest"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Guest created successfully"
                    }
                  },
                  "required": [
                    "data",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/work-orders/guests/{workOrderGuest}": {
      "delete": {
        "operationId": "admin.work_orders.guests.destroy",
        "description": "Description: Deletes a guest from a work order.\n\nInput parameters: Guest ID.\n\nSuccessful response (200): Confirms the deletion of the guest.\n\nPossible errors: Guest not found, deletion error.",
        "summary": "Removes a guest from a work order",
        "tags": [
          "WorkOrderGuest"
        ],
        "parameters": [
          {
            "name": "workOrderGuest",
            "in": "path",
            "required": true,
            "description": "The work order guest ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Guest deleted successfully"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/work-orders/services/{workOrderService}/texts/save": {
      "post": {
        "operationId": "admin.work_orders.services.texts.save",
        "description": "Description: Saves texts associated with a work order service.\n\nInput parameters: Text information (content, format, etc.).\n\nSuccessful response (200): Returns the saved texts with their assigned ID.\n\nPossible errors: Validation failures, storage error.",
        "summary": "Update the note and wording of a specific work order service",
        "tags": [
          "WorkOrderService"
        ],
        "parameters": [
          {
            "name": "workOrderService",
            "in": "path",
            "required": true,
            "description": "The work order service ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeTextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Wording saved successfully"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/work-orders/services/{workOrderService}/dates-update": {
      "patch": {
        "operationId": "admin.work_orders.services.dates.update",
        "description": "Description: Updates the dates associated with a work order service.\n\nInput parameters: Service ID, new dates to update.\n\nSuccessful response (200): Returns the service with updated dates.\n\nPossible errors: Service not found, validation failures.",
        "summary": "Update the dates of a specific work order service",
        "tags": [
          "WorkOrderService"
        ],
        "parameters": [
          {
            "name": "workOrderService",
            "in": "path",
            "required": true,
            "description": "The work order service ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Dates updated successfully"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/work-orders/services/{workOrderService}/journal-get": {
      "get": {
        "operationId": "admin.work_orders.services.journal_get",
        "description": "Description: Retrieves the activity log associated with a work order service.\n\nInput parameters: Service ID.\n\nSuccessful response (200): Returns the activity log entries.\n\nPossible errors: Log not found, access restricted.",
        "summary": "get the tasks of a specific work order service",
        "tags": [
          "WorkOrderService"
        ],
        "parameters": [
          {
            "name": "workOrderService",
            "in": "path",
            "required": true,
            "description": "The work order service ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "tasks": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TaskResource"
                          }
                        }
                      },
                      "required": [
                        "tasks"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/work-orders/services/{workOrderService}/tasks-get": {
      "get": {
        "operationId": "admin.work_orders.services.tasks_get",
        "description": "Description: Retrieves the tasks associated with a work order service.\n\nInput parameters: Service ID.\n\nSuccessful response (200): Returns the list of tasks associated with the service.\n\nPossible errors: Service not found, access restricted.",
        "summary": "get the resources with tasks of a specific work order service",
        "tags": [
          "WorkOrderService"
        ],
        "parameters": [
          {
            "name": "workOrderService",
            "in": "path",
            "required": true,
            "description": "The work order service ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "work_order_service_resources": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorkOrderServiceResourceResource"
                          }
                        }
                      },
                      "required": [
                        "work_order_service_resources"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/work-orders/services/companies/{service}": {
      "get": {
        "operationId": "admin.work_orders.services.companies.get",
        "description": "Description: Retrieves the details of a company associated with a work order service.\n\nInput parameters: Company ID.\n\nSuccessful response (200): Returns the company's information.\n\nPossible errors: Company not found, access restricted.",
        "summary": "Get the company vendors",
        "tags": [
          "WorkOrderServiceCompany"
        ],
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "**Optional**",
            "schema": {
              "type": "string",
              "default": null
            },
            "x-optional": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "companies": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CompanyResource"
                          }
                        }
                      },
                      "required": [
                        "companies"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/work-orders/services/companies": {
      "post": {
        "operationId": "admin.work_orders.services.companies.store",
        "description": "Description: Stores a new company associated with a work order service.\n\nInput parameters: Company information (name, address, contact, etc.).\n\nSuccessful response (200): Returns the created company with its assigned ID.\n\nPossible errors: Validation failures, data duplication.",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "WorkOrderServiceCompany"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkOrderServiceCompanyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Company successfully linked!"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/work-orders/services/companies/{workOrderServiceCompany}": {
      "delete": {
        "operationId": "admin.work_orders.services.companies.destroy",
        "description": "Description: Deletes a company associated with a work order service.\n\nInput parameters: Company ID.\n\nSuccessful response (200): Confirms the deletion of the company.\n\nPossible errors: Company not found, deletion error.",
        "summary": "Remove the specified resource from storage",
        "tags": [
          "WorkOrderServiceCompany"
        ],
        "parameters": [
          {
            "name": "workOrderServiceCompany",
            "in": "path",
            "required": true,
            "description": "The work order service company ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Company successfully unlinked!"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/work-orders/services/{workOrderServiceId}/companies/addresses": {
      "get": {
        "operationId": "admin.work_orders.services.companies.addresses",
        "description": "Description: Stores a new company associated with a work order service.\n\nInput parameters: Company information (name, address, contact, etc.).\n\nSuccessful response (200): Returns the created company with its assigned ID.\n\nPossible errors: Validation failures, data duplication.",
        "summary": "Returns the guests of a work order",
        "tags": [
          "WorkOrderServiceCompanyAddress"
        ],
        "parameters": [
          {
            "name": "workOrderServiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "work_order_service_company_addresses": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorkOrderServiceCompanyAddressResource"
                          }
                        }
                      },
                      "required": [
                        "work_order_service_company_addresses"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/work-orders/services/companies/addresses": {
      "post": {
        "operationId": "admin.work_orders.services.companies.addresses.store",
        "description": "Description: Stores a new company associated with a work order service.\n\nInput parameters: Company information (name, address, contact, etc.).\n\nSuccessful response (200): Returns the created company with its assigned ID.\n\nPossible errors: Validation failures, data duplication.",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "WorkOrderServiceCompanyAddress"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkOrderServiceCompanyAddressRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "work_order_service_company_address": {
                          "$ref": "#/components/schemas/WorkOrderServiceCompanyAddressResource"
                        }
                      },
                      "required": [
                        "work_order_service_company_address"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Factory address successfully linked!"
                    }
                  },
                  "required": [
                    "data",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/work-orders/services/{workOrderService}/companies/{company}/addresses/unlinked": {
      "get": {
        "operationId": "admin.work_orders.services.companies.addresses.unlinked",
        "description": "Description: Deletes a company associated with a work order service.\n\nInput parameters: Company ID.\n\nSuccessful response (200): Confirms the deletion of the company.\n\nPossible errors: Company not found, deletion error.",
        "summary": "Get the company factory addresses that are not linked to the work order service",
        "tags": [
          "WorkOrderServiceCompanyAddress"
        ],
        "parameters": [
          {
            "name": "workOrderService",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "addresses": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/AddressResource"
                          }
                        }
                      },
                      "required": [
                        "addresses"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/work-orders/services/resources/{workOrderServiceId}/get": {
      "get": {
        "operationId": "admin.work_orders.services.resources.get",
        "description": "Description: Retrieves the details of a specific resource associated with a work order service.\n\nInput parameters: Resource ID.\n\nSuccessful response (200): Returns the resource's information.\n\nPossible errors: Resource not found, access restricted.",
        "summary": "Returns the guests of a work order",
        "tags": [
          "WorkOrderServiceResource"
        ],
        "parameters": [
          {
            "name": "workOrderServiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "work_order_service_resource": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorkOrderServiceResourceResource"
                          }
                        }
                      },
                      "required": [
                        "work_order_service_resource"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/work-orders/services/resources": {
      "post": {
        "operationId": "admin.work_orders.services.resources.store",
        "description": "Description: Stores a new resource associated with a work order service.\n\nInput parameters: Resource information (name, type, quantity, etc.).\n\nSuccessful response (200): Returns the created resource with its assigned ID.\n\nPossible errors: Validation failures, data duplication.",
        "summary": "Store",
        "tags": [
          "WorkOrderServiceResource"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkOrderServiceResourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Resource stored successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "work_order_service_resource": {
                          "$ref": "#/components/schemas/WorkOrderServiceResourceResource"
                        }
                      },
                      "required": [
                        "work_order_service_resource"
                      ]
                    }
                  },
                  "required": [
                    "message",
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/work-orders/services/resources/{resource}": {
      "put": {
        "operationId": "admin.work_orders.services.resources.update",
        "description": "Description: Updates the information of a resource associated with a work order service.\n\nInput parameters: Resource ID, new data to update.\n\nSuccessful response (200): Returns the updated resource.\n\nPossible errors: Resource not found, validation failures.",
        "summary": "Update",
        "tags": [
          "WorkOrderServiceResource"
        ],
        "parameters": [
          {
            "name": "resource",
            "in": "path",
            "required": true,
            "description": "The resource ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkOrderServiceResourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Resource updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "work_order_service_resource": {
                          "$ref": "#/components/schemas/WorkOrderServiceResourceResource"
                        }
                      },
                      "required": [
                        "work_order_service_resource"
                      ]
                    }
                  },
                  "required": [
                    "message",
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.work_orders.services.resources.destroy",
        "description": "Description: Deletes a resource associated with a work order service.\n\nInput parameters: Resource ID.\n\nSuccessful response (200): Confirms the deletion of the resource.\n\nPossible errors: Resource not found, deletion error.",
        "summary": "Delete",
        "tags": [
          "WorkOrderServiceResource"
        ],
        "parameters": [
          {
            "name": "resource",
            "in": "path",
            "required": true,
            "description": "The resource ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Resource deleted successfully"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/work-orders/services/resources/get-resources": {
      "get": {
        "operationId": "admin.work_orders.services.resources.get_resources",
        "description": "Description: Retrieves a list of all resources associated with a work order service.\n\nInput parameters: None.\n\nSuccessful response (200): Returns a list of resources.\n\nPossible errors: None.",
        "summary": "get related resources for type",
        "tags": [
          "WorkOrderServiceResource"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "types": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TypeWithResourceResource"
                          }
                        }
                      },
                      "required": [
                        "types"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "example": "model_type and service_id are required"
                        }
                      },
                      "required": [
                        "error"
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/work-orders/tags/{workOrderId}": {
      "get": {
        "operationId": "admin.work_orders.tags.get",
        "description": "Description: Retrieves the details of a tag in a work order.\n\nInput parameters: Tag ID.\n\nSuccessful response (200): Returns the tag's information.\n\nPossible errors: Tag not found, access restricted.",
        "summary": "Returns the guests of a work order",
        "tags": [
          "WorkOrderTag"
        ],
        "parameters": [
          {
            "name": "workOrderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "work_order_tags": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorkOrderTagResource"
                          }
                        }
                      },
                      "required": [
                        "work_order_tags"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/work-orders/tags": {
      "post": {
        "operationId": "admin.work_orders.tags.store",
        "description": "Description: Stores a new tag in a work order.\n\nInput parameters: Tag information (name, color, etc.).\n\nSuccessful response (200): Returns the created tag with its assigned ID.\n\nPossible errors: Validation failures, data duplication.",
        "summary": "Store a new link between a equipment and a service",
        "tags": [
          "WorkOrderTag"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkOrderTagRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "work_order_tag": {
                          "$ref": "#/components/schemas/WorkOrderTagResource"
                        }
                      },
                      "required": [
                        "work_order_tag"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Tag created successfully"
                    }
                  },
                  "required": [
                    "data",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/work-orders/tags/{workOrderTag}/sort-order-index-update": {
      "patch": {
        "operationId": "admin.work_orders.tags.sort_order_index.update",
        "description": "Description: Orders or updates the information of a tag.\n\nInput parameters: Tag ID, new data or order to update.\n\nSuccessful response (200): Returns the updated or reordered tag.\n\nPossible errors: Tag not found, validation failures.",
        "summary": "Update sort order index",
        "tags": [
          "WorkOrderTag"
        ],
        "parameters": [
          {
            "name": "workOrderTag",
            "in": "path",
            "required": true,
            "description": "The work order tag ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkOrderTagUpdateIndexRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Sort order index updated successfully"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/work-orders/tags/{workOrderTag}": {
      "delete": {
        "operationId": "admin.work_orders.tags.destroy",
        "description": "Description: Deletes a tag from a work order.\n\nInput parameters: Tag ID.\n\nSuccessful response (200): Confirms the deletion of the tag.\n\nPossible errors: Tag not found, deletion error.",
        "summary": "Remove the relationship between a user and a warehouse",
        "tags": [
          "WorkOrderTag"
        ],
        "parameters": [
          {
            "name": "workOrderTag",
            "in": "path",
            "required": true,
            "description": "The work order tag ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Tag deleted successfully"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/work-orders/teams/{workOrderId}": {
      "get": {
        "operationId": "admin.work_orders.teams.get",
        "description": "Description: Retrieves the details of a piece of equipment in a work order.\n\nInput parameters: Equipment ID.\n\nSuccessful response (200): Returns the equipment's information.\n\nPossible errors: Equipment not found, access restricted.",
        "summary": "Get the users associated with a specific work order",
        "tags": [
          "WorkOrderTeamUser"
        ],
        "parameters": [
          {
            "name": "workOrderId",
            "in": "path",
            "required": true,
            "description": "The ID of the work order.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "work_order_team_users": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorkOrderTeamUserResource"
                          }
                        }
                      },
                      "required": [
                        "work_order_team_users"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/work-orders/teams": {
      "post": {
        "operationId": "admin.work_orders.teams.store",
        "description": "Description: Stores a new piece of equipment in a work order.\n\nInput parameters: Equipment information (name, members, roles, etc.).\n\nSuccessful response (200): Returns the created equipment with its assigned ID.\n\nPossible errors: Validation failures, data duplication.",
        "summary": "Store a new WorkOrderTeamUser",
        "tags": [
          "WorkOrderTeamUser"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkOrderTeamUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "work_order_team_users": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorkOrderTeamUserResource"
                          }
                        }
                      },
                      "required": [
                        "work_order_team_users"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Work order team users created successfully."
                    }
                  },
                  "required": [
                    "data",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/work-orders/teams/{workOrderTeamUser}": {
      "delete": {
        "operationId": "admin.work_orders.teams.destroy",
        "description": "Description: Deletes a piece of equipment from a work order.\n\nInput parameters: Equipment ID.\n\nSuccessful response (200): Confirms the deletion of the equipment.\n\nPossible errors: Equipment not found, deletion error.",
        "summary": "Delete a work order team user",
        "tags": [
          "WorkOrderTeamUser"
        ],
        "parameters": [
          {
            "name": "workOrderTeamUser",
            "in": "path",
            "required": true,
            "description": "The work order team user to delete.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Work order team user deleted successfully."
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/workflows": {
      "post": {
        "operationId": "admin.workflows.store",
        "description": "### Description\r\nThis method creates a new workflow in the system. It stores the workflow details and associates a trigger based on the specified event.\n\n### Input Parameters\r\nThe method expects the following fields in the request:\r\n- `name` (string): The name of the workflow.\r\n- `description` (string): Description of the workflow, explaining its purpose.\r\n- `model_type` (string): The fully qualified class name of the model to which this workflow applies.\r\n- `status` (boolean): Whether the workflow is active or not.\r\n- `trigger.on_event` (string): The event that triggers the workflow. In this case, for example, the event is `created`.\n\nExample request:\r\n```json\r\n{\r\n  \"name\": \"Flujo - Propuesta aprobada\",\r\n  \"description\": \"Crear un recordatorio cuando una Propuesta fue aprobada\",\r\n  \"model_type\": \"App\\\\Models\\\\Tenant\\\\Admin\\\\Proposal\\\\Proposal\",\r\n  \"status\": true,\r\n  \"trigger\": {\r\n    \"on_event\": \"created\"\r\n  }\r\n}\r\n```\n\n### Method Logic\n\n1. **Workflow creation**:\r\n     - A workflow is created with the provided `name`, `description`, `model_type`, and `status`.\n\n2. **Trigger association**:\r\n     - The method searches for the specified event (`on_event`) in the `Type` model. If the event exists, it associates the trigger with the workflow.\r\n     - If the event is not found, the method aborts the request with a `400 Bad Request` error.\n\n3. **Successful response**:\r\n     - Returns a JSON response with the created workflow details and a 200 HTTP status.\n\n4. **Exception handling**:\r\n     - If an error occurs during the workflow creation or trigger association, it returns a `500 Internal Server Error` response with the error message.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)\r\n- **Content**:\r\n```json\r\n{\r\n  \"id\": 456,\r\n  \"name\": \"Flujo - Propuesta aprobada\",\r\n  \"description\": \"Crear un recordatorio cuando una Propuesta fue aprobada\",\r\n  \"model_type\": \"App\\\\Models\\\\Tenant\\\\Admin\\\\Proposal\\\\Proposal\",\r\n  \"status\": true,\r\n  \"trigger\": {\r\n    \"on_event\": \"created\"\r\n  }\r\n}\r\n```",
        "summary": "Create a new workflow",
        "tags": [
          "Workflow"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowStoreRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/workflows/{workflow}": {
      "get": {
        "operationId": "admin.workflows.show",
        "description": "### Description\r\nThis method retrieves a workflow by its ID. It returns the workflow details, including the triggers, conditions, and actions associated with it.\n\n### Input Parameters\r\nThe method expects the following parameters:\r\n- `workflow` (integer): The ID of the workflow to retrieve.",
        "summary": "Get a workflow by ID",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "required": true,
            "description": "The workflow ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`WorkflowResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/WorkflowResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "admin.workflows.update",
        "description": "### Description\r\nThis method updates an existing workflow in the system. It allows you to modify the workflow details, such as the name, description, model type, and status.\n\n### Input Parameters\r\nThe method expects the following fields in the request:\r\n- `name` (string): The name of the workflow.\r\n- `description` (string): Description of the workflow, explaining its purpose.\r\n- `model_type` (string): The fully qualified class name of the model to which this workflow applies.\r\n- `status` (boolean): Whether the workflow is active or not.\r\n- `trigger.on_event` (string): The event that triggers the workflow. In this case, for example, the event is `created`.\n\nExample request:\r\n```json\r\n{\r\n  \"name\": \"Flujo - Propuesta aprobada\",\r\n  \"description\": \"Crear un recordatorio cuando una Propuesta fue aprobada\",\r\n  \"model_type\": \"App\\\\Models\\\\Tenant\\\\Admin\\\\Proposal\\\\Proposal\",\r\n  \"status\": true,\r\n  \"trigger\": {\r\n    \"on_event\": \"created\"\r\n  }\r\n}\r\n```\n\n### Method Logic\n\n1. **Workflow update**:\r\n     - The method updates the workflow with the provided `name`, `description`, `model_type`, and `status`.\n\n2. **Trigger association**:\r\n     - The method searches for the specified event (`on_event`) in the `Type` model. If the event exists, it associates the trigger with the workflow.\r\n     - If the event is not found, the method aborts the request with a `400 Bad Request` error.\n\n3. **Successful response**:\r\n     - Returns a JSON response with the updated workflow details and a 200 HTTP status.\n\n4. **Exception handling**:\r\n     - If an error occurs during the workflow update or trigger association, it returns a `500 Internal Server Error` response with the error message.\n\n### Successful Response (200)\r\n- **HTTP Code**: 200 (OK)",
        "summary": "Update a workflow",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "required": true,
            "description": "The workflow ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "admin.workflows.destroy",
        "description": "## Description\r\nThis method soft deletes a workflow from the system. It sets the `deleted_at` field to the current timestamp, marking the workflow as deleted.\r\n### Input Parameters\r\nThe method expects the following parameters:\r\n- `workflow` (integer): The ID of the workflow to delete.",
        "summary": "Soft delete a workflow",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "required": true,
            "description": "The workflow ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/admin/workflows/{modelId}/restore": {
      "post": {
        "operationId": "admin.workflows.restore",
        "description": "### Description\r\nThis method restores a previously soft-deleted resource from the database. The resource is retrieved from the \"trashed\" or soft-deleted records and restored to its active state.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource that was soft-deleted and is to be restored.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Restore Resource**:\r\n- If the resource is found, the `restore()` method is called to undo the soft-delete and reactivate the resource.\n\n3. **Return Response**:\r\n- Upon successful restoration, the method returns a `204 No Content` response, indicating that the resource was restored successfully.\n\n4. **Error Handling**:\r\n- If an error occurs (such as the resource not being found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating that the resource was successfully restored.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: restore",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/workflows/{modelId}/force_delete": {
      "delete": {
        "operationId": "admin.workflows.force_delete",
        "description": "### Description\r\nThis method permanently deletes a soft-deleted resource from the database. Once a resource is force-deleted, it cannot be recovered.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource to be permanently deleted from storage.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Force Delete Resource**:\r\n- If the resource is found, the `forceDelete()` method is called to permanently remove it from the database.\n\n3. **Return Response**:\r\n- If the deletion is successful, the method returns a `204 No Content` response, indicating that the resource has been permanently deleted.\n\n4. **Error Handling**:\r\n- If an error occurs during the deletion process (e.g., the resource is not found), the method returns a `404 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating the resource was successfully and permanently deleted.\r\n```http     * /1.1 204 No Content",
        "summary": "## Method: forceDelete",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/admin/workflows/{workflow}/actions": {
      "post": {
        "operationId": "admin.workflows.actions.store",
        "description": "### Description\r\nThis method creates a new action for the specified workflow. It stores the action details and associates a type based on the specified type_id.\n\n### Input Parameters\r\nThe method expects the following fields in the request:\r\n- `type_id` (integer): The id of the type associated with the action(send_notification, create_record,update_record).\r\n- `model_type` (string): The fully qualified class name of the model to which this action applies.\r\n- `model_id` (integer): The id of the model to which this action applies.\r\n- `priority` (integer): The priority of the action.\r\n- `name` (string): The name of the action.\r\n- `params` (array): The parameters required to execute the action.\n\n### Action(Types)\n\n#### Send Notification(sms, email, webhook, push)\r\n This case handles sending a notification. Ensure that the necessary parameters\r\n for sending the notification are provided in the `params` field.\n\nExample:\r\n ```json\r\n {\r\n   \"type_id\": 62,\r\n   \"name\": \"Send Notification\",\r\n   \"params\": {\r\n     \"to\": \"573217000000\",\r\n     \"title\": \"Your task is due soon\",\r\n     \"content\": \"Please complete the task before the deadline\"\r\n   },\r\n   \"priority\": 1\r\n }\r\n ```\r\n Sub Types:\r\n - `sms`: Sends an SMS notification.\r\n - `email`: Sends an email notification.\r\n - `webhook`: Sends a webhook notification (URL required in `params`).\r\n - `push`: Sends a push notification.\n\n#### Create Record\r\n This case handles the creation of a new record. Ensure that the necessary parameters\r\n for creating a record are provided in the `params` field.\n\nExample:\r\n ```json\r\n {\r\n   \"type_id\": 59,\r\n   \"name\": \"Create a Contact\",\r\n   \"model_type\": \"App\\\\Models\\\\Tenant\\\\Admin\\\\Contact\",\r\n   \"model_id\": 29,\r\n   \"params\": {\r\n     \"name\": \"YEIMAR\",\r\n     \"last_name\": \"LEMUS\"\r\n   },\r\n   \"priority\": 1\r\n }\r\n ```\n\n#### Update Record\r\n This case handles updating an existing record. Ensure that the necessary parameters\r\n for updating the record are provided in the `params` field.\n\nExample:\r\n ```json\r\n {\r\n   \"type_id\": 60,\r\n   \"name\": \"Update a Contact\",\r\n   \"model_type\": \"App\\\\Models\\\\Tenant\\\\Admin\\\\Contact\",\r\n   \"model_id\": 29,\r\n   \"params\": {\r\n     \"name\": \"YEIMAR\",\r\n     \"last_name\": \"LEMUS\"\r\n   },\r\n   \"priority\": 1\r\n }\r\n ```\n\n#### Delete Record\r\n This case handles the deletion of a record. Ensure that the necessary parameters\r\n for deleting the record are provided.\n\nExample:\r\n ```json\r\n {\r\n   \"type_id\": 61,\r\n   \"name\": \"Delete a Contact\",\r\n   \"model_type\": \"App\\\\Models\\\\Tenant\\\\Admin\\\\Contact\",\r\n   \"model_id\": 29\r\n }\r\n ```\n\n#### Restore Record\r\n This case handles restoring a previously deleted record. Ensure that the necessary parameters\r\n for restoring the record are provided.\n\nExample:\r\n ```json\r\n {\r\n   \"type_id\": 63,\r\n   \"name\": \"Restore a Contact\",\r\n   \"model_type\": \"App\\\\Models\\\\Tenant\\\\Admin\\\\Contact\",\r\n   \"model_id\": 29\r\n }\r\n ```",
        "summary": "Create a new action for the specified workflow",
        "tags": [
          "WorkflowAction",
          "Action"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "required": true,
            "description": "The workflow ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionStoreRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a detailed error message",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "prefixItems": [
                            {
                              "type": "object",
                              "properties": {
                                "status": {
                                  "type": "integer",
                                  "example": 422
                                },
                                "title": {
                                  "type": "string",
                                  "example": "Unprocessable Entity"
                                },
                                "detail": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "status",
                                "title",
                                "detail"
                              ]
                            }
                          ],
                          "minItems": 1,
                          "maxItems": 1,
                          "additionalItems": false
                        }
                      },
                      "required": [
                        "errors"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/ActionResource"
                        }
                      },
                      "required": [
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/workflows/{workflow}/actions/{action}": {
      "get": {
        "operationId": "admin.workflows.actions.show",
        "description": "#### Parameters\n\n- **`workflow`**: The ID of the workflow.\r\n- **`action`**: The ID of the action that belongs to the workflow.\n\n#### Return\n\n- **`JsonResponse`**: Returns a JSON response containing the details of the specified action.",
        "summary": "Get an action by ID",
        "tags": [
          "WorkflowAction",
          "Action"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "required": true,
            "description": "The workflow ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "action",
            "in": "path",
            "required": true,
            "description": "The action ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ActionResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "description": "An error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error overview.",
                      "example": "The action does not belong to the specified workflow"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "patch": {
        "operationId": "admin.workflows.actions.update",
        "description": "### Description\r\nThis method updates an action for a given workflow.\n\n### Input Parameters\r\n- `type_id` (integer): The ID of the action type.\r\n- `model_type` (string): The fully qualified class name of the model.\r\n- `model_id` (integer): The model ID.\r\n- `priority` (integer): The priority of the action.",
        "summary": "Update action by ID",
        "tags": [
          "WorkflowAction",
          "Action"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "required": true,
            "description": "The workflow ID.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "action",
            "in": "path",
            "required": true,
            "description": "The action ID.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ActionResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.workflows.actions.destroy",
        "description": "### Description\r\nThis method soft deletes a specified action, ensuring it belongs to the given workflow.\n\n### Input Parameters\r\n- `workflow` (integer): The workflow ID.\r\n- `action` (integer): The action ID.",
        "summary": "Soft delete a specific action",
        "tags": [
          "WorkflowAction",
          "Action"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "required": true,
            "description": "The workflow ID.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "action",
            "in": "path",
            "required": true,
            "description": "The action ID.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "description": "An error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error overview.",
                      "example": "The action does not belong to the specified workflow"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/workflows/{workflow}/actions/{modelId}/restore": {
      "post": {
        "operationId": "admin.workflows.actions.restore",
        "description": "### Description\r\nThis method restores a previously soft-deleted resource from the database. The resource is retrieved from the \"trashed\" or soft-deleted records and restored to its active state.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource that was soft-deleted and is to be restored.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Restore Resource**:\r\n- If the resource is found, the `restore()` method is called to undo the soft-delete and reactivate the resource.\n\n3. **Return Response**:\r\n- Upon successful restoration, the method returns a `204 No Content` response, indicating that the resource was restored successfully.\n\n4. **Error Handling**:\r\n- If an error occurs (such as the resource not being found), the method returns a `422 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating that the resource was successfully restored.\r\n```http\r\nHTTP/1.1 204 No Content",
        "summary": "## Method: restore",
        "tags": [
          "WorkflowAction",
          "Action"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "required": true,
            "description": "The workflow ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/workflows/{workflow}/actions/{modelId}/force_delete": {
      "delete": {
        "operationId": "admin.workflows.actions.force_delete",
        "description": "### Description\r\nThis method permanently deletes a soft-deleted resource from the database. Once a resource is force-deleted, it cannot be recovered.\n\n### Input Parameters\r\n- **modelId** (integer): The unique identifier of the resource to be permanently deleted from storage.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\r\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Force Delete Resource**:\r\n- If the resource is found, the `forceDelete()` method is called to permanently remove it from the database.\n\n3. **Return Response**:\r\n- If the deletion is successful, the method returns a `204 No Content` response, indicating that the resource has been permanently deleted.\n\n4. **Error Handling**:\r\n- If an error occurs during the deletion process (e.g., the resource is not found), the method returns a `422 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\r\n- **HTTP Code**: 204 (No Content)\r\n- **Content**: No content is returned in the response body, indicating the resource was successfully and permanently deleted.\r\n```http\r\nHTTP/1.1 204 No Content",
        "summary": "## Method: forceDelete",
        "tags": [
          "WorkflowAction",
          "Action"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "required": true,
            "description": "The workflow ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "description": "An error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error overview.",
                      "example": "The action does not belong to the specified workflow"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/workflows/{workflow}/conditions": {
      "post": {
        "operationId": "admin.workflows.conditions.store",
        "description": "### Description\nThis method creates a new condition for the specified workflow. It stores the condition details and associates rules based on the specified field_id and operator_id.\n\n### Input Parameters\nThe method expects the following fields in the request:\n- `match_type` (string): The type of condition to be applied. It can be `all` or `any`.\n- `rules` (array): The rules that define the condition. Each rule consists of the following fields:\n - `field_id` (integer): The id of the field associated with the rule.\n- `operator_id` (integer): The id of the operator associated with the rule.\n- `value` (number| string etc..): The values to be compared with the field.",
        "summary": "Create a new condition for the specified workflow",
        "tags": [
          "WorkflowCondition",
          "Condition"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "required": true,
            "description": "The workflow ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConditionStoreRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/admin/workflows/{workflow}/conditions/{condition}": {
      "get": {
        "operationId": "admin.workflows.conditions.show",
        "description": "This method retrieves a condition associated with a given workflow.\nIf the condition is not found, it throws an exception.\nIf the condition exists, it is returned in JSON format.‚ö†Ô∏èCannot generate request documentation: count(): Argument #1 ($value) must be of type Countable|array, Illuminate\\Database\\Eloquent\\Relations\\HasMany given",
        "summary": "Display a specific condition within a workflow",
        "tags": [
          "WorkflowCondition",
          "Condition"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "required": true,
            "description": "The ID of the associated workflow.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "condition",
            "in": "path",
            "required": true,
            "description": "The ID of the condition to retrieve.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ConditionResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "put": {
        "operationId": "admin.workflows.conditions.update",
        "description": "This method updates an existing condition associated with a given workflow.\nIt first retrieves the condition, validates the request data, and attempts to update it.\nIf successful, it returns the updated condition in JSON format.\nIf any error occurs during the update, it catches the exception and returns an error response.‚ö†Ô∏èCannot generate request documentation: count(): Argument #1 ($value) must be of type Countable|array, Illuminate\\Database\\Eloquent\\Relations\\HasMany given",
        "summary": "Update the specified condition resource within a workflow",
        "tags": [
          "WorkflowCondition",
          "Condition"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "required": true,
            "description": "The ID of the associated workflow.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "condition",
            "in": "path",
            "required": true,
            "description": "The ID of the condition to update.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rules": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/ConditionResource"
                        }
                      },
                      "required": [
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "admin.workflows.conditions.destroy",
        "description": "This method performs a soft delete on a condition associated with a given workflow.\nThe condition is not permanently deleted from the database but is flagged as deleted.\nIf the deletion is successful, it returns a no-content response. If an error occurs,\nit catches the exception and returns a JSON error response.",
        "summary": "Soft delete the specified condition resource from storage",
        "tags": [
          "WorkflowCondition",
          "Condition"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "required": true,
            "description": "The ID of the associated workflow.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "condition",
            "in": "path",
            "required": true,
            "description": "The ID of the condition to soft delete.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/workflows/{workflow}/conditions/{modelId}/restore": {
      "post": {
        "operationId": "admin.workflows.conditions.restore",
        "description": "### Description\nThis method restores a previously soft-deleted resource from the database. The resource is retrieved from the \"trashed\" or soft-deleted records and restored to its active state.\n\n### Input Parameters\n- **modelId** (integer): The unique identifier of the resource that was soft-deleted and is to be restored.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Restore Resource**:\n- If the resource is found, the `restore()` method is called to undo the soft-delete and reactivate the resource.\n\n3. **Return Response**:\n- Upon successful restoration, the method returns a `204 No Content` response, indicating that the resource was restored successfully.\n\n4. **Error Handling**:\n- If an error occurs (such as the resource not being found), the method returns a `422 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\n- **HTTP Code**: 204 (No Content)\n- **Content**: No content is returned in the response body, indicating that the resource was successfully restored.\n```http\nHTTP/1.1 204 No Content",
        "summary": "## Method: restore",
        "tags": [
          "WorkflowCondition",
          "Condition"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "required": true,
            "description": "The workflow ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/admin/workflows/{workflow}/conditions/{modelId}/force_delete": {
      "delete": {
        "operationId": "admin.workflows.conditions.force_delete",
        "description": "### Description\nThis method permanently deletes a soft-deleted resource from the database. Once a resource is force-deleted, it cannot be recovered.\n\n### Input Parameters\n- **modelId** (integer): The unique identifier of the resource to be permanently deleted from storage.\n\n### Method Logic\n\n1. **Retrieve Soft-Deleted Model**:\n- The method attempts to find the resource with the given `modelId` from the soft-deleted records using the `onlyTrashed()` method.\n\n2. **Force Delete Resource**:\n- If the resource is found, the `forceDelete()` method is called to permanently remove it from the database.\n\n3. **Return Response**:\n- If the deletion is successful, the method returns a `204 No Content` response, indicating that the resource has been permanently deleted.\n\n4. **Error Handling**:\n- If an error occurs during the deletion process (e.g., the resource is not found), the method returns a `422 Unprocessable Entity` response with the error message.\n\n### Successful Response (204)\n- **HTTP Code**: 204 (No Content)\n- **Content**: No content is returned in the response body, indicating the resource was successfully and permanently deleted.\n```http\nHTTP/1.1 204 No Content",
        "summary": "## Method: forceDelete",
        "tags": [
          "WorkflowCondition",
          "Condition"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "required": true,
            "description": "The workflow ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "http": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": ""
      }
    },
    "schemas": {
      "ActionResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "ActionResource"
      },
      "ActionStoreRequest": {
        "type": "object",
        "properties": {
          "type_id": {
            "type": "integer"
          },
          "model_type": {
            "type": "string"
          },
          "model_id": {
            "type": "integer"
          },
          "priority": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "params": {
            "type": "object",
            "properties": {
              "to": {
                "type": "string"
              },
              "type": {
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "sms",
                  "email",
                  "webhook",
                  "push"
                ]
              },
              "template_id": {
                "type": [
                  "integer",
                  "null"
                ]
              },
              "title": {
                "type": "string"
              },
              "content": {
                "type": "string"
              },
              "url": {
                "type": "string",
                "format": "uri"
              }
            }
          }
        },
        "required": [
          "type_id",
          "model_type",
          "model_id",
          "name"
        ],
        "title": "ActionStoreRequest"
      },
      "ActionUpdateRequest": {
        "type": "object",
        "properties": {
          "type_id": {
            "type": [
              "integer",
              "null"
            ]
          },
          "model_type": {
            "type": [
              "string",
              "null"
            ]
          },
          "model_id": {
            "type": [
              "integer",
              "null"
            ]
          },
          "priority": {
            "type": [
              "integer",
              "null"
            ]
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 3,
            "maxLength": 255
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 255
          },
          "params": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "title": "ActionUpdateRequest"
      },
      "AddressRequest": {
        "type": "object",
        "properties": {
          "model_type": {
            "type": "string"
          },
          "model_id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 250
          },
          "address_line_1": {
            "type": "string",
            "minLength": 3,
            "maxLength": 250
          },
          "latitude": {
            "type": "number",
            "minimum": -90,
            "maximum": 90
          },
          "longitude": {
            "type": "number",
            "minimum": -180,
            "maximum": 180
          },
          "note": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 3,
            "maxLength": 250
          },
          "country_id": {
            "type": "integer"
          },
          "state_id": {
            "type": "integer"
          },
          "city_id": {
            "type": "integer"
          },
          "billing": {
            "type": [
              "string",
              "null"
            ]
          },
          "zip_code": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 3,
            "maxLength": 10
          },
          "main": {
            "type": [
              "string",
              "null"
            ]
          },
          "primary_email": {
            "type": [
              "string",
              "null"
            ],
            "format": "email",
            "minLength": 3,
            "maxLength": 100
          },
          "primary_phone": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 10,
            "maxLength": 20
          },
          "type_id": {
            "type": "integer"
          }
        },
        "required": [
          "model_type",
          "model_id",
          "name",
          "address_line_1",
          "latitude",
          "longitude",
          "country_id",
          "state_id",
          "city_id",
          "type_id"
        ],
        "title": "AddressRequest"
      },
      "AddressResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "AddressResource"
      },
      "AllCompanyResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "companies"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "required": [
              "name"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "title": "AllCompanyResource"
      },
      "AllProjectResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "projects"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "required": [
              "name"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "title": "AllProjectResource"
      },
      "App.Http.Resources.Api.Tenant.Admin.Event.Email.EmailResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "App.Http.Resources.Api.Tenant.Admin.Event.Email.EmailResource"
      },
      "App.Http.Resources.Api.Tenant.Admin.User.UserResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "App.Http.Resources.Api.Tenant.Admin.User.UserResource"
      },
      "CallRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100
          },
          "type": {
            "type": "string",
            "enum": [
              "call received",
              "call made"
            ]
          },
          "start_date": {
            "type": "string"
          },
          "hours": {
            "type": "string"
          },
          "minutes": {
            "type": "string"
          },
          "seconds": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 3
          },
          "organizer_id": {
            "type": "string"
          },
          "assigned": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "guests": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "permissions_all": {
            "type": "string"
          },
          "notify": {
            "type": "string"
          },
          "related_model_type": {
            "type": "string"
          },
          "related_model_id": {
            "type": "string"
          },
          "carbon": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": [
                "string",
                "null"
              ],
              "format": "email",
              "maxLength": 100
            },
            "minItems": 1
          }
        },
        "required": [
          "title",
          "type",
          "start_date",
          "hours",
          "minutes",
          "seconds",
          "organizer_id",
          "permissions_all",
          "notify"
        ],
        "title": "CallRequest"
      },
      "CallResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "CallResource"
      },
      "ChangeEmailRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 100
          }
        },
        "required": [
          "email"
        ],
        "title": "ChangeEmailRequest"
      },
      "ChangePasswordRequest": {
        "type": "object",
        "properties": {
          "current_password": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "minLength": 8
          },
          "password_confirmation": {
            "type": "string",
            "minLength": 8
          }
        },
        "required": [
          "password",
          "password_confirmation"
        ],
        "title": "ChangePasswordRequest"
      },
      "ChangePhoneNumberRequest": {
        "type": "object",
        "properties": {
          "primary_phone": {
            "type": "string",
            "minLength": 10,
            "maxLength": 20
          }
        },
        "required": [
          "primary_phone"
        ],
        "title": "ChangePhoneNumberRequest"
      },
      "ChangeRequest": {
        "type": "object",
        "properties": {
          "status_id": {
            "type": "integer"
          },
          "model_type": {
            "type": "string"
          },
          "model_id": {
            "type": "number"
          }
        },
        "required": [
          "status_id",
          "model_type",
          "model_id"
        ],
        "title": "ChangeRequest"
      },
      "ChangeTextRequest": {
        "type": "object",
        "properties": {
          "wording": {
            "type": "string"
          },
          "note": {
            "type": "string"
          }
        },
        "required": [
          "wording",
          "note"
        ],
        "title": "ChangeTextRequest"
      },
      "ChatResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "ChatResource"
      },
      "CompanyRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the company",
            "example": "testing",
            "minLength": 3,
            "maxLength": 150
          },
          "display_name": {
            "type": "string",
            "description": "The display name",
            "example": "testing",
            "minLength": 3,
            "maxLength": 150
          },
          "primary_email": {
            "type": "string",
            "format": "email",
            "description": "Main Email",
            "example": "testing@novadeha.com",
            "minLength": 3,
            "maxLength": 100
          },
          "primary_phone": {
            "type": [
              "string",
              "null"
            ],
            "description": "Main phone",
            "example": "+573134609907",
            "minLength": 10,
            "maxLength": 20
          },
          "category_id": {
            "type": "integer",
            "description": "Id from system categories",
            "example": 1
          },
          "type_id": {
            "type": "integer",
            "description": "Id from system types",
            "example": 1
          },
          "external_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "usa info",
            "example": "12345",
            "minLength": 1,
            "maxLength": 100
          },
          "internal_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "usa info",
            "example": "736556",
            "minLength": 1,
            "maxLength": 100
          },
          "main": {
            "type": "array",
            "description": "The main address.",
            "example": {
              "name": "Prueba",
              "country_id": "1",
              "state_id": "3",
              "city_id": "57",
              "address_line_1": "23123 FL-7, Boca Raton, FL 33428, EE. UU.",
              "latitude": "26.332649",
              "longitude": "-80.20398209999999",
              "type_id": "38",
              "zip_code": "33428",
              "primary_email": "nova@gmail.com",
              "primary_phone": "+573134609907",
              "note": "Nota de prueba"
            },
            "items": {
              "type": "string"
            }
          },
          "billing": {
            "type": [
              "array",
              "null"
            ],
            "description": "The billing address.",
            "example": {
              "name": "Prueba",
              "country_id": "1",
              "state_id": "3",
              "city_id": "57",
              "address_line_1": "23123 FL-7, Boca Raton, FL 33428, EE. UU.",
              "latitude": "26.332649",
              "longitude": "-80.20398209999999",
              "type_id": "38",
              "zip_code": "33428",
              "primary_email": "nova@gmail.com",
              "primary_phone": "+573134609907",
              "note": "Nota de prueba"
            },
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "display_name",
          "primary_email",
          "category_id",
          "type_id",
          "main"
        ],
        "title": "CompanyRequest"
      },
      "CompanyResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "CompanyResource"
      },
      "ConditionResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "ConditionResource"
      },
      "ConditionStoreRequest": {
        "type": "object",
        "properties": {
          "match_type": {
            "type": "string",
            "enum": [
              "all",
              "any"
            ]
          },
          "rules": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field_id": {
                  "type": "integer"
                },
                "operator_id": {
                  "type": "integer"
                },
                "value": {
                  "type": "string"
                }
              },
              "required": [
                "field_id",
                "operator_id",
                "value"
              ]
            }
          }
        },
        "required": [
          "match_type",
          "rules"
        ],
        "title": "ConditionStoreRequest"
      },
      "ContactByCompanyResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "contacts"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "display_name": {
                "type": "string"
              }
            },
            "required": [
              "display_name"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "title": "ContactByCompanyResource"
      },
      "ContactPivotAdditionalAddressRequest": {
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "integer",
            "description": "Contact ID The ID of the contact.",
            "example": 101
          },
          "additional_address_id": {
            "type": "integer",
            "description": "Additional Address ID The ID of the additional address.",
            "example": 202
          }
        },
        "required": [
          "contact_id",
          "additional_address_id"
        ],
        "title": "ContactPivotAdditionalAddressRequest"
      },
      "ContactPivotProjectRequest": {
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "integer",
            "description": "Contact ID The ID of the contact.",
            "example": 2
          },
          "project_id": {
            "type": "integer",
            "description": "Project ID The ID of the project.",
            "example": 12
          }
        },
        "required": [
          "contact_id",
          "project_id"
        ],
        "title": "ContactPivotProjectRequest"
      },
      "ContactRequest": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "first name",
            "example": "Anton",
            "minLength": 2,
            "maxLength": 100
          },
          "last_name": {
            "type": "string",
            "description": "Last name",
            "example": "orsted",
            "minLength": 2,
            "maxLength": 100
          },
          "display_name": {
            "type": "string",
            "description": "Display name",
            "example": "Anton orsted",
            "minLength": 3,
            "maxLength": 200
          },
          "occupation": {
            "type": [
              "string",
              "null"
            ],
            "description": "Occupation",
            "example": "Dev",
            "minLength": 3,
            "maxLength": 200
          },
          "primary_email": {
            "type": "string",
            "format": "email",
            "description": "Main Email",
            "example": "testing@novadeha.com",
            "minLength": 3,
            "maxLength": 100
          },
          "primary_phone": {
            "type": [
              "string",
              "null"
            ],
            "description": "Main phone",
            "example": "+573134609907",
            "minLength": 10,
            "maxLength": 20
          },
          "company_id": {
            "type": "integer",
            "description": "Id from Companies",
            "example": 1
          },
          "type_id": {
            "type": "integer",
            "description": "Id from system types",
            "example": 1
          },
          "internal_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "usa info",
            "example": "12345",
            "minLength": 1,
            "maxLength": 100
          },
          "external_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "usa info",
            "example": "12345",
            "minLength": 1,
            "maxLength": 100
          }
        },
        "required": [
          "first_name",
          "last_name",
          "display_name",
          "primary_email",
          "company_id",
          "type_id"
        ],
        "title": "ContactRequest"
      },
      "ContactResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "ContactResource"
      },
      "ConvertToCompanyRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Company name",
            "example": "Acme Corporation",
            "minLength": 3,
            "maxLength": 150
          },
          "type_id": {
            "type": "integer",
            "description": "Type ID",
            "example": 1
          },
          "category_id": {
            "type": "integer",
            "description": "Category ID",
            "example": 1
          }
        },
        "required": [
          "name",
          "type_id",
          "category_id"
        ],
        "title": "ConvertToCompanyRequest"
      },
      "ConvertToContactRequest": {
        "type": "object",
        "properties": {
          "type_id": {
            "type": "integer",
            "description": "Type ID",
            "example": 1
          },
          "company_id": {
            "type": "integer",
            "description": "Company ID",
            "example": 1
          }
        },
        "required": [
          "type_id",
          "company_id"
        ],
        "title": "ConvertToContactRequest"
      },
      "EmailRequest": {
        "type": "object",
        "properties": {
          "model_type": {
            "type": "string"
          },
          "model_id": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "format": "email",
            "minLength": 3,
            "maxLength": 250
          },
          "note": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 3,
            "maxLength": 250
          },
          "main": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "model_type",
          "model_id",
          "value"
        ],
        "title": "EmailRequest"
      },
      "EmailResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "EmailResource"
      },
      "FileRequest": {
        "type": "object",
        "properties": {
          "model_type": {
            "type": "string"
          },
          "model_id": {
            "type": "string"
          },
          "type_id": {
            "type": "integer"
          },
          "file_title": {
            "type": "string",
            "minLength": 3,
            "maxLength": 250
          },
          "note": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 3,
            "maxLength": 250
          },
          "is_public": {
            "type": [
              "string",
              "null"
            ]
          },
          "file": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 1048576
            }
          }
        },
        "required": [
          "model_type",
          "model_id",
          "type_id",
          "file_title",
          "file"
        ],
        "title": "FileRequest"
      },
      "FileResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "FileResource"
      },
      "ForgotRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "'g-recaptcha-response' => ['required', new ReCaptcha],\n'g-recaptcha-response-v3' => ['required', new ReCaptchaV3],"
          }
        },
        "required": [
          "email"
        ],
        "title": "ForgotRequest"
      },
      "GetByCompanyTestResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "projects"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "required": [
              "name"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "title": "GetByCompanyTestResource"
      },
      "JsonApiSaveResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "links"
        ],
        "title": "JsonApiSaveResource"
      },
      "JsonApiWithRelationshipResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "relationships": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "relationships",
          "links"
        ],
        "title": "JsonApiWithRelationshipResource"
      },
      "LeadRequest": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "first name",
            "example": "Anton",
            "minLength": 2,
            "maxLength": 100
          },
          "last_name": {
            "type": "string",
            "description": "Last name",
            "example": "orsted",
            "minLength": 2,
            "maxLength": 100
          },
          "display_name": {
            "type": "string",
            "description": "Display name",
            "example": "Anton orsted",
            "minLength": 3,
            "maxLength": 200
          },
          "occupation": {
            "type": [
              "string",
              "null"
            ],
            "description": "Occupation",
            "example": "Dev",
            "minLength": 3,
            "maxLength": 200
          },
          "primary_email": {
            "type": "string",
            "format": "email",
            "description": "Main Email",
            "example": "testing@novadeha.com",
            "minLength": 3,
            "maxLength": 100
          },
          "primary_phone": {
            "type": [
              "string",
              "null"
            ],
            "description": "Main phone",
            "example": "+573134609907",
            "minLength": 10,
            "maxLength": 20
          },
          "company": {
            "type": "string",
            "description": "Id from Companies",
            "example": "1",
            "minLength": 3,
            "maxLength": 150
          },
          "internal_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "usa info",
            "example": "12345",
            "minLength": 1,
            "maxLength": 100
          },
          "external_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "usa info",
            "example": "12345",
            "minLength": 1,
            "maxLength": 100
          },
          "main": {
            "type": "array",
            "description": "The main address.",
            "example": {
              "name": "Prueba",
              "country_id": "1",
              "state_id": "3",
              "city_id": "57",
              "address_line_1": "23123 FL-7, Boca Raton, FL 33428, EE. UU.",
              "latitude": "26.332649",
              "longitude": "-80.20398209999999",
              "type_id": "38",
              "zip_code": "33428",
              "primary_email": "nova@gmail.com",
              "primary_phone": "+573134609907",
              "note": "Nota de prueba"
            },
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "first_name",
          "last_name",
          "display_name",
          "primary_email",
          "company",
          "main"
        ],
        "title": "LeadRequest"
      },
      "LeadResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "LeadResource"
      },
      "LogResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "LogResource"
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "device_name": {
            "type": "string",
            "description": "'g-recaptcha-response' => ['required', new ReCaptcha],\n'g-recaptcha-response-v3' => ['required', new ReCaptchaV3],"
          }
        },
        "required": [
          "email",
          "password",
          "device_name"
        ],
        "title": "LoginRequest"
      },
      "MeetingRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100
          },
          "type": {
            "type": "string",
            "enum": [
              "in-person meeting",
              "virtual meeting"
            ]
          },
          "start_date": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 3
          },
          "organizer_id": {
            "type": "string"
          },
          "assigned": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "guests": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "permissions_all": {
            "type": "string"
          },
          "notify": {
            "type": "string"
          },
          "related_model_type": {
            "type": "string"
          },
          "related_model_id": {
            "type": "string"
          },
          "carbon": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": [
                "string",
                "null"
              ],
              "format": "email",
              "maxLength": 100
            },
            "minItems": 1
          }
        },
        "required": [
          "title",
          "type",
          "start_date",
          "organizer_id",
          "permissions_all",
          "notify"
        ],
        "title": "MeetingRequest"
      },
      "MeetingResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "MeetingResource"
      },
      "MessageRequest": {
        "type": "object",
        "properties": {
          "chat_id": {
            "type": "integer"
          },
          "content": {
            "type": "string",
            "minLength": 1
          },
          "type": {
            "type": [
              "string",
              "null"
            ],
            "description": "'type' => ['nullable', 'numeric', Rule::in([1, 7])],"
          }
        },
        "required": [
          "chat_id",
          "content"
        ],
        "title": "MessageRequest"
      },
      "MessageResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "MessageResource"
      },
      "NoteRequest": {
        "type": "object",
        "properties": {
          "model_type": {
            "type": "string"
          },
          "model_id": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "minLength": 3,
            "maxLength": 250
          },
          "value": {
            "type": "string",
            "minLength": 3
          },
          "main": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "model_type",
          "model_id",
          "title",
          "value"
        ],
        "title": "NoteRequest"
      },
      "NoteResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "NoteResource"
      },
      "NotifyRequest": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100
          },
          "company": {
            "type": "string",
            "minLength": 3,
            "maxLength": 150
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 3
          },
          "phone_number": {
            "type": "string",
            "minLength": 10,
            "maxLength": 20
          },
          "occupation": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200
          },
          "number_of_employees": {
            "type": "integer",
            "minimum": 1
          },
          "location": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200
          }
        },
        "required": [
          "full_name",
          "company",
          "email",
          "phone_number",
          "occupation",
          "number_of_employees",
          "location"
        ],
        "title": "NotifyRequest"
      },
      "PhoneNumberRequest": {
        "type": "object",
        "properties": {
          "model_type": {
            "type": "string"
          },
          "model_id": {
            "type": "string"
          },
          "type_id": {
            "type": "integer"
          },
          "value": {
            "type": "string",
            "minLength": 7,
            "maxLength": 20
          },
          "note": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 3,
            "maxLength": 250
          },
          "main": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "model_type",
          "model_id",
          "type_id",
          "value"
        ],
        "title": "PhoneNumberRequest"
      },
      "PhoneNumberResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "PhoneNumberResource"
      },
      "ProjectRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the company",
            "example": "testing",
            "minLength": 3,
            "maxLength": 150
          },
          "display_name": {
            "type": "string",
            "description": "The display name",
            "example": "testing",
            "minLength": 3,
            "maxLength": 150
          },
          "parcel_number": {
            "type": [
              "string",
              "null"
            ],
            "description": "Random Number",
            "example": "87266",
            "minLength": 1,
            "maxLength": 100
          },
          "company_id": {
            "type": "integer",
            "description": "Id from companies",
            "example": 1
          },
          "main_contact_id": {
            "type": "integer",
            "description": "Id from Main Contact",
            "example": 1
          },
          "type_id": {
            "type": "integer",
            "description": "Id from system types",
            "example": 1
          },
          "external_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "usa info",
            "example": "12345",
            "minLength": 1,
            "maxLength": 100
          },
          "internal_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "usa info",
            "example": "12345",
            "minLength": 1,
            "maxLength": 100
          },
          "main": {
            "type": "array",
            "description": "The main address.",
            "example": {
              "name": "Prueba",
              "country_id": "1",
              "state_id": "3",
              "city_id": "57",
              "address_line_1": "23123 FL-7, Boca Raton, FL 33428, EE. UU.",
              "latitude": "26.332649",
              "longitude": "-80.20398209999999",
              "type_id": "38",
              "zip_code": "33428",
              "primary_email": "nova@gmail.com",
              "primary_phone": "+573134609907",
              "note": "Nota de prueba"
            },
            "items": {
              "type": "string"
            }
          },
          "billing": {
            "type": "array",
            "description": "The billing address.",
            "example": {
              "name": "Prueba",
              "country_id": "1",
              "state_id": "3",
              "city_id": "57",
              "address_line_1": "23123 FL-7, Boca Raton, FL 33428, EE. UU.",
              "latitude": "26.332649",
              "longitude": "-80.20398209999999",
              "type_id": "38",
              "zip_code": "33428",
              "primary_email": "nova@gmail.com",
              "primary_phone": "+573134609907",
              "note": "Nota de prueba"
            },
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "display_name",
          "company_id",
          "main_contact_id",
          "type_id",
          "main",
          "billing"
        ],
        "title": "ProjectRequest"
      },
      "ProjectResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "ProjectResource"
      },
      "ProposalPreviewResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "ProposalPreviewResource"
      },
      "ProposalRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Proposal Name The name of the proposal. It must be unique and between 3 and 100 characters.",
            "example": "New Marketing Campaign",
            "minLength": 3,
            "maxLength": 100
          },
          "project_id": {
            "type": "number",
            "description": "Project ID The ID of the project linked to this proposal.",
            "example": 303
          },
          "is_public": {
            "type": [
              "string",
              "null"
            ],
            "description": "Is Public Indicates whether the proposal is public (optional). Can be `true` or `false`.",
            "example": true
          }
        },
        "required": [
          "name",
          "project_id"
        ],
        "title": "ProposalRequest"
      },
      "ProposalResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "ProposalResource"
      },
      "ProposalServiceMaterialRequest": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total Amount The total monetary value of the proposal. It must be a numeric value between 0 and 9,999,999,999,999.99.",
            "example": 1500.75,
            "minimum": 0,
            "maximum": 9999999999999.99
          },
          "resource_values": {
            "type": "array",
            "description": "Resource Values An array of resource values related to the proposal. Each element in the array represents a specific value associated\nwith a resource.",
            "example": [
              100,
              200,
              300
            ],
            "items": {
              "type": "string"
            }
          },
          "proposal_service_id": {
            "type": "number",
            "description": "Proposal Service ID The ID of the proposal service. It must exist in the `proposal_service` table.",
            "example": 55
          }
        },
        "required": [
          "total",
          "resource_values",
          "proposal_service_id"
        ],
        "title": "ProposalServiceMaterialRequest"
      },
      "ProposalServiceMaterialResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "ProposalServiceMaterialResource"
      },
      "ProposalServiceRequest": {
        "type": "object",
        "properties": {
          "proposal_id": {
            "type": "number",
            "description": "Proposal ID The ID of the proposal to associate the service with.",
            "example": 123
          },
          "service_id": {
            "type": "number",
            "description": "Service ID The ID of the service to link to the proposal.",
            "example": 45
          },
          "company_id": {
            "type": "number",
            "description": "Company ID The ID of the company linked to the proposal (optional).",
            "example": 78
          }
        },
        "required": [
          "proposal_id",
          "service_id"
        ],
        "title": "ProposalServiceRequest"
      },
      "ProposalServiceResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "ProposalServiceResource"
      },
      "ProposalServiceResourceSubservice": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "ProposalServiceResourceSubservice"
      },
      "ProposalServiceResourceTypeRequest": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "description": "Quantity The quantity of the resource or service. Must be a numeric value greater than or equal to 0.",
            "example": 10,
            "minimum": 0
          },
          "rate_per_hour": {
            "type": "number",
            "description": "Rate per Hour The hourly rate for the resource or service. Must be a numeric value between 0 and 9,999,999,999,999.99.",
            "example": 50,
            "minimum": 0,
            "maximum": 9999999999999.99
          },
          "days": {
            "type": "number",
            "description": "Days The number of days for which the service or resource is being used. Must be a numeric value greater than or equal to 0.",
            "example": 5,
            "minimum": 0
          },
          "hours": {
            "type": "number",
            "description": "Hours The number of hours per day that the resource or service is being used. Must be a numeric value greater than or equal to 0.",
            "example": 8,
            "minimum": 0
          },
          "total": {
            "type": "number",
            "description": "Total The total cost or amount for the resource or service. Must be a numeric value between 0 and 9,999,999,999,999.99.",
            "example": 2000,
            "minimum": 0,
            "maximum": 9999999999999.99
          },
          "other_name": {
            "type": "string",
            "description": "Other Name An alternative name for the resource or service if no type is provided. This is required if `type_id` is not set.",
            "example": "Custom Material",
            "maxLength": 255
          },
          "resource_id": {
            "type": "string",
            "description": "Resource ID The ID of the resource, required if the `type` is `material-type`.",
            "example": "102"
          },
          "proposal_service_id": {
            "type": "number",
            "description": "Proposal Service ID The ID of the service linked to the proposal. Must exist in the `proposal_service` table.",
            "example": 55
          },
          "type_id": {
            "type": "integer",
            "description": "Type ID The type ID for the resource or service. Required unless `other_name` is provided. Must exist in the `system_types` table and not be deleted.",
            "example": 3
          }
        },
        "required": [
          "quantity",
          "rate_per_hour",
          "days",
          "hours",
          "total",
          "other_name",
          "proposal_service_id",
          "type_id"
        ],
        "title": "ProposalServiceResourceTypeRequest"
      },
      "ProposalServiceResourceTypeResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "ProposalServiceResourceTypeResource"
      },
      "ProposalServiceSubserviceRequest": {
        "type": "object",
        "properties": {
          "minimum_cost": {
            "type": "number",
            "minimum": 0,
            "maximum": 9999999999999.99
          },
          "add_cost": {
            "type": "number",
            "minimum": 0,
            "maximum": 9999999999999.99
          },
          "overhead_profit": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          },
          "quantity": {
            "type": "number",
            "minimum": 0
          },
          "rate": {
            "type": "number",
            "minimum": 0,
            "maximum": 9999999999999.99
          },
          "profit": {
            "type": [
              "number",
              "null"
            ],
            "minimum": 0,
            "maximum": 9999999999999.99
          },
          "total": {
            "type": "number",
            "minimum": 0,
            "maximum": 9999999999999.99
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 3
          },
          "proposal_service_id": {
            "type": "number"
          },
          "subservice_id": {
            "type": "number"
          }
        },
        "required": [
          "minimum_cost",
          "add_cost",
          "overhead_profit",
          "quantity",
          "rate",
          "total",
          "proposal_service_id",
          "subservice_id"
        ],
        "title": "ProposalServiceSubserviceRequest"
      },
      "ProposalSummaryResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "ProposalSummaryResource"
      },
      "ProposalWordingRequest": {
        "type": "object",
        "properties": {
          "wording": {
            "type": "string",
            "description": "Wording The wording or description related to the proposal. This field is required and must be a string.",
            "example": "This proposal outlines the key objectives and deliverables for the project."
          }
        },
        "required": [
          "wording"
        ],
        "title": "ProposalWordingRequest"
      },
      "ReminderRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100
          },
          "date": {
            "type": "string"
          },
          "email": {
            "type": "boolean"
          },
          "sms": {
            "type": "boolean"
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 3
          },
          "related_model_type": {
            "type": "string"
          },
          "related_model_id": {
            "type": "string"
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "maxItems": 5
          }
        },
        "required": [
          "title",
          "date",
          "related_model_type",
          "related_model_id"
        ],
        "title": "ReminderRequest"
      },
      "ReminderResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "ReminderResource"
      },
      "RoleResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "RoleResource"
      },
      "SMSMessageRequest": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "maxLength": 160
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "content",
          "phone_numbers"
        ],
        "title": "SMSMessageRequest"
      },
      "SMSRequest": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "maxLength": 160
          },
          "related_model_type": {
            "type": "string"
          },
          "related_model_id": {
            "type": "string"
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "content",
          "related_model_type",
          "related_model_id",
          "phone_numbers"
        ],
        "title": "SMSRequest"
      },
      "SMSResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "SMSResource"
      },
      "SendEmailRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100
          },
          "template": {
            "type": "string",
            "minLength": 3
          },
          "send_to_all": {
            "type": "boolean"
          },
          "send_to_all_individually": {
            "type": "boolean"
          },
          "related_model_type": {
            "type": "string"
          },
          "related_model_id": {
            "type": "integer"
          },
          "recipients": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": [
                "string",
                "null"
              ],
              "format": "email",
              "maxLength": 100
            },
            "minItems": 1
          },
          "carbon": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": [
                "string",
                "null"
              ],
              "format": "email",
              "maxLength": 100
            },
            "minItems": 1
          },
          "carbon_hidden": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": [
                "string",
                "null"
              ],
              "format": "email",
              "maxLength": 100
            },
            "minItems": 1
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": [
                "string",
                "null"
              ],
              "maxLength": 25000
            }
          }
        },
        "required": [
          "subject",
          "template",
          "related_model_type",
          "related_model_id"
        ],
        "title": "SendEmailRequest"
      },
      "ServiceConstantsResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "ServiceConstantsResource"
      },
      "ServiceResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "ServiceResource"
      },
      "StatusResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "StatusResource"
      },
      "SubcategoryResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "SubcategoryResource"
      },
      "TaskRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100
          },
          "location": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 3,
            "maxLength": 100
          },
          "latitude": {
            "type": "string",
            "minLength": -90,
            "maxLength": 90
          },
          "longitude": {
            "type": "string",
            "minLength": -180,
            "maxLength": 180
          },
          "zip_code": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 3,
            "maxLength": 10
          },
          "start_date": {
            "type": "string"
          },
          "end_date": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 3
          },
          "organizer_id": {
            "type": "string"
          },
          "assigned": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "guests": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "permissions_all": {
            "type": "string"
          },
          "notify": {
            "type": "string"
          },
          "related_model_type": {
            "type": "string"
          },
          "related_model_id": {
            "type": "string"
          },
          "carbon": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": [
                "string",
                "null"
              ],
              "format": "email",
              "maxLength": 100
            },
            "minItems": 1
          },
          "tags": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "integer"
            },
            "maxItems": 5
          }
        },
        "required": [
          "title",
          "start_date",
          "end_date",
          "organizer_id",
          "permissions_all",
          "notify"
        ],
        "title": "TaskRequest"
      },
      "TaskResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "TaskResource"
      },
      "TemplateResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "TemplateResource"
      },
      "TenantResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "TenantResource"
      },
      "TermsAndConditionsRequest": {
        "type": "object",
        "properties": {
          "terms_and_conditions": {
            "type": "string",
            "description": "Terms and Conditions The terms and conditions related to the proposal. This field is required and must be a string.",
            "example": "All services must be completed within 30 days of project approval."
          }
        },
        "required": [
          "terms_and_conditions"
        ],
        "title": "TermsAndConditionsRequest"
      },
      "TwoFactorRequest": {
        "type": "object",
        "properties": {
          "login_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "recovery_code": {
            "type": "string"
          },
          "device_name": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "recovery_code",
          "device_name"
        ],
        "title": "TwoFactorRequest"
      },
      "TypePivotServiceRequest": {
        "type": "object",
        "properties": {
          "type_id": {
            "type": "integer"
          },
          "service_id": {
            "type": "integer"
          }
        },
        "required": [
          "type_id",
          "service_id"
        ],
        "title": "TypePivotServiceRequest"
      },
      "TypeWithResourceResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "TypeWithResourceResource"
      },
      "UpdateDateRequest": {
        "type": "object",
        "properties": {
          "start_date": {
            "type": "string"
          },
          "end_date": {
            "type": "string"
          }
        },
        "required": [
          "start_date",
          "end_date"
        ],
        "title": "UpdateDateRequest"
      },
      "UpdateDiscountRequest": {
        "type": "object",
        "properties": {
          "discount": {
            "type": "number",
            "minimum": 0,
            "maximum": 9999999999999.99
          }
        },
        "required": [
          "discount"
        ],
        "title": "UpdateDiscountRequest"
      },
      "UpdateProfitRequest": {
        "type": "object",
        "properties": {
          "profit": {
            "type": "number",
            "minimum": 0,
            "maximum": 9999999999999.99
          }
        },
        "required": [
          "profit"
        ],
        "title": "UpdateProfitRequest"
      },
      "UserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 100
          },
          "password": {
            "type": "string",
            "minLength": 8
          },
          "username": {
            "type": "string",
            "maxLength": 30
          },
          "role": {
            "type": "integer"
          },
          "status": {
            "type": [
              "string",
              "null"
            ]
          },
          "primary_phone": {
            "type": "string",
            "minLength": 10,
            "maxLength": 20
          },
          "occupation": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200
          },
          "password_confirmation": {
            "type": "string",
            "minLength": 8
          }
        },
        "required": [
          "name",
          "email",
          "password",
          "username",
          "role",
          "primary_phone",
          "occupation",
          "password_confirmation"
        ],
        "title": "UserRequest"
      },
      "UserResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "UserResource"
      },
      "WorkOrderEmailDispatchRequest": {
        "type": "object",
        "properties": {
          "resend_emails": {
            "type": "string",
            "enum": [
              "0",
              "1"
            ]
          }
        },
        "required": [
          "resend_emails"
        ],
        "title": "WorkOrderEmailDispatchRequest"
      },
      "WorkOrderGuestRequest": {
        "type": "object",
        "properties": {
          "work_order_id": {
            "type": "number"
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 100
          }
        },
        "required": [
          "work_order_id",
          "name",
          "email"
        ],
        "title": "WorkOrderGuestRequest"
      },
      "WorkOrderGuestResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "WorkOrderGuestResource"
      },
      "WorkOrderNameUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100
          }
        },
        "required": [
          "name"
        ],
        "title": "WorkOrderNameUpdateRequest"
      },
      "WorkOrderServiceCompanyAddressRequest": {
        "type": "object",
        "properties": {
          "work_order_service_company_id": {
            "type": "integer"
          },
          "additional_address_id": {
            "type": "integer"
          }
        },
        "required": [
          "work_order_service_company_id",
          "additional_address_id"
        ],
        "title": "WorkOrderServiceCompanyAddressRequest"
      },
      "WorkOrderServiceCompanyAddressResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Attributes"
          },
          "work_order_service_company_id": {
            "type": "string"
          },
          "additional_address_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "additionalAddress": {
            "description": "Relationships",
            "$ref": "#/components/schemas/AddressResource"
          },
          "workOrderServiceCompany": {
            "$ref": "#/components/schemas/WorkOrderServiceCompanyResource"
          }
        },
        "required": [
          "id",
          "work_order_service_company_id",
          "additional_address_id",
          "created_at",
          "updated_at"
        ],
        "title": "WorkOrderServiceCompanyAddressResource"
      },
      "WorkOrderServiceCompanyRequest": {
        "type": "object",
        "properties": {
          "work_order_service_id": {
            "type": "integer"
          },
          "company_id": {
            "type": "integer"
          }
        },
        "required": [
          "work_order_service_id",
          "company_id"
        ],
        "title": "WorkOrderServiceCompanyRequest"
      },
      "WorkOrderServiceCompanyResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Attributes"
          },
          "work_order_service_id": {
            "type": "string"
          },
          "company_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "company": {
            "description": "Relationships",
            "$ref": "#/components/schemas/CompanyResource"
          }
        },
        "required": [
          "id",
          "work_order_service_id",
          "company_id",
          "created_at",
          "updated_at"
        ],
        "title": "WorkOrderServiceCompanyResource"
      },
      "WorkOrderServiceResourceRequest": {
        "type": "object",
        "properties": {
          "resource_type": {
            "type": "string"
          },
          "work_order_service_id": {
            "type": "integer"
          },
          "work_order_service_resource_type_id": {
            "type": [
              "integer",
              "null"
            ]
          },
          "resources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "quantity": {
                  "type": "integer",
                  "minimum": 1
                }
              },
              "required": [
                "id",
                "quantity"
              ]
            }
          }
        },
        "required": [
          "resource_type",
          "work_order_service_id",
          "resources"
        ],
        "title": "WorkOrderServiceResourceRequest"
      },
      "WorkOrderServiceResourceResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "WorkOrderServiceResourceResource"
      },
      "WorkOrderTagRequest": {
        "type": "object",
        "properties": {
          "work_order_id": {
            "type": "number"
          },
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255
          },
          "content": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255
          }
        },
        "required": [
          "work_order_id",
          "name",
          "content"
        ],
        "title": "WorkOrderTagRequest"
      },
      "WorkOrderTagResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "WorkOrderTagResource"
      },
      "WorkOrderTagUpdateIndexRequest": {
        "type": "object",
        "properties": {
          "sort_order_index": {
            "type": "number"
          }
        },
        "required": [
          "sort_order_index"
        ],
        "title": "WorkOrderTagUpdateIndexRequest"
      },
      "WorkOrderTeamUserRequest": {
        "type": "object",
        "properties": {
          "work_order_id": {
            "type": "integer"
          },
          "users": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "work_order_id",
          "users"
        ],
        "title": "WorkOrderTeamUserRequest"
      },
      "WorkOrderTeamUserResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "WorkOrderTeamUserResource"
      },
      "WorkflowResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "relationships": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 0,
            "additionalItems": false
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            },
            "required": [
              "self"
            ]
          }
        },
        "required": [
          "type",
          "id",
          "attributes",
          "counts",
          "relationships",
          "meta",
          "links"
        ],
        "title": "WorkflowResource"
      },
      "WorkflowStoreRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 255
          },
          "status": {
            "type": "string"
          },
          "model_type": {
            "type": "string",
            "maxLength": 255
          },
          "trigger": {
            "type": "object",
            "properties": {
              "on_event": {
                "type": "string",
                "maxLength": 255
              }
            },
            "required": [
              "on_event"
            ]
          },
          "trigger.on_event": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "status",
          "model_type",
          "trigger"
        ],
        "title": "WorkflowStoreRequest"
      },
      "WorkflowUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 3,
            "maxLength": 255
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 255
          },
          "status": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "model_type": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 255
          },
          "trigger": {
            "type": "object",
            "properties": {
              "on_event": {
                "type": [
                  "string",
                  "null"
                ],
                "maxLength": 255
              }
            }
          },
          "trigger.on_event": {
            "type": "string"
          }
        },
        "title": "WorkflowUpdateRequest"
      }
    },
    "responses": {
      "AuthenticationException": {
        "description": "Unauthenticated",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Error overview."
                }
              },
              "required": [
                "message"
              ]
            }
          }
        }
      },
      "ValidationException": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Errors overview."
                },
                "errors": {
                  "type": "object",
                  "description": "A detailed description of each field that failed validation.",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "message",
                "errors"
              ]
            }
          }
        }
      },
      "ModelNotFoundException": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Error overview."
                }
              },
              "required": [
                "message"
              ]
            }
          }
        }
      },
      "AuthorizationException": {
        "description": "Authorization error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Error overview."
                }
              },
              "required": [
                "message"
              ]
            }
          }
        }
      }
    }
  }
}